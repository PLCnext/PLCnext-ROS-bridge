// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IAcyclicCommunicationService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_IAcyclicCommunicationService_2eproto__INCLUDED
#define GRPC_IAcyclicCommunicationService_2eproto__INCLUDED

#include "IAcyclicCommunicationService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace Io {
namespace Axioline {
namespace Services {
namespace Grpc {

// *
// Use this service for acyclic axioline communication
//
class IAcyclicCommunicationService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.Io.Axioline.Services.Grpc.IAcyclicCommunicationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Read a PDI object from an axioline module (blocking mode)
    // / </summary>
    // / <param name="pdiParam">
    // / Structure with all parameter to address an object on a module to read from
    // / <see cref="Arp.Device.Interface.Services.PdiParam" /></param>
    // / <param name="data">
    // / Data that are read from the module
    // / </param>
    // / <returns>
    // / Structure with error information
    // / <see cref="Arp.Device.Interface.Services.PdiResult" /></returns>
    virtual ::grpc::Status PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>> AsyncPdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>>(AsyncPdiReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>> PrepareAsyncPdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>>(PrepareAsyncPdiReadRaw(context, request, cq));
    }
    // / <summary>
    // / Write a PDI object on an axioline module (blocking mode)
    // / </summary>
    // / <param name="pdiParam">
    // / Structure with all parameter to address an object on a module to write on
    // / <see cref="Arp.Device.Interface.Services.PdiParam" /></param>
    // / <param name="data">
    // / Data that shall be written on the module
    // / </param>
    // / <returns>
    // / Structure with error information
    // / <see cref="Arp.Device.Interface.Services.PdiResult" /></returns>
    virtual ::grpc::Status PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>> AsyncPdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>>(AsyncPdiWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>> PrepareAsyncPdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>>(PrepareAsyncPdiWriteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Read a PDI object from an axioline module (blocking mode)
      // / </summary>
      // / <param name="pdiParam">
      // / Structure with all parameter to address an object on a module to read from
      // / <see cref="Arp.Device.Interface.Services.PdiParam" /></param>
      // / <param name="data">
      // / Data that are read from the module
      // / </param>
      // / <returns>
      // / Structure with error information
      // / <see cref="Arp.Device.Interface.Services.PdiResult" /></returns>
      virtual void PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Write a PDI object on an axioline module (blocking mode)
      // / </summary>
      // / <param name="pdiParam">
      // / Structure with all parameter to address an object on a module to write on
      // / <see cref="Arp.Device.Interface.Services.PdiParam" /></param>
      // / <param name="data">
      // / Data that shall be written on the module
      // / </param>
      // / <returns>
      // / Structure with error information
      // / <see cref="Arp.Device.Interface.Services.PdiResult" /></returns>
      virtual void PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* AsyncPdiReadRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* PrepareAsyncPdiReadRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* AsyncPdiWriteRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* PrepareAsyncPdiWriteRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>> AsyncPdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>>(AsyncPdiReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>> PrepareAsyncPdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>>(PrepareAsyncPdiReadRaw(context, request, cq));
    }
    ::grpc::Status PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>> AsyncPdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>>(AsyncPdiWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>> PrepareAsyncPdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>>(PrepareAsyncPdiWriteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PdiRead(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PdiWrite(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* AsyncPdiReadRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* PrepareAsyncPdiReadRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* AsyncPdiWriteRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* PrepareAsyncPdiWriteRaw(::grpc::ClientContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PdiRead_;
    const ::grpc::internal::RpcMethod rpcmethod_PdiWrite_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Read a PDI object from an axioline module (blocking mode)
    // / </summary>
    // / <param name="pdiParam">
    // / Structure with all parameter to address an object on a module to read from
    // / <see cref="Arp.Device.Interface.Services.PdiParam" /></param>
    // / <param name="data">
    // / Data that are read from the module
    // / </param>
    // / <returns>
    // / Structure with error information
    // / <see cref="Arp.Device.Interface.Services.PdiResult" /></returns>
    virtual ::grpc::Status PdiRead(::grpc::ServerContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response);
    // / <summary>
    // / Write a PDI object on an axioline module (blocking mode)
    // / </summary>
    // / <param name="pdiParam">
    // / Structure with all parameter to address an object on a module to write on
    // / <see cref="Arp.Device.Interface.Services.PdiParam" /></param>
    // / <param name="data">
    // / Data that shall be written on the module
    // / </param>
    // / <returns>
    // / Structure with error information
    // / <see cref="Arp.Device.Interface.Services.PdiResult" /></returns>
    virtual ::grpc::Status PdiWrite(::grpc::ServerContext* context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PdiRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PdiRead() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PdiRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiRead(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPdiRead(::grpc::ServerContext* context, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PdiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PdiWrite() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PdiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiWrite(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPdiWrite(::grpc::ServerContext* context, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PdiRead<WithAsyncMethod_PdiWrite<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PdiRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PdiRead() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* response) { return this->PdiRead(context, request, response); }));}
    void SetMessageAllocatorFor_PdiRead(
        ::grpc::experimental::MessageAllocator< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PdiRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiRead(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PdiRead(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PdiRead(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PdiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PdiWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* request, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* response) { return this->PdiWrite(context, request, response); }));}
    void SetMessageAllocatorFor_PdiWrite(
        ::grpc::experimental::MessageAllocator< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PdiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiWrite(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PdiWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PdiWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_PdiRead<ExperimentalWithCallbackMethod_PdiWrite<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_PdiRead<ExperimentalWithCallbackMethod_PdiWrite<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PdiRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PdiRead() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PdiRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiRead(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PdiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PdiWrite() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PdiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiWrite(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PdiRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PdiRead() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PdiRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiRead(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPdiRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PdiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PdiWrite() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PdiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiWrite(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPdiWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PdiRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PdiRead() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PdiRead(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PdiRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiRead(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PdiRead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PdiRead(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PdiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PdiWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PdiWrite(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PdiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PdiWrite(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PdiWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PdiWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PdiRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PdiRead() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* streamer) {
                       return this->StreamedPdiRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PdiRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PdiRead(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPdiRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadRequest,::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PdiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PdiWrite() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* streamer) {
                       return this->StreamedPdiWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PdiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PdiWrite(::grpc::ServerContext* /*context*/, const ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest* /*request*/, ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPdiWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteRequest,::Arp::Io::Axioline::Services::Grpc::IAcyclicCommunicationServicePdiWriteResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PdiRead<WithStreamedUnaryMethod_PdiWrite<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PdiRead<WithStreamedUnaryMethod_PdiWrite<Service > > StreamedService;
};

}  // namespace Grpc
}  // namespace Services
}  // namespace Axioline
}  // namespace Io
}  // namespace Arp


#endif  // GRPC_IAcyclicCommunicationService_2eproto__INCLUDED
