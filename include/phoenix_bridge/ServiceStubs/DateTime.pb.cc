// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DateTime.proto

#include "DateTime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DateStructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateStructure_DateStructure_2eproto;
namespace Arp {
namespace Grpc {
class DateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DateTime> _instance;
} _DateTime_default_instance_;
}  // namespace Grpc
}  // namespace Arp
static void InitDefaultsscc_info_DateTime_DateTime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Arp::Grpc::_DateTime_default_instance_;
    new (ptr) ::Arp::Grpc::DateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DateTime_DateTime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DateTime_DateTime_2eproto}, {
      &scc_info_DateStructure_DateStructure_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DateTime_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DateTime_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DateTime_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DateTime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Arp::Grpc::DateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Arp::Grpc::DateTime, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Arp::Grpc::DateTime, datetimekind_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Arp::Grpc::DateTime, Value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Arp::Grpc::DateTime)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Arp::Grpc::_DateTime_default_instance_),
};

const char descriptor_table_protodef_DateTime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016DateTime.proto\022\010Arp.Grpc\032\023DateStructur"
  "e.proto\"\204\001\n\010DateTime\022,\n\014DateTimeKind\030\001 \001"
  "(\0162\026.Arp.Grpc.DateTimeKind\022\017\n\005ticks\030\002 \001("
  "\022H\000\0220\n\rdatestructure\030\003 \001(\0132\027.Arp.Grpc.Da"
  "teStructureH\000B\007\n\005Value*(\n\014DateTimeKind\022\017"
  "\n\013Unspecified\020\000\022\007\n\003Utc\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DateTime_2eproto_deps[1] = {
  &::descriptor_table_DateStructure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DateTime_2eproto_sccs[1] = {
  &scc_info_DateTime_DateTime_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DateTime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DateTime_2eproto = {
  false, false, descriptor_table_protodef_DateTime_2eproto, "DateTime.proto", 232,
  &descriptor_table_DateTime_2eproto_once, descriptor_table_DateTime_2eproto_sccs, descriptor_table_DateTime_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_DateTime_2eproto::offsets,
  file_level_metadata_DateTime_2eproto, 1, file_level_enum_descriptors_DateTime_2eproto, file_level_service_descriptors_DateTime_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DateTime_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DateTime_2eproto)), true);
namespace Arp {
namespace Grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DateTime_2eproto);
  return file_level_enum_descriptors_DateTime_2eproto[0];
}
bool DateTimeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DateTime::_Internal {
 public:
  static const ::Arp::Grpc::DateStructure& datestructure(const DateTime* msg);
};

const ::Arp::Grpc::DateStructure&
DateTime::_Internal::datestructure(const DateTime* msg) {
  return *msg->Value_.datestructure_;
}
void DateTime::set_allocated_datestructure(::Arp::Grpc::DateStructure* datestructure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Value();
  if (datestructure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datestructure)->GetArena();
    if (message_arena != submessage_arena) {
      datestructure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datestructure, submessage_arena);
    }
    set_has_datestructure();
    Value_.datestructure_ = datestructure;
  }
  // @@protoc_insertion_point(field_set_allocated:Arp.Grpc.DateTime.datestructure)
}
void DateTime::clear_datestructure() {
  if (_internal_has_datestructure()) {
    if (GetArena() == nullptr) {
      delete Value_.datestructure_;
    }
    clear_has_Value();
  }
}
DateTime::DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Arp.Grpc.DateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetimekind_ = from.datetimekind_;
  clear_has_Value();
  switch (from.Value_case()) {
    case kTicks: {
      _internal_set_ticks(from._internal_ticks());
      break;
    }
    case kDatestructure: {
      _internal_mutable_datestructure()->::Arp::Grpc::DateStructure::MergeFrom(from._internal_datestructure());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Arp.Grpc.DateTime)
}

void DateTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DateTime_DateTime_2eproto.base);
  datetimekind_ = 0;
  clear_has_Value();
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:Arp.Grpc.DateTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Value()) {
    clear_Value();
  }
}

void DateTime::ArenaDtor(void* object) {
  DateTime* _this = reinterpret_cast< DateTime* >(object);
  (void)_this;
}
void DateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime& DateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DateTime_DateTime_2eproto.base);
  return *internal_default_instance();
}


void DateTime::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:Arp.Grpc.DateTime)
  switch (Value_case()) {
    case kTicks: {
      // No need to clear
      break;
    }
    case kDatestructure: {
      if (GetArena() == nullptr) {
        delete Value_.datestructure_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:Arp.Grpc.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetimekind_ = 0;
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Arp.Grpc.DateTimeKind DateTimeKind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datetimekind(static_cast<::Arp::Grpc::DateTimeKind>(val));
        } else goto handle_unusual;
        continue;
      // sint64 ticks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_ticks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Arp.Grpc.DateStructure datestructure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_datestructure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Arp.Grpc.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Arp.Grpc.DateTimeKind DateTimeKind = 1;
  if (this->datetimekind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_datetimekind(), target);
  }

  // sint64 ticks = 2;
  if (_internal_has_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_ticks(), target);
  }

  // .Arp.Grpc.DateStructure datestructure = 3;
  if (_internal_has_datestructure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::datestructure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Arp.Grpc.DateTime)
  return target;
}

size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Arp.Grpc.DateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Arp.Grpc.DateTimeKind DateTimeKind = 1;
  if (this->datetimekind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datetimekind());
  }

  switch (Value_case()) {
    // sint64 ticks = 2;
    case kTicks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_ticks());
      break;
    }
    // .Arp.Grpc.DateStructure datestructure = 3;
    case kDatestructure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.datestructure_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Arp.Grpc.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Arp.Grpc.DateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Arp.Grpc.DateTime)
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Arp.Grpc.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetimekind() != 0) {
    _internal_set_datetimekind(from._internal_datetimekind());
  }
  switch (from.Value_case()) {
    case kTicks: {
      _internal_set_ticks(from._internal_ticks());
      break;
    }
    case kDatestructure: {
      _internal_mutable_datestructure()->::Arp::Grpc::DateStructure::MergeFrom(from._internal_datestructure());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void DateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Arp.Grpc.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Arp.Grpc.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(datetimekind_, other->datetimekind_);
  swap(Value_, other->Value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTime::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Grpc
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Arp::Grpc::DateTime* Arena::CreateMaybeMessage< ::Arp::Grpc::DateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Arp::Grpc::DateTime >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
