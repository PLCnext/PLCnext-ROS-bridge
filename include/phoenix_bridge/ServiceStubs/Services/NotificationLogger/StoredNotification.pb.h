// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredNotification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_StoredNotification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_StoredNotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_StoredNotification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_StoredNotification_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_StoredNotification_2eproto;
namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {
class StoredNotification;
class StoredNotificationDefaultTypeInternal;
extern StoredNotificationDefaultTypeInternal _StoredNotification_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {

// ===================================================================

class StoredNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification) */ {
 public:
  inline StoredNotification() : StoredNotification(nullptr) {}
  virtual ~StoredNotification();

  StoredNotification(const StoredNotification& from);
  StoredNotification(StoredNotification&& from) noexcept
    : StoredNotification() {
    *this = ::std::move(from);
  }

  inline StoredNotification& operator=(const StoredNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredNotification& operator=(StoredNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoredNotification& default_instance();

  static inline const StoredNotification* internal_default_instance() {
    return reinterpret_cast<const StoredNotification*>(
               &_StoredNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoredNotification& a, StoredNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StoredNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoredNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoredNotification* New() const final {
    return CreateMaybeMessage<StoredNotification>(nullptr);
  }

  StoredNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoredNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoredNotification& from);
  void MergeFrom(const StoredNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.StoredNotification";
  }
  protected:
  explicit StoredNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StoredNotification_2eproto);
    return ::descriptor_table_StoredNotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 7,
    kPayloadXmlFieldNumber = 8,
    kArchiveFieldNumber = 2,
    kNotificationNameFieldNumber = 3,
    kSenderNameFieldNumber = 4,
    kTimeStampFieldNumber = 5,
    kSeverityFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // repeated string Payload = 7;
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  const std::string& payload(int index) const;
  std::string* mutable_payload(int index);
  void set_payload(int index, const std::string& value);
  void set_payload(int index, std::string&& value);
  void set_payload(int index, const char* value);
  void set_payload(int index, const char* value, size_t size);
  std::string* add_payload();
  void add_payload(const std::string& value);
  void add_payload(std::string&& value);
  void add_payload(const char* value);
  void add_payload(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& payload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_payload();
  private:
  const std::string& _internal_payload(int index) const;
  std::string* _internal_add_payload();
  public:

  // repeated string PayloadXml = 8;
  int payloadxml_size() const;
  private:
  int _internal_payloadxml_size() const;
  public:
  void clear_payloadxml();
  const std::string& payloadxml(int index) const;
  std::string* mutable_payloadxml(int index);
  void set_payloadxml(int index, const std::string& value);
  void set_payloadxml(int index, std::string&& value);
  void set_payloadxml(int index, const char* value);
  void set_payloadxml(int index, const char* value, size_t size);
  std::string* add_payloadxml();
  void add_payloadxml(const std::string& value);
  void add_payloadxml(std::string&& value);
  void add_payloadxml(const char* value);
  void add_payloadxml(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& payloadxml() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_payloadxml();
  private:
  const std::string& _internal_payloadxml(int index) const;
  std::string* _internal_add_payloadxml();
  public:

  // string Archive = 2;
  void clear_archive();
  const std::string& archive() const;
  void set_archive(const std::string& value);
  void set_archive(std::string&& value);
  void set_archive(const char* value);
  void set_archive(const char* value, size_t size);
  std::string* mutable_archive();
  std::string* release_archive();
  void set_allocated_archive(std::string* archive);
  private:
  const std::string& _internal_archive() const;
  void _internal_set_archive(const std::string& value);
  std::string* _internal_mutable_archive();
  public:

  // string NotificationName = 3;
  void clear_notificationname();
  const std::string& notificationname() const;
  void set_notificationname(const std::string& value);
  void set_notificationname(std::string&& value);
  void set_notificationname(const char* value);
  void set_notificationname(const char* value, size_t size);
  std::string* mutable_notificationname();
  std::string* release_notificationname();
  void set_allocated_notificationname(std::string* notificationname);
  private:
  const std::string& _internal_notificationname() const;
  void _internal_set_notificationname(const std::string& value);
  std::string* _internal_mutable_notificationname();
  public:

  // string SenderName = 4;
  void clear_sendername();
  const std::string& sendername() const;
  void set_sendername(const std::string& value);
  void set_sendername(std::string&& value);
  void set_sendername(const char* value);
  void set_sendername(const char* value, size_t size);
  std::string* mutable_sendername();
  std::string* release_sendername();
  void set_allocated_sendername(std::string* sendername);
  private:
  const std::string& _internal_sendername() const;
  void _internal_set_sendername(const std::string& value);
  std::string* _internal_mutable_sendername();
  public:

  // string TimeStamp = 5;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string Severity = 6;
  void clear_severity();
  const std::string& severity() const;
  void set_severity(const std::string& value);
  void set_severity(std::string&& value);
  void set_severity(const char* value);
  void set_severity(const char* value, size_t size);
  std::string* mutable_severity();
  std::string* release_severity();
  void set_allocated_severity(std::string* severity);
  private:
  const std::string& _internal_severity() const;
  void _internal_set_severity(const std::string& value);
  std::string* _internal_mutable_severity();
  public:

  // uint64 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> payload_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> payloadxml_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notificationname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr severity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_StoredNotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoredNotification

// uint64 Id = 1;
inline void StoredNotification::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoredNotification::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoredNotification::id() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Id)
  return _internal_id();
}
inline void StoredNotification::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void StoredNotification::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Id)
}

// string Archive = 2;
inline void StoredNotification::clear_archive() {
  archive_.ClearToEmpty();
}
inline const std::string& StoredNotification::archive() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
  return _internal_archive();
}
inline void StoredNotification::set_archive(const std::string& value) {
  _internal_set_archive(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
}
inline std::string* StoredNotification::mutable_archive() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
  return _internal_mutable_archive();
}
inline const std::string& StoredNotification::_internal_archive() const {
  return archive_.Get();
}
inline void StoredNotification::_internal_set_archive(const std::string& value) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoredNotification::set_archive(std::string&& value) {
  
  archive_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
}
inline void StoredNotification::set_archive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
}
inline void StoredNotification::set_archive(const char* value,
    size_t size) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
}
inline std::string* StoredNotification::_internal_mutable_archive() {
  
  return archive_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoredNotification::release_archive() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
  return archive_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoredNotification::set_allocated_archive(std::string* archive) {
  if (archive != nullptr) {
    
  } else {
    
  }
  archive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Archive)
}

// string NotificationName = 3;
inline void StoredNotification::clear_notificationname() {
  notificationname_.ClearToEmpty();
}
inline const std::string& StoredNotification::notificationname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
  return _internal_notificationname();
}
inline void StoredNotification::set_notificationname(const std::string& value) {
  _internal_set_notificationname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
}
inline std::string* StoredNotification::mutable_notificationname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
  return _internal_mutable_notificationname();
}
inline const std::string& StoredNotification::_internal_notificationname() const {
  return notificationname_.Get();
}
inline void StoredNotification::_internal_set_notificationname(const std::string& value) {
  
  notificationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoredNotification::set_notificationname(std::string&& value) {
  
  notificationname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
}
inline void StoredNotification::set_notificationname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notificationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
}
inline void StoredNotification::set_notificationname(const char* value,
    size_t size) {
  
  notificationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
}
inline std::string* StoredNotification::_internal_mutable_notificationname() {
  
  return notificationname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoredNotification::release_notificationname() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
  return notificationname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoredNotification::set_allocated_notificationname(std::string* notificationname) {
  if (notificationname != nullptr) {
    
  } else {
    
  }
  notificationname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notificationname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.NotificationName)
}

// string SenderName = 4;
inline void StoredNotification::clear_sendername() {
  sendername_.ClearToEmpty();
}
inline const std::string& StoredNotification::sendername() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
  return _internal_sendername();
}
inline void StoredNotification::set_sendername(const std::string& value) {
  _internal_set_sendername(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
}
inline std::string* StoredNotification::mutable_sendername() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
  return _internal_mutable_sendername();
}
inline const std::string& StoredNotification::_internal_sendername() const {
  return sendername_.Get();
}
inline void StoredNotification::_internal_set_sendername(const std::string& value) {
  
  sendername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoredNotification::set_sendername(std::string&& value) {
  
  sendername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
}
inline void StoredNotification::set_sendername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
}
inline void StoredNotification::set_sendername(const char* value,
    size_t size) {
  
  sendername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
}
inline std::string* StoredNotification::_internal_mutable_sendername() {
  
  return sendername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoredNotification::release_sendername() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
  return sendername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoredNotification::set_allocated_sendername(std::string* sendername) {
  if (sendername != nullptr) {
    
  } else {
    
  }
  sendername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.SenderName)
}

// string TimeStamp = 5;
inline void StoredNotification::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& StoredNotification::timestamp() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
  return _internal_timestamp();
}
inline void StoredNotification::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
}
inline std::string* StoredNotification::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
  return _internal_mutable_timestamp();
}
inline const std::string& StoredNotification::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void StoredNotification::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoredNotification::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
}
inline void StoredNotification::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
}
inline void StoredNotification::set_timestamp(const char* value,
    size_t size) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
}
inline std::string* StoredNotification::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoredNotification::release_timestamp() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoredNotification::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.TimeStamp)
}

// string Severity = 6;
inline void StoredNotification::clear_severity() {
  severity_.ClearToEmpty();
}
inline const std::string& StoredNotification::severity() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
  return _internal_severity();
}
inline void StoredNotification::set_severity(const std::string& value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
}
inline std::string* StoredNotification::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
  return _internal_mutable_severity();
}
inline const std::string& StoredNotification::_internal_severity() const {
  return severity_.Get();
}
inline void StoredNotification::_internal_set_severity(const std::string& value) {
  
  severity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoredNotification::set_severity(std::string&& value) {
  
  severity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
}
inline void StoredNotification::set_severity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  severity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
}
inline void StoredNotification::set_severity(const char* value,
    size_t size) {
  
  severity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
}
inline std::string* StoredNotification::_internal_mutable_severity() {
  
  return severity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoredNotification::release_severity() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
  return severity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoredNotification::set_allocated_severity(std::string* severity) {
  if (severity != nullptr) {
    
  } else {
    
  }
  severity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), severity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Severity)
}

// repeated string Payload = 7;
inline int StoredNotification::_internal_payload_size() const {
  return payload_.size();
}
inline int StoredNotification::payload_size() const {
  return _internal_payload_size();
}
inline void StoredNotification::clear_payload() {
  payload_.Clear();
}
inline std::string* StoredNotification::add_payload() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
  return _internal_add_payload();
}
inline const std::string& StoredNotification::_internal_payload(int index) const {
  return payload_.Get(index);
}
inline const std::string& StoredNotification::payload(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
  return _internal_payload(index);
}
inline std::string* StoredNotification::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
  return payload_.Mutable(index);
}
inline void StoredNotification::set_payload(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
  payload_.Mutable(index)->assign(value);
}
inline void StoredNotification::set_payload(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
  payload_.Mutable(index)->assign(std::move(value));
}
inline void StoredNotification::set_payload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
}
inline void StoredNotification::set_payload(int index, const char* value, size_t size) {
  payload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
}
inline std::string* StoredNotification::_internal_add_payload() {
  return payload_.Add();
}
inline void StoredNotification::add_payload(const std::string& value) {
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
}
inline void StoredNotification::add_payload(std::string&& value) {
  payload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
}
inline void StoredNotification::add_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
}
inline void StoredNotification::add_payload(const char* value, size_t size) {
  payload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StoredNotification::payload() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
  return payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StoredNotification::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.Payload)
  return &payload_;
}

// repeated string PayloadXml = 8;
inline int StoredNotification::_internal_payloadxml_size() const {
  return payloadxml_.size();
}
inline int StoredNotification::payloadxml_size() const {
  return _internal_payloadxml_size();
}
inline void StoredNotification::clear_payloadxml() {
  payloadxml_.Clear();
}
inline std::string* StoredNotification::add_payloadxml() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
  return _internal_add_payloadxml();
}
inline const std::string& StoredNotification::_internal_payloadxml(int index) const {
  return payloadxml_.Get(index);
}
inline const std::string& StoredNotification::payloadxml(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
  return _internal_payloadxml(index);
}
inline std::string* StoredNotification::mutable_payloadxml(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
  return payloadxml_.Mutable(index);
}
inline void StoredNotification::set_payloadxml(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
  payloadxml_.Mutable(index)->assign(value);
}
inline void StoredNotification::set_payloadxml(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
  payloadxml_.Mutable(index)->assign(std::move(value));
}
inline void StoredNotification::set_payloadxml(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payloadxml_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
}
inline void StoredNotification::set_payloadxml(int index, const char* value, size_t size) {
  payloadxml_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
}
inline std::string* StoredNotification::_internal_add_payloadxml() {
  return payloadxml_.Add();
}
inline void StoredNotification::add_payloadxml(const std::string& value) {
  payloadxml_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
}
inline void StoredNotification::add_payloadxml(std::string&& value) {
  payloadxml_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
}
inline void StoredNotification::add_payloadxml(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payloadxml_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
}
inline void StoredNotification::add_payloadxml(const char* value, size_t size) {
  payloadxml_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StoredNotification::payloadxml() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
  return payloadxml_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StoredNotification::mutable_payloadxml() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.StoredNotification.PayloadXml)
  return &payloadxml_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_StoredNotification_2eproto
