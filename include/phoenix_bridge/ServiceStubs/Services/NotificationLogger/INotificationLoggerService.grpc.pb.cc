// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: INotificationLoggerService.proto

#include "INotificationLoggerService.pb.h"
#include "INotificationLoggerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {

static const char* INotificationLoggerService_method_names[] = {
  "/Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService/QueryStoredNotifications",
  "/Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService/QueryNotifications",
  "/Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService/DeleteNotifications",
  "/Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService/ListArchives",
  "/Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService/GetArchiveConfiguration",
  "/Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService/SetArchiveConfiguration",
  "/Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService/ResetArchiveConfigurationToFiles",
};

std::unique_ptr< INotificationLoggerService::Stub> INotificationLoggerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< INotificationLoggerService::Stub> stub(new INotificationLoggerService::Stub(channel));
  return stub;
}

INotificationLoggerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_QueryStoredNotifications_(INotificationLoggerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryNotifications_(INotificationLoggerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNotifications_(INotificationLoggerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListArchives_(INotificationLoggerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArchiveConfiguration_(INotificationLoggerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetArchiveConfiguration_(INotificationLoggerService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetArchiveConfigurationToFiles_(INotificationLoggerService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status INotificationLoggerService::Stub::QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryStoredNotifications_, context, request, response);
}

void INotificationLoggerService::Stub::experimental_async::QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryStoredNotifications_, context, request, response, std::move(f));
}

void INotificationLoggerService::Stub::experimental_async::QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryStoredNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* INotificationLoggerService::Stub::PrepareAsyncQueryStoredNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryStoredNotifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* INotificationLoggerService::Stub::AsyncQueryStoredNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryStoredNotificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationLoggerService::Stub::QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryNotifications_, context, request, response);
}

void INotificationLoggerService::Stub::experimental_async::QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryNotifications_, context, request, response, std::move(f));
}

void INotificationLoggerService::Stub::experimental_async::QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* INotificationLoggerService::Stub::PrepareAsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryNotifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* INotificationLoggerService::Stub::AsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryNotificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationLoggerService::Stub::DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNotifications_, context, request, response);
}

void INotificationLoggerService::Stub::experimental_async::DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNotifications_, context, request, response, std::move(f));
}

void INotificationLoggerService::Stub::experimental_async::DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* INotificationLoggerService::Stub::PrepareAsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNotifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* INotificationLoggerService::Stub::AsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNotificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationLoggerService::Stub::ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListArchives_, context, request, response);
}

void INotificationLoggerService::Stub::experimental_async::ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListArchives_, context, request, response, std::move(f));
}

void INotificationLoggerService::Stub::experimental_async::ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListArchives_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* INotificationLoggerService::Stub::PrepareAsyncListArchivesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListArchives_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* INotificationLoggerService::Stub::AsyncListArchivesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListArchivesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationLoggerService::Stub::GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArchiveConfiguration_, context, request, response);
}

void INotificationLoggerService::Stub::experimental_async::GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArchiveConfiguration_, context, request, response, std::move(f));
}

void INotificationLoggerService::Stub::experimental_async::GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArchiveConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* INotificationLoggerService::Stub::PrepareAsyncGetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArchiveConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* INotificationLoggerService::Stub::AsyncGetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArchiveConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationLoggerService::Stub::SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetArchiveConfiguration_, context, request, response);
}

void INotificationLoggerService::Stub::experimental_async::SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArchiveConfiguration_, context, request, response, std::move(f));
}

void INotificationLoggerService::Stub::experimental_async::SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArchiveConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* INotificationLoggerService::Stub::PrepareAsyncSetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetArchiveConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* INotificationLoggerService::Stub::AsyncSetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetArchiveConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationLoggerService::Stub::ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetArchiveConfigurationToFiles_, context, request, response);
}

void INotificationLoggerService::Stub::experimental_async::ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetArchiveConfigurationToFiles_, context, request, response, std::move(f));
}

void INotificationLoggerService::Stub::experimental_async::ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetArchiveConfigurationToFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* INotificationLoggerService::Stub::PrepareAsyncResetArchiveConfigurationToFilesRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetArchiveConfigurationToFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* INotificationLoggerService::Stub::AsyncResetArchiveConfigurationToFilesRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetArchiveConfigurationToFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

INotificationLoggerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationLoggerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationLoggerService::Service, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationLoggerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* req,
             ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* resp) {
               return service->QueryStoredNotifications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationLoggerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationLoggerService::Service, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationLoggerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* req,
             ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* resp) {
               return service->QueryNotifications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationLoggerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationLoggerService::Service, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationLoggerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* req,
             ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* resp) {
               return service->DeleteNotifications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationLoggerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationLoggerService::Service, ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationLoggerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* resp) {
               return service->ListArchives(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationLoggerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationLoggerService::Service, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationLoggerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* req,
             ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* resp) {
               return service->GetArchiveConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationLoggerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationLoggerService::Service, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationLoggerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* req,
             ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* resp) {
               return service->SetArchiveConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationLoggerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationLoggerService::Service, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationLoggerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* req,
             ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* resp) {
               return service->ResetArchiveConfigurationToFiles(ctx, req, resp);
             }, this)));
}

INotificationLoggerService::Service::~Service() {
}

::grpc::Status INotificationLoggerService::Service::QueryStoredNotifications(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationLoggerService::Service::QueryNotifications(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationLoggerService::Service::DeleteNotifications(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationLoggerService::Service::ListArchives(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationLoggerService::Service::GetArchiveConfiguration(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationLoggerService::Service::SetArchiveConfiguration(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationLoggerService::Service::ResetArchiveConfigurationToFiles(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arp
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Grpc

