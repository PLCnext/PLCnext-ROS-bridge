// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: INotificationLoggerService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_INotificationLoggerService_2eproto__INCLUDED
#define GRPC_INotificationLoggerService_2eproto__INCLUDED

#include "INotificationLoggerService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {

// *
// The NotificationLogger stores Notifications and provides an interface to retrieve them.
//
class INotificationLoggerService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Queries notifications matching the supplied filter from the mentioned archives and returns them as StoredNotification objects
    // / </summary>
    // / <param name="archives">List of archives to query. Empty list queries all.</param>
    // / <param name="filter">filter specifications</param>
    // / <param name="limit">maximum number of returned notifications</param>
    // / <param name="sortOrder">sorting to apply</param>
    // / <param name="language">translate notification payloads</param>
    // / <returns>collection of notifications</returns>
    virtual ::grpc::Status QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>> AsyncQueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>>(AsyncQueryStoredNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>> PrepareAsyncQueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>>(PrepareAsyncQueryStoredNotificationsRaw(context, request, cq));
    }
    // / <summary>
    // / Queries notifications matching the supplied filter from the mentioned archives and returns them as Notification objects
    // / </summary>
    // / <param name="archives">List of archives to query. Empty list queries all.</param>
    // / <param name="filter">filter specifications</param>
    // / <param name="limit">maximum number of returned notifications</param>
    // / <param name="sortOrder">sorting to apply</param>
    // / <param name="language">translate notification payloads</param>
    // / <returns>collection of notifications</returns>
    virtual ::grpc::Status QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>> AsyncQueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>>(AsyncQueryNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>> PrepareAsyncQueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>>(PrepareAsyncQueryNotificationsRaw(context, request, cq));
    }
    // / <summary>
    // / Remove notifications mathing the filter  from the given archives
    // / </summary>
    // / <param name="archives">List of archives to delete notifications from. Empty list deletes from all.</param>
    // / <param name="filter">filter specification, matching notifications are removed</param>
    // / <returns>number of deleted notifications</returns>
    virtual ::grpc::Status DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>> AsyncDeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>>(AsyncDeleteNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>> PrepareAsyncDeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>>(PrepareAsyncDeleteNotificationsRaw(context, request, cq));
    }
    // / <summary>
    // / Queries a list of archives
    // / </summary>
    // / <returns>list of known archives</returns>
    virtual ::grpc::Status ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>> AsyncListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>>(AsyncListArchivesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>> PrepareAsyncListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>>(PrepareAsyncListArchivesRaw(context, request, cq));
    }
    // / <summary>
    // / Query the configuration as XML for the given archive
    // / </summary>
    // / <param name="archive">name of the archive</param>
    // / <returns>XML of the configuration</returns>
    virtual ::grpc::Status GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>> AsyncGetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>>(AsyncGetArchiveConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>> PrepareAsyncGetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>>(PrepareAsyncGetArchiveConfigurationRaw(context, request, cq));
    }
    // / <summary>
    // / Set the configuration of the given archive
    // / </summary>
    // / <param name="archive">name of the archive</param>
    // / <param name="xmlConfiguration">XML containing the configuration</param>
    // / <returns>true on success</returns>
    virtual ::grpc::Status SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>> AsyncSetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>>(AsyncSetArchiveConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>> PrepareAsyncSetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>>(PrepareAsyncSetArchiveConfigurationRaw(context, request, cq));
    }
    // / <summary>
    // / Resets the configuration of the given archive to the configuration files. All changes made by RSC are reverted.
    // / </summary>
    // / <param name="archive">name of the archive</param>
    // / <returns>true on success</returns>
    virtual ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>> AsyncResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>>(AsyncResetArchiveConfigurationToFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>> PrepareAsyncResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>>(PrepareAsyncResetArchiveConfigurationToFilesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Queries notifications matching the supplied filter from the mentioned archives and returns them as StoredNotification objects
      // / </summary>
      // / <param name="archives">List of archives to query. Empty list queries all.</param>
      // / <param name="filter">filter specifications</param>
      // / <param name="limit">maximum number of returned notifications</param>
      // / <param name="sortOrder">sorting to apply</param>
      // / <param name="language">translate notification payloads</param>
      // / <returns>collection of notifications</returns>
      virtual void QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Queries notifications matching the supplied filter from the mentioned archives and returns them as Notification objects
      // / </summary>
      // / <param name="archives">List of archives to query. Empty list queries all.</param>
      // / <param name="filter">filter specifications</param>
      // / <param name="limit">maximum number of returned notifications</param>
      // / <param name="sortOrder">sorting to apply</param>
      // / <param name="language">translate notification payloads</param>
      // / <returns>collection of notifications</returns>
      virtual void QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Remove notifications mathing the filter  from the given archives
      // / </summary>
      // / <param name="archives">List of archives to delete notifications from. Empty list deletes from all.</param>
      // / <param name="filter">filter specification, matching notifications are removed</param>
      // / <returns>number of deleted notifications</returns>
      virtual void DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Queries a list of archives
      // / </summary>
      // / <returns>list of known archives</returns>
      virtual void ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Query the configuration as XML for the given archive
      // / </summary>
      // / <param name="archive">name of the archive</param>
      // / <returns>XML of the configuration</returns>
      virtual void GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Set the configuration of the given archive
      // / </summary>
      // / <param name="archive">name of the archive</param>
      // / <param name="xmlConfiguration">XML containing the configuration</param>
      // / <returns>true on success</returns>
      virtual void SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Resets the configuration of the given archive to the configuration files. All changes made by RSC are reverted.
      // / </summary>
      // / <param name="archive">name of the archive</param>
      // / <returns>true on success</returns>
      virtual void ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* AsyncQueryStoredNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* PrepareAsyncQueryStoredNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* AsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* PrepareAsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* AsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* PrepareAsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* AsyncListArchivesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* PrepareAsyncListArchivesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* AsyncGetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* PrepareAsyncGetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* AsyncSetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* PrepareAsyncSetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* AsyncResetArchiveConfigurationToFilesRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* PrepareAsyncResetArchiveConfigurationToFilesRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>> AsyncQueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>>(AsyncQueryStoredNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>> PrepareAsyncQueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>>(PrepareAsyncQueryStoredNotificationsRaw(context, request, cq));
    }
    ::grpc::Status QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>> AsyncQueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>>(AsyncQueryNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>> PrepareAsyncQueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>>(PrepareAsyncQueryNotificationsRaw(context, request, cq));
    }
    ::grpc::Status DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>> AsyncDeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>>(AsyncDeleteNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>> PrepareAsyncDeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>>(PrepareAsyncDeleteNotificationsRaw(context, request, cq));
    }
    ::grpc::Status ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>> AsyncListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>>(AsyncListArchivesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>> PrepareAsyncListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>>(PrepareAsyncListArchivesRaw(context, request, cq));
    }
    ::grpc::Status GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>> AsyncGetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>>(AsyncGetArchiveConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>> PrepareAsyncGetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>>(PrepareAsyncGetArchiveConfigurationRaw(context, request, cq));
    }
    ::grpc::Status SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>> AsyncSetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>>(AsyncSetArchiveConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>> PrepareAsyncSetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>>(PrepareAsyncSetArchiveConfigurationRaw(context, request, cq));
    }
    ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>> AsyncResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>>(AsyncResetArchiveConfigurationToFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>> PrepareAsyncResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>>(PrepareAsyncResetArchiveConfigurationToFilesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryStoredNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteNotifications(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListArchives(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetArchiveConfiguration(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResetArchiveConfigurationToFiles(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* AsyncQueryStoredNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* PrepareAsyncQueryStoredNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* AsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* PrepareAsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* AsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* PrepareAsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* AsyncListArchivesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* PrepareAsyncListArchivesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* AsyncGetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* PrepareAsyncGetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* AsyncSetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* PrepareAsyncSetArchiveConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* AsyncResetArchiveConfigurationToFilesRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* PrepareAsyncResetArchiveConfigurationToFilesRaw(::grpc::ClientContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QueryStoredNotifications_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryNotifications_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNotifications_;
    const ::grpc::internal::RpcMethod rpcmethod_ListArchives_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArchiveConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_SetArchiveConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetArchiveConfigurationToFiles_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Queries notifications matching the supplied filter from the mentioned archives and returns them as StoredNotification objects
    // / </summary>
    // / <param name="archives">List of archives to query. Empty list queries all.</param>
    // / <param name="filter">filter specifications</param>
    // / <param name="limit">maximum number of returned notifications</param>
    // / <param name="sortOrder">sorting to apply</param>
    // / <param name="language">translate notification payloads</param>
    // / <returns>collection of notifications</returns>
    virtual ::grpc::Status QueryStoredNotifications(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response);
    // / <summary>
    // / Queries notifications matching the supplied filter from the mentioned archives and returns them as Notification objects
    // / </summary>
    // / <param name="archives">List of archives to query. Empty list queries all.</param>
    // / <param name="filter">filter specifications</param>
    // / <param name="limit">maximum number of returned notifications</param>
    // / <param name="sortOrder">sorting to apply</param>
    // / <param name="language">translate notification payloads</param>
    // / <returns>collection of notifications</returns>
    virtual ::grpc::Status QueryNotifications(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response);
    // / <summary>
    // / Remove notifications mathing the filter  from the given archives
    // / </summary>
    // / <param name="archives">List of archives to delete notifications from. Empty list deletes from all.</param>
    // / <param name="filter">filter specification, matching notifications are removed</param>
    // / <returns>number of deleted notifications</returns>
    virtual ::grpc::Status DeleteNotifications(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response);
    // / <summary>
    // / Queries a list of archives
    // / </summary>
    // / <returns>list of known archives</returns>
    virtual ::grpc::Status ListArchives(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response);
    // / <summary>
    // / Query the configuration as XML for the given archive
    // / </summary>
    // / <param name="archive">name of the archive</param>
    // / <returns>XML of the configuration</returns>
    virtual ::grpc::Status GetArchiveConfiguration(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response);
    // / <summary>
    // / Set the configuration of the given archive
    // / </summary>
    // / <param name="archive">name of the archive</param>
    // / <param name="xmlConfiguration">XML containing the configuration</param>
    // / <returns>true on success</returns>
    virtual ::grpc::Status SetArchiveConfiguration(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response);
    // / <summary>
    // / Resets the configuration of the given archive to the configuration files. All changes made by RSC are reverted.
    // / </summary>
    // / <param name="archive">name of the archive</param>
    // / <returns>true on success</returns>
    virtual ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ServerContext* context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryStoredNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryStoredNotifications() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QueryStoredNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStoredNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryStoredNotifications(::grpc::ServerContext* context, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryNotifications(::grpc::ServerContext* context, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNotifications() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNotifications(::grpc::ServerContext* context, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListArchives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListArchives() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListArchives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArchives(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArchives(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArchiveConfiguration() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArchiveConfiguration(::grpc::ServerContext* context, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetArchiveConfiguration() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetArchiveConfiguration(::grpc::ServerContext* context, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetArchiveConfigurationToFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetArchiveConfigurationToFiles() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ResetArchiveConfigurationToFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetArchiveConfigurationToFiles(::grpc::ServerContext* context, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QueryStoredNotifications<WithAsyncMethod_QueryNotifications<WithAsyncMethod_DeleteNotifications<WithAsyncMethod_ListArchives<WithAsyncMethod_GetArchiveConfiguration<WithAsyncMethod_SetArchiveConfiguration<WithAsyncMethod_ResetArchiveConfigurationToFiles<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryStoredNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryStoredNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* response) { return this->QueryStoredNotifications(context, request, response); }));}
    void SetMessageAllocatorFor_QueryStoredNotifications(
        ::grpc::experimental::MessageAllocator< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryStoredNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStoredNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryStoredNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryStoredNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* response) { return this->QueryNotifications(context, request, response); }));}
    void SetMessageAllocatorFor_QueryNotifications(
        ::grpc::experimental::MessageAllocator< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* response) { return this->DeleteNotifications(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNotifications(
        ::grpc::experimental::MessageAllocator< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListArchives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListArchives() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* response) { return this->ListArchives(context, request, response); }));}
    void SetMessageAllocatorFor_ListArchives(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListArchives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArchives(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListArchives(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListArchives(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetArchiveConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* response) { return this->GetArchiveConfiguration(context, request, response); }));}
    void SetMessageAllocatorFor_GetArchiveConfiguration(
        ::grpc::experimental::MessageAllocator< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArchiveConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArchiveConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetArchiveConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* response) { return this->SetArchiveConfiguration(context, request, response); }));}
    void SetMessageAllocatorFor_SetArchiveConfiguration(
        ::grpc::experimental::MessageAllocator< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetArchiveConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetArchiveConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetArchiveConfigurationToFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResetArchiveConfigurationToFiles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* request, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* response) { return this->ResetArchiveConfigurationToFiles(context, request, response); }));}
    void SetMessageAllocatorFor_ResetArchiveConfigurationToFiles(
        ::grpc::experimental::MessageAllocator< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetArchiveConfigurationToFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetArchiveConfigurationToFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetArchiveConfigurationToFiles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_QueryStoredNotifications<ExperimentalWithCallbackMethod_QueryNotifications<ExperimentalWithCallbackMethod_DeleteNotifications<ExperimentalWithCallbackMethod_ListArchives<ExperimentalWithCallbackMethod_GetArchiveConfiguration<ExperimentalWithCallbackMethod_SetArchiveConfiguration<ExperimentalWithCallbackMethod_ResetArchiveConfigurationToFiles<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_QueryStoredNotifications<ExperimentalWithCallbackMethod_QueryNotifications<ExperimentalWithCallbackMethod_DeleteNotifications<ExperimentalWithCallbackMethod_ListArchives<ExperimentalWithCallbackMethod_GetArchiveConfiguration<ExperimentalWithCallbackMethod_SetArchiveConfiguration<ExperimentalWithCallbackMethod_ResetArchiveConfigurationToFiles<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_QueryStoredNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryStoredNotifications() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QueryStoredNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStoredNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNotifications() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListArchives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListArchives() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListArchives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArchives(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArchiveConfiguration() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetArchiveConfiguration() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetArchiveConfigurationToFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetArchiveConfigurationToFiles() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ResetArchiveConfigurationToFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryStoredNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryStoredNotifications() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QueryStoredNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStoredNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryStoredNotifications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryNotifications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNotifications() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNotifications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListArchives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListArchives() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListArchives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArchives(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArchives(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArchiveConfiguration() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArchiveConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetArchiveConfiguration() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetArchiveConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetArchiveConfigurationToFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetArchiveConfigurationToFiles() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ResetArchiveConfigurationToFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetArchiveConfigurationToFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryStoredNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryStoredNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryStoredNotifications(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryStoredNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStoredNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryStoredNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryStoredNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryNotifications(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNotifications(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListArchives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListArchives() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListArchives(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListArchives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArchives(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListArchives(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListArchives(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetArchiveConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArchiveConfiguration(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArchiveConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArchiveConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetArchiveConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetArchiveConfiguration(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetArchiveConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetArchiveConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetArchiveConfigurationToFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetArchiveConfigurationToFiles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetArchiveConfigurationToFiles(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetArchiveConfigurationToFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetArchiveConfigurationToFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetArchiveConfigurationToFiles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryStoredNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryStoredNotifications() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* streamer) {
                       return this->StreamedQueryStoredNotifications(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryStoredNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryStoredNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryStoredNotifications(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest,::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* streamer) {
                       return this->StreamedQueryNotifications(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryNotifications(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest,::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNotifications() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* streamer) {
                       return this->StreamedDeleteNotifications(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNotifications(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNotifications(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest,::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListArchives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListArchives() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* streamer) {
                       return this->StreamedListArchives(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListArchives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListArchives(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListArchives(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArchiveConfiguration() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* streamer) {
                       return this->StreamedGetArchiveConfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArchiveConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest,::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetArchiveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetArchiveConfiguration() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* streamer) {
                       return this->StreamedSetArchiveConfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetArchiveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetArchiveConfiguration(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetArchiveConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest,::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetArchiveConfigurationToFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetArchiveConfigurationToFiles() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* streamer) {
                       return this->StreamedResetArchiveConfigurationToFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetArchiveConfigurationToFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetArchiveConfigurationToFiles(::grpc::ServerContext* /*context*/, const ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* /*request*/, ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetArchiveConfigurationToFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest,::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QueryStoredNotifications<WithStreamedUnaryMethod_QueryNotifications<WithStreamedUnaryMethod_DeleteNotifications<WithStreamedUnaryMethod_ListArchives<WithStreamedUnaryMethod_GetArchiveConfiguration<WithStreamedUnaryMethod_SetArchiveConfiguration<WithStreamedUnaryMethod_ResetArchiveConfigurationToFiles<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QueryStoredNotifications<WithStreamedUnaryMethod_QueryNotifications<WithStreamedUnaryMethod_DeleteNotifications<WithStreamedUnaryMethod_ListArchives<WithStreamedUnaryMethod_GetArchiveConfiguration<WithStreamedUnaryMethod_SetArchiveConfiguration<WithStreamedUnaryMethod_ResetArchiveConfigurationToFiles<Service > > > > > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Arp


#endif  // GRPC_INotificationLoggerService_2eproto__INCLUDED
