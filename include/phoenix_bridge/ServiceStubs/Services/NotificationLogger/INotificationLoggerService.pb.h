// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: INotificationLoggerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_INotificationLoggerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_INotificationLoggerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Notification.pb.h"
#include "NotificationFilter.pb.h"
#include "SortOrder.pb.h"
#include "StoredNotification.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_INotificationLoggerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_INotificationLoggerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_INotificationLoggerService_2eproto;
namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {
class INotificationLoggerServiceDeleteNotificationsRequest;
class INotificationLoggerServiceDeleteNotificationsRequestDefaultTypeInternal;
extern INotificationLoggerServiceDeleteNotificationsRequestDefaultTypeInternal _INotificationLoggerServiceDeleteNotificationsRequest_default_instance_;
class INotificationLoggerServiceDeleteNotificationsResponse;
class INotificationLoggerServiceDeleteNotificationsResponseDefaultTypeInternal;
extern INotificationLoggerServiceDeleteNotificationsResponseDefaultTypeInternal _INotificationLoggerServiceDeleteNotificationsResponse_default_instance_;
class INotificationLoggerServiceGetArchiveConfigurationRequest;
class INotificationLoggerServiceGetArchiveConfigurationRequestDefaultTypeInternal;
extern INotificationLoggerServiceGetArchiveConfigurationRequestDefaultTypeInternal _INotificationLoggerServiceGetArchiveConfigurationRequest_default_instance_;
class INotificationLoggerServiceGetArchiveConfigurationResponse;
class INotificationLoggerServiceGetArchiveConfigurationResponseDefaultTypeInternal;
extern INotificationLoggerServiceGetArchiveConfigurationResponseDefaultTypeInternal _INotificationLoggerServiceGetArchiveConfigurationResponse_default_instance_;
class INotificationLoggerServiceListArchivesResponse;
class INotificationLoggerServiceListArchivesResponseDefaultTypeInternal;
extern INotificationLoggerServiceListArchivesResponseDefaultTypeInternal _INotificationLoggerServiceListArchivesResponse_default_instance_;
class INotificationLoggerServiceQueryNotificationsRequest;
class INotificationLoggerServiceQueryNotificationsRequestDefaultTypeInternal;
extern INotificationLoggerServiceQueryNotificationsRequestDefaultTypeInternal _INotificationLoggerServiceQueryNotificationsRequest_default_instance_;
class INotificationLoggerServiceQueryNotificationsResponse;
class INotificationLoggerServiceQueryNotificationsResponseDefaultTypeInternal;
extern INotificationLoggerServiceQueryNotificationsResponseDefaultTypeInternal _INotificationLoggerServiceQueryNotificationsResponse_default_instance_;
class INotificationLoggerServiceQueryStoredNotificationsRequest;
class INotificationLoggerServiceQueryStoredNotificationsRequestDefaultTypeInternal;
extern INotificationLoggerServiceQueryStoredNotificationsRequestDefaultTypeInternal _INotificationLoggerServiceQueryStoredNotificationsRequest_default_instance_;
class INotificationLoggerServiceQueryStoredNotificationsResponse;
class INotificationLoggerServiceQueryStoredNotificationsResponseDefaultTypeInternal;
extern INotificationLoggerServiceQueryStoredNotificationsResponseDefaultTypeInternal _INotificationLoggerServiceQueryStoredNotificationsResponse_default_instance_;
class INotificationLoggerServiceResetArchiveConfigurationToFilesRequest;
class INotificationLoggerServiceResetArchiveConfigurationToFilesRequestDefaultTypeInternal;
extern INotificationLoggerServiceResetArchiveConfigurationToFilesRequestDefaultTypeInternal _INotificationLoggerServiceResetArchiveConfigurationToFilesRequest_default_instance_;
class INotificationLoggerServiceResetArchiveConfigurationToFilesResponse;
class INotificationLoggerServiceResetArchiveConfigurationToFilesResponseDefaultTypeInternal;
extern INotificationLoggerServiceResetArchiveConfigurationToFilesResponseDefaultTypeInternal _INotificationLoggerServiceResetArchiveConfigurationToFilesResponse_default_instance_;
class INotificationLoggerServiceSetArchiveConfigurationRequest;
class INotificationLoggerServiceSetArchiveConfigurationRequestDefaultTypeInternal;
extern INotificationLoggerServiceSetArchiveConfigurationRequestDefaultTypeInternal _INotificationLoggerServiceSetArchiveConfigurationRequest_default_instance_;
class INotificationLoggerServiceSetArchiveConfigurationResponse;
class INotificationLoggerServiceSetArchiveConfigurationResponseDefaultTypeInternal;
extern INotificationLoggerServiceSetArchiveConfigurationResponseDefaultTypeInternal _INotificationLoggerServiceSetArchiveConfigurationResponse_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsRequest>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceDeleteNotificationsResponse>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationRequest>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceGetArchiveConfigurationResponse>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceListArchivesResponse>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsRequest>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryNotificationsResponse>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsRequest>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceQueryStoredNotificationsResponse>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesRequest>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationRequest>(Arena*);
template<> ::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::INotificationLoggerServiceSetArchiveConfigurationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {

// ===================================================================

class INotificationLoggerServiceQueryStoredNotificationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest) */ {
 public:
  inline INotificationLoggerServiceQueryStoredNotificationsRequest() : INotificationLoggerServiceQueryStoredNotificationsRequest(nullptr) {}
  virtual ~INotificationLoggerServiceQueryStoredNotificationsRequest();

  INotificationLoggerServiceQueryStoredNotificationsRequest(const INotificationLoggerServiceQueryStoredNotificationsRequest& from);
  INotificationLoggerServiceQueryStoredNotificationsRequest(INotificationLoggerServiceQueryStoredNotificationsRequest&& from) noexcept
    : INotificationLoggerServiceQueryStoredNotificationsRequest() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceQueryStoredNotificationsRequest& operator=(const INotificationLoggerServiceQueryStoredNotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceQueryStoredNotificationsRequest& operator=(INotificationLoggerServiceQueryStoredNotificationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceQueryStoredNotificationsRequest& default_instance();

  static inline const INotificationLoggerServiceQueryStoredNotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceQueryStoredNotificationsRequest*>(
               &_INotificationLoggerServiceQueryStoredNotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(INotificationLoggerServiceQueryStoredNotificationsRequest& a, INotificationLoggerServiceQueryStoredNotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceQueryStoredNotificationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceQueryStoredNotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceQueryStoredNotificationsRequest* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryStoredNotificationsRequest>(nullptr);
  }

  INotificationLoggerServiceQueryStoredNotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryStoredNotificationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceQueryStoredNotificationsRequest& from);
  void MergeFrom(const INotificationLoggerServiceQueryStoredNotificationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceQueryStoredNotificationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest";
  }
  protected:
  explicit INotificationLoggerServiceQueryStoredNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchivesFieldNumber = 1,
    kLanguageFieldNumber = 5,
    kFilterFieldNumber = 2,
    kLimitFieldNumber = 3,
    kSortOrderFieldNumber = 4,
  };
  // repeated string archives = 1;
  int archives_size() const;
  private:
  int _internal_archives_size() const;
  public:
  void clear_archives();
  const std::string& archives(int index) const;
  std::string* mutable_archives(int index);
  void set_archives(int index, const std::string& value);
  void set_archives(int index, std::string&& value);
  void set_archives(int index, const char* value);
  void set_archives(int index, const char* value, size_t size);
  std::string* add_archives();
  void add_archives(const std::string& value);
  void add_archives(std::string&& value);
  void add_archives(const char* value);
  void add_archives(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& archives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_archives();
  private:
  const std::string& _internal_archives(int index) const;
  std::string* _internal_add_archives();
  public:

  // string language = 5;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // .Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& filter() const;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* release_filter();
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* mutable_filter();
  void set_allocated_filter(::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter);
  private:
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& _internal_filter() const;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter);
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* unsafe_arena_release_filter();

  // int32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Arp.Services.NotificationLogger.Services.Grpc.SortOrder sortOrder = 4;
  void clear_sortorder();
  ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder sortorder() const;
  void set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value);
  private:
  ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder _internal_sortorder() const;
  void _internal_set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> archives_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  int sortorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceQueryNotificationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest) */ {
 public:
  inline INotificationLoggerServiceQueryNotificationsRequest() : INotificationLoggerServiceQueryNotificationsRequest(nullptr) {}
  virtual ~INotificationLoggerServiceQueryNotificationsRequest();

  INotificationLoggerServiceQueryNotificationsRequest(const INotificationLoggerServiceQueryNotificationsRequest& from);
  INotificationLoggerServiceQueryNotificationsRequest(INotificationLoggerServiceQueryNotificationsRequest&& from) noexcept
    : INotificationLoggerServiceQueryNotificationsRequest() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceQueryNotificationsRequest& operator=(const INotificationLoggerServiceQueryNotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceQueryNotificationsRequest& operator=(INotificationLoggerServiceQueryNotificationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceQueryNotificationsRequest& default_instance();

  static inline const INotificationLoggerServiceQueryNotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceQueryNotificationsRequest*>(
               &_INotificationLoggerServiceQueryNotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(INotificationLoggerServiceQueryNotificationsRequest& a, INotificationLoggerServiceQueryNotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceQueryNotificationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceQueryNotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceQueryNotificationsRequest* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryNotificationsRequest>(nullptr);
  }

  INotificationLoggerServiceQueryNotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryNotificationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceQueryNotificationsRequest& from);
  void MergeFrom(const INotificationLoggerServiceQueryNotificationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceQueryNotificationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest";
  }
  protected:
  explicit INotificationLoggerServiceQueryNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchivesFieldNumber = 1,
    kLanguageFieldNumber = 5,
    kFilterFieldNumber = 2,
    kLimitFieldNumber = 3,
    kSortOrderFieldNumber = 4,
  };
  // repeated string archives = 1;
  int archives_size() const;
  private:
  int _internal_archives_size() const;
  public:
  void clear_archives();
  const std::string& archives(int index) const;
  std::string* mutable_archives(int index);
  void set_archives(int index, const std::string& value);
  void set_archives(int index, std::string&& value);
  void set_archives(int index, const char* value);
  void set_archives(int index, const char* value, size_t size);
  std::string* add_archives();
  void add_archives(const std::string& value);
  void add_archives(std::string&& value);
  void add_archives(const char* value);
  void add_archives(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& archives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_archives();
  private:
  const std::string& _internal_archives(int index) const;
  std::string* _internal_add_archives();
  public:

  // string language = 5;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // .Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& filter() const;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* release_filter();
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* mutable_filter();
  void set_allocated_filter(::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter);
  private:
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& _internal_filter() const;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter);
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* unsafe_arena_release_filter();

  // int32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Arp.Services.NotificationLogger.Services.Grpc.SortOrder sortOrder = 4;
  void clear_sortorder();
  ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder sortorder() const;
  void set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value);
  private:
  ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder _internal_sortorder() const;
  void _internal_set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> archives_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  int sortorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceDeleteNotificationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest) */ {
 public:
  inline INotificationLoggerServiceDeleteNotificationsRequest() : INotificationLoggerServiceDeleteNotificationsRequest(nullptr) {}
  virtual ~INotificationLoggerServiceDeleteNotificationsRequest();

  INotificationLoggerServiceDeleteNotificationsRequest(const INotificationLoggerServiceDeleteNotificationsRequest& from);
  INotificationLoggerServiceDeleteNotificationsRequest(INotificationLoggerServiceDeleteNotificationsRequest&& from) noexcept
    : INotificationLoggerServiceDeleteNotificationsRequest() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceDeleteNotificationsRequest& operator=(const INotificationLoggerServiceDeleteNotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceDeleteNotificationsRequest& operator=(INotificationLoggerServiceDeleteNotificationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceDeleteNotificationsRequest& default_instance();

  static inline const INotificationLoggerServiceDeleteNotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceDeleteNotificationsRequest*>(
               &_INotificationLoggerServiceDeleteNotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(INotificationLoggerServiceDeleteNotificationsRequest& a, INotificationLoggerServiceDeleteNotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceDeleteNotificationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceDeleteNotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceDeleteNotificationsRequest* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceDeleteNotificationsRequest>(nullptr);
  }

  INotificationLoggerServiceDeleteNotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceDeleteNotificationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceDeleteNotificationsRequest& from);
  void MergeFrom(const INotificationLoggerServiceDeleteNotificationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceDeleteNotificationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest";
  }
  protected:
  explicit INotificationLoggerServiceDeleteNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchivesFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  // repeated string archives = 1;
  int archives_size() const;
  private:
  int _internal_archives_size() const;
  public:
  void clear_archives();
  const std::string& archives(int index) const;
  std::string* mutable_archives(int index);
  void set_archives(int index, const std::string& value);
  void set_archives(int index, std::string&& value);
  void set_archives(int index, const char* value);
  void set_archives(int index, const char* value, size_t size);
  std::string* add_archives();
  void add_archives(const std::string& value);
  void add_archives(std::string&& value);
  void add_archives(const char* value);
  void add_archives(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& archives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_archives();
  private:
  const std::string& _internal_archives(int index) const;
  std::string* _internal_add_archives();
  public:

  // .Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& filter() const;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* release_filter();
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* mutable_filter();
  void set_allocated_filter(::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter);
  private:
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& _internal_filter() const;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter);
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> archives_;
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceGetArchiveConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest) */ {
 public:
  inline INotificationLoggerServiceGetArchiveConfigurationRequest() : INotificationLoggerServiceGetArchiveConfigurationRequest(nullptr) {}
  virtual ~INotificationLoggerServiceGetArchiveConfigurationRequest();

  INotificationLoggerServiceGetArchiveConfigurationRequest(const INotificationLoggerServiceGetArchiveConfigurationRequest& from);
  INotificationLoggerServiceGetArchiveConfigurationRequest(INotificationLoggerServiceGetArchiveConfigurationRequest&& from) noexcept
    : INotificationLoggerServiceGetArchiveConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceGetArchiveConfigurationRequest& operator=(const INotificationLoggerServiceGetArchiveConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceGetArchiveConfigurationRequest& operator=(INotificationLoggerServiceGetArchiveConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceGetArchiveConfigurationRequest& default_instance();

  static inline const INotificationLoggerServiceGetArchiveConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceGetArchiveConfigurationRequest*>(
               &_INotificationLoggerServiceGetArchiveConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(INotificationLoggerServiceGetArchiveConfigurationRequest& a, INotificationLoggerServiceGetArchiveConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceGetArchiveConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceGetArchiveConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceGetArchiveConfigurationRequest* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceGetArchiveConfigurationRequest>(nullptr);
  }

  INotificationLoggerServiceGetArchiveConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceGetArchiveConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceGetArchiveConfigurationRequest& from);
  void MergeFrom(const INotificationLoggerServiceGetArchiveConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceGetArchiveConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest";
  }
  protected:
  explicit INotificationLoggerServiceGetArchiveConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchiveFieldNumber = 1,
  };
  // string archive = 1;
  void clear_archive();
  const std::string& archive() const;
  void set_archive(const std::string& value);
  void set_archive(std::string&& value);
  void set_archive(const char* value);
  void set_archive(const char* value, size_t size);
  std::string* mutable_archive();
  std::string* release_archive();
  void set_allocated_archive(std::string* archive);
  private:
  const std::string& _internal_archive() const;
  void _internal_set_archive(const std::string& value);
  std::string* _internal_mutable_archive();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceSetArchiveConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest) */ {
 public:
  inline INotificationLoggerServiceSetArchiveConfigurationRequest() : INotificationLoggerServiceSetArchiveConfigurationRequest(nullptr) {}
  virtual ~INotificationLoggerServiceSetArchiveConfigurationRequest();

  INotificationLoggerServiceSetArchiveConfigurationRequest(const INotificationLoggerServiceSetArchiveConfigurationRequest& from);
  INotificationLoggerServiceSetArchiveConfigurationRequest(INotificationLoggerServiceSetArchiveConfigurationRequest&& from) noexcept
    : INotificationLoggerServiceSetArchiveConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceSetArchiveConfigurationRequest& operator=(const INotificationLoggerServiceSetArchiveConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceSetArchiveConfigurationRequest& operator=(INotificationLoggerServiceSetArchiveConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceSetArchiveConfigurationRequest& default_instance();

  static inline const INotificationLoggerServiceSetArchiveConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceSetArchiveConfigurationRequest*>(
               &_INotificationLoggerServiceSetArchiveConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(INotificationLoggerServiceSetArchiveConfigurationRequest& a, INotificationLoggerServiceSetArchiveConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceSetArchiveConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceSetArchiveConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceSetArchiveConfigurationRequest* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceSetArchiveConfigurationRequest>(nullptr);
  }

  INotificationLoggerServiceSetArchiveConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceSetArchiveConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceSetArchiveConfigurationRequest& from);
  void MergeFrom(const INotificationLoggerServiceSetArchiveConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceSetArchiveConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest";
  }
  protected:
  explicit INotificationLoggerServiceSetArchiveConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXmlConfigurationFieldNumber = 2,
    kArchiveFieldNumber = 1,
  };
  // repeated string xmlConfiguration = 2;
  int xmlconfiguration_size() const;
  private:
  int _internal_xmlconfiguration_size() const;
  public:
  void clear_xmlconfiguration();
  const std::string& xmlconfiguration(int index) const;
  std::string* mutable_xmlconfiguration(int index);
  void set_xmlconfiguration(int index, const std::string& value);
  void set_xmlconfiguration(int index, std::string&& value);
  void set_xmlconfiguration(int index, const char* value);
  void set_xmlconfiguration(int index, const char* value, size_t size);
  std::string* add_xmlconfiguration();
  void add_xmlconfiguration(const std::string& value);
  void add_xmlconfiguration(std::string&& value);
  void add_xmlconfiguration(const char* value);
  void add_xmlconfiguration(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& xmlconfiguration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_xmlconfiguration();
  private:
  const std::string& _internal_xmlconfiguration(int index) const;
  std::string* _internal_add_xmlconfiguration();
  public:

  // string archive = 1;
  void clear_archive();
  const std::string& archive() const;
  void set_archive(const std::string& value);
  void set_archive(std::string&& value);
  void set_archive(const char* value);
  void set_archive(const char* value, size_t size);
  std::string* mutable_archive();
  std::string* release_archive();
  void set_allocated_archive(std::string* archive);
  private:
  const std::string& _internal_archive() const;
  void _internal_set_archive(const std::string& value);
  std::string* _internal_mutable_archive();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> xmlconfiguration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceResetArchiveConfigurationToFilesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest) */ {
 public:
  inline INotificationLoggerServiceResetArchiveConfigurationToFilesRequest() : INotificationLoggerServiceResetArchiveConfigurationToFilesRequest(nullptr) {}
  virtual ~INotificationLoggerServiceResetArchiveConfigurationToFilesRequest();

  INotificationLoggerServiceResetArchiveConfigurationToFilesRequest(const INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& from);
  INotificationLoggerServiceResetArchiveConfigurationToFilesRequest(INotificationLoggerServiceResetArchiveConfigurationToFilesRequest&& from) noexcept
    : INotificationLoggerServiceResetArchiveConfigurationToFilesRequest() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& operator=(const INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& operator=(INotificationLoggerServiceResetArchiveConfigurationToFilesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& default_instance();

  static inline const INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceResetArchiveConfigurationToFilesRequest*>(
               &_INotificationLoggerServiceResetArchiveConfigurationToFilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& a, INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceResetArchiveConfigurationToFilesRequest>(nullptr);
  }

  INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceResetArchiveConfigurationToFilesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& from);
  void MergeFrom(const INotificationLoggerServiceResetArchiveConfigurationToFilesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceResetArchiveConfigurationToFilesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest";
  }
  protected:
  explicit INotificationLoggerServiceResetArchiveConfigurationToFilesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchiveFieldNumber = 1,
  };
  // string archive = 1;
  void clear_archive();
  const std::string& archive() const;
  void set_archive(const std::string& value);
  void set_archive(std::string&& value);
  void set_archive(const char* value);
  void set_archive(const char* value, size_t size);
  std::string* mutable_archive();
  std::string* release_archive();
  void set_allocated_archive(std::string* archive);
  private:
  const std::string& _internal_archive() const;
  void _internal_set_archive(const std::string& value);
  std::string* _internal_mutable_archive();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceQueryStoredNotificationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse) */ {
 public:
  inline INotificationLoggerServiceQueryStoredNotificationsResponse() : INotificationLoggerServiceQueryStoredNotificationsResponse(nullptr) {}
  virtual ~INotificationLoggerServiceQueryStoredNotificationsResponse();

  INotificationLoggerServiceQueryStoredNotificationsResponse(const INotificationLoggerServiceQueryStoredNotificationsResponse& from);
  INotificationLoggerServiceQueryStoredNotificationsResponse(INotificationLoggerServiceQueryStoredNotificationsResponse&& from) noexcept
    : INotificationLoggerServiceQueryStoredNotificationsResponse() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceQueryStoredNotificationsResponse& operator=(const INotificationLoggerServiceQueryStoredNotificationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceQueryStoredNotificationsResponse& operator=(INotificationLoggerServiceQueryStoredNotificationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceQueryStoredNotificationsResponse& default_instance();

  static inline const INotificationLoggerServiceQueryStoredNotificationsResponse* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceQueryStoredNotificationsResponse*>(
               &_INotificationLoggerServiceQueryStoredNotificationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(INotificationLoggerServiceQueryStoredNotificationsResponse& a, INotificationLoggerServiceQueryStoredNotificationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceQueryStoredNotificationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceQueryStoredNotificationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceQueryStoredNotificationsResponse* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryStoredNotificationsResponse>(nullptr);
  }

  INotificationLoggerServiceQueryStoredNotificationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryStoredNotificationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceQueryStoredNotificationsResponse& from);
  void MergeFrom(const INotificationLoggerServiceQueryStoredNotificationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceQueryStoredNotificationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse";
  }
  protected:
  explicit INotificationLoggerServiceQueryStoredNotificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Services.NotificationLogger.Services.Grpc.StoredNotification _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification* mutable__returnvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification >*
      mutable__returnvalue();
  private:
  const ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification& _internal__returnvalue(int index) const;
  ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification* _internal_add__returnvalue();
  public:
  const ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification& _returnvalue(int index) const;
  ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification* add__returnvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification >&
      _returnvalue() const;

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification > _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceQueryNotificationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse) */ {
 public:
  inline INotificationLoggerServiceQueryNotificationsResponse() : INotificationLoggerServiceQueryNotificationsResponse(nullptr) {}
  virtual ~INotificationLoggerServiceQueryNotificationsResponse();

  INotificationLoggerServiceQueryNotificationsResponse(const INotificationLoggerServiceQueryNotificationsResponse& from);
  INotificationLoggerServiceQueryNotificationsResponse(INotificationLoggerServiceQueryNotificationsResponse&& from) noexcept
    : INotificationLoggerServiceQueryNotificationsResponse() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceQueryNotificationsResponse& operator=(const INotificationLoggerServiceQueryNotificationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceQueryNotificationsResponse& operator=(INotificationLoggerServiceQueryNotificationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceQueryNotificationsResponse& default_instance();

  static inline const INotificationLoggerServiceQueryNotificationsResponse* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceQueryNotificationsResponse*>(
               &_INotificationLoggerServiceQueryNotificationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(INotificationLoggerServiceQueryNotificationsResponse& a, INotificationLoggerServiceQueryNotificationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceQueryNotificationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceQueryNotificationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceQueryNotificationsResponse* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryNotificationsResponse>(nullptr);
  }

  INotificationLoggerServiceQueryNotificationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceQueryNotificationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceQueryNotificationsResponse& from);
  void MergeFrom(const INotificationLoggerServiceQueryNotificationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceQueryNotificationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse";
  }
  protected:
  explicit INotificationLoggerServiceQueryNotificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.System.Nm.Services.Grpc.Notification _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  ::Arp::System::Nm::Services::Grpc::Notification* mutable__returnvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::System::Nm::Services::Grpc::Notification >*
      mutable__returnvalue();
  private:
  const ::Arp::System::Nm::Services::Grpc::Notification& _internal__returnvalue(int index) const;
  ::Arp::System::Nm::Services::Grpc::Notification* _internal_add__returnvalue();
  public:
  const ::Arp::System::Nm::Services::Grpc::Notification& _returnvalue(int index) const;
  ::Arp::System::Nm::Services::Grpc::Notification* add__returnvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::System::Nm::Services::Grpc::Notification >&
      _returnvalue() const;

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::System::Nm::Services::Grpc::Notification > _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceDeleteNotificationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsResponse) */ {
 public:
  inline INotificationLoggerServiceDeleteNotificationsResponse() : INotificationLoggerServiceDeleteNotificationsResponse(nullptr) {}
  virtual ~INotificationLoggerServiceDeleteNotificationsResponse();

  INotificationLoggerServiceDeleteNotificationsResponse(const INotificationLoggerServiceDeleteNotificationsResponse& from);
  INotificationLoggerServiceDeleteNotificationsResponse(INotificationLoggerServiceDeleteNotificationsResponse&& from) noexcept
    : INotificationLoggerServiceDeleteNotificationsResponse() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceDeleteNotificationsResponse& operator=(const INotificationLoggerServiceDeleteNotificationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceDeleteNotificationsResponse& operator=(INotificationLoggerServiceDeleteNotificationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceDeleteNotificationsResponse& default_instance();

  static inline const INotificationLoggerServiceDeleteNotificationsResponse* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceDeleteNotificationsResponse*>(
               &_INotificationLoggerServiceDeleteNotificationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(INotificationLoggerServiceDeleteNotificationsResponse& a, INotificationLoggerServiceDeleteNotificationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceDeleteNotificationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceDeleteNotificationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceDeleteNotificationsResponse* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceDeleteNotificationsResponse>(nullptr);
  }

  INotificationLoggerServiceDeleteNotificationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceDeleteNotificationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceDeleteNotificationsResponse& from);
  void MergeFrom(const INotificationLoggerServiceDeleteNotificationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceDeleteNotificationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsResponse";
  }
  protected:
  explicit INotificationLoggerServiceDeleteNotificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // int32 _ReturnValue = 1;
  void clear__returnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 _returnvalue() const;
  void set__returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal__returnvalue() const;
  void _internal_set__returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceListArchivesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse) */ {
 public:
  inline INotificationLoggerServiceListArchivesResponse() : INotificationLoggerServiceListArchivesResponse(nullptr) {}
  virtual ~INotificationLoggerServiceListArchivesResponse();

  INotificationLoggerServiceListArchivesResponse(const INotificationLoggerServiceListArchivesResponse& from);
  INotificationLoggerServiceListArchivesResponse(INotificationLoggerServiceListArchivesResponse&& from) noexcept
    : INotificationLoggerServiceListArchivesResponse() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceListArchivesResponse& operator=(const INotificationLoggerServiceListArchivesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceListArchivesResponse& operator=(INotificationLoggerServiceListArchivesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceListArchivesResponse& default_instance();

  static inline const INotificationLoggerServiceListArchivesResponse* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceListArchivesResponse*>(
               &_INotificationLoggerServiceListArchivesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(INotificationLoggerServiceListArchivesResponse& a, INotificationLoggerServiceListArchivesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceListArchivesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceListArchivesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceListArchivesResponse* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceListArchivesResponse>(nullptr);
  }

  INotificationLoggerServiceListArchivesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceListArchivesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceListArchivesResponse& from);
  void MergeFrom(const INotificationLoggerServiceListArchivesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceListArchivesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse";
  }
  protected:
  explicit INotificationLoggerServiceListArchivesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated string _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  const std::string& _returnvalue(int index) const;
  std::string* mutable__returnvalue(int index);
  void set__returnvalue(int index, const std::string& value);
  void set__returnvalue(int index, std::string&& value);
  void set__returnvalue(int index, const char* value);
  void set__returnvalue(int index, const char* value, size_t size);
  std::string* add__returnvalue();
  void add__returnvalue(const std::string& value);
  void add__returnvalue(std::string&& value);
  void add__returnvalue(const char* value);
  void add__returnvalue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _returnvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable__returnvalue();
  private:
  const std::string& _internal__returnvalue(int index) const;
  std::string* _internal_add__returnvalue();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceGetArchiveConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse) */ {
 public:
  inline INotificationLoggerServiceGetArchiveConfigurationResponse() : INotificationLoggerServiceGetArchiveConfigurationResponse(nullptr) {}
  virtual ~INotificationLoggerServiceGetArchiveConfigurationResponse();

  INotificationLoggerServiceGetArchiveConfigurationResponse(const INotificationLoggerServiceGetArchiveConfigurationResponse& from);
  INotificationLoggerServiceGetArchiveConfigurationResponse(INotificationLoggerServiceGetArchiveConfigurationResponse&& from) noexcept
    : INotificationLoggerServiceGetArchiveConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceGetArchiveConfigurationResponse& operator=(const INotificationLoggerServiceGetArchiveConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceGetArchiveConfigurationResponse& operator=(INotificationLoggerServiceGetArchiveConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceGetArchiveConfigurationResponse& default_instance();

  static inline const INotificationLoggerServiceGetArchiveConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceGetArchiveConfigurationResponse*>(
               &_INotificationLoggerServiceGetArchiveConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(INotificationLoggerServiceGetArchiveConfigurationResponse& a, INotificationLoggerServiceGetArchiveConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceGetArchiveConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceGetArchiveConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceGetArchiveConfigurationResponse* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceGetArchiveConfigurationResponse>(nullptr);
  }

  INotificationLoggerServiceGetArchiveConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceGetArchiveConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceGetArchiveConfigurationResponse& from);
  void MergeFrom(const INotificationLoggerServiceGetArchiveConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceGetArchiveConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse";
  }
  protected:
  explicit INotificationLoggerServiceGetArchiveConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated string _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  const std::string& _returnvalue(int index) const;
  std::string* mutable__returnvalue(int index);
  void set__returnvalue(int index, const std::string& value);
  void set__returnvalue(int index, std::string&& value);
  void set__returnvalue(int index, const char* value);
  void set__returnvalue(int index, const char* value, size_t size);
  std::string* add__returnvalue();
  void add__returnvalue(const std::string& value);
  void add__returnvalue(std::string&& value);
  void add__returnvalue(const char* value);
  void add__returnvalue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _returnvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable__returnvalue();
  private:
  const std::string& _internal__returnvalue(int index) const;
  std::string* _internal_add__returnvalue();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceSetArchiveConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationResponse) */ {
 public:
  inline INotificationLoggerServiceSetArchiveConfigurationResponse() : INotificationLoggerServiceSetArchiveConfigurationResponse(nullptr) {}
  virtual ~INotificationLoggerServiceSetArchiveConfigurationResponse();

  INotificationLoggerServiceSetArchiveConfigurationResponse(const INotificationLoggerServiceSetArchiveConfigurationResponse& from);
  INotificationLoggerServiceSetArchiveConfigurationResponse(INotificationLoggerServiceSetArchiveConfigurationResponse&& from) noexcept
    : INotificationLoggerServiceSetArchiveConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceSetArchiveConfigurationResponse& operator=(const INotificationLoggerServiceSetArchiveConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceSetArchiveConfigurationResponse& operator=(INotificationLoggerServiceSetArchiveConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceSetArchiveConfigurationResponse& default_instance();

  static inline const INotificationLoggerServiceSetArchiveConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceSetArchiveConfigurationResponse*>(
               &_INotificationLoggerServiceSetArchiveConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(INotificationLoggerServiceSetArchiveConfigurationResponse& a, INotificationLoggerServiceSetArchiveConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceSetArchiveConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceSetArchiveConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceSetArchiveConfigurationResponse* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceSetArchiveConfigurationResponse>(nullptr);
  }

  INotificationLoggerServiceSetArchiveConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceSetArchiveConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceSetArchiveConfigurationResponse& from);
  void MergeFrom(const INotificationLoggerServiceSetArchiveConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceSetArchiveConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationResponse";
  }
  protected:
  explicit INotificationLoggerServiceSetArchiveConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// -------------------------------------------------------------------

class INotificationLoggerServiceResetArchiveConfigurationToFilesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesResponse) */ {
 public:
  inline INotificationLoggerServiceResetArchiveConfigurationToFilesResponse() : INotificationLoggerServiceResetArchiveConfigurationToFilesResponse(nullptr) {}
  virtual ~INotificationLoggerServiceResetArchiveConfigurationToFilesResponse();

  INotificationLoggerServiceResetArchiveConfigurationToFilesResponse(const INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& from);
  INotificationLoggerServiceResetArchiveConfigurationToFilesResponse(INotificationLoggerServiceResetArchiveConfigurationToFilesResponse&& from) noexcept
    : INotificationLoggerServiceResetArchiveConfigurationToFilesResponse() {
    *this = ::std::move(from);
  }

  inline INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& operator=(const INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& operator=(INotificationLoggerServiceResetArchiveConfigurationToFilesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& default_instance();

  static inline const INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* internal_default_instance() {
    return reinterpret_cast<const INotificationLoggerServiceResetArchiveConfigurationToFilesResponse*>(
               &_INotificationLoggerServiceResetArchiveConfigurationToFilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& a, INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* New() const final {
    return CreateMaybeMessage<INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>(nullptr);
  }

  INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<INotificationLoggerServiceResetArchiveConfigurationToFilesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& from);
  void MergeFrom(const INotificationLoggerServiceResetArchiveConfigurationToFilesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INotificationLoggerServiceResetArchiveConfigurationToFilesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesResponse";
  }
  protected:
  explicit INotificationLoggerServiceResetArchiveConfigurationToFilesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_INotificationLoggerService_2eproto);
    return ::descriptor_table_INotificationLoggerService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_INotificationLoggerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// INotificationLoggerServiceQueryStoredNotificationsRequest

// repeated string archives = 1;
inline int INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_archives_size() const {
  return archives_.size();
}
inline int INotificationLoggerServiceQueryStoredNotificationsRequest::archives_size() const {
  return _internal_archives_size();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::clear_archives() {
  archives_.Clear();
}
inline std::string* INotificationLoggerServiceQueryStoredNotificationsRequest::add_archives() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
  return _internal_add_archives();
}
inline const std::string& INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_archives(int index) const {
  return archives_.Get(index);
}
inline const std::string& INotificationLoggerServiceQueryStoredNotificationsRequest::archives(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
  return _internal_archives(index);
}
inline std::string* INotificationLoggerServiceQueryStoredNotificationsRequest::mutable_archives(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
  return archives_.Mutable(index);
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_archives(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
  archives_.Mutable(index)->assign(value);
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_archives(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
  archives_.Mutable(index)->assign(std::move(value));
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_archives(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  archives_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_archives(int index, const char* value, size_t size) {
  archives_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
}
inline std::string* INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_add_archives() {
  return archives_.Add();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::add_archives(const std::string& value) {
  archives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::add_archives(std::string&& value) {
  archives_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::add_archives(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  archives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::add_archives(const char* value, size_t size) {
  archives_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
INotificationLoggerServiceQueryStoredNotificationsRequest::archives() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
  return archives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
INotificationLoggerServiceQueryStoredNotificationsRequest::mutable_archives() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.archives)
  return &archives_;
}

// .Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter filter = 2;
inline bool INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool INotificationLoggerServiceQueryStoredNotificationsRequest::has_filter() const {
  return _internal_has_filter();
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_filter() const {
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter&>(
      ::Arp::Services::NotificationLogger::Services::Grpc::_NotificationFilter_default_instance_);
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& INotificationLoggerServiceQueryStoredNotificationsRequest::filter() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.filter)
  return _internal_filter();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::unsafe_arena_set_allocated_filter(
    ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.filter)
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryStoredNotificationsRequest::release_filter() {
  
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryStoredNotificationsRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.filter)
  
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryStoredNotificationsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.filter)
  return _internal_mutable_filter();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_allocated_filter(::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.filter)
}

// int32 limit = 3;
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 INotificationLoggerServiceQueryStoredNotificationsRequest::limit() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.limit)
  return _internal_limit();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.limit)
}

// .Arp.Services.NotificationLogger.Services.Grpc.SortOrder sortOrder = 4;
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::clear_sortorder() {
  sortorder_ = 0;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_sortorder() const {
  return static_cast< ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder >(sortorder_);
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder INotificationLoggerServiceQueryStoredNotificationsRequest::sortorder() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.sortOrder)
  return _internal_sortorder();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value) {
  
  sortorder_ = value;
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value) {
  _internal_set_sortorder(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.sortOrder)
}

// string language = 5;
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& INotificationLoggerServiceQueryStoredNotificationsRequest::language() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
  return _internal_language();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
}
inline std::string* INotificationLoggerServiceQueryStoredNotificationsRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
  return _internal_mutable_language();
}
inline const std::string& INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_language() const {
  return language_.Get();
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_language(std::string&& value) {
  
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_language(const char* value,
    size_t size) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
}
inline std::string* INotificationLoggerServiceQueryStoredNotificationsRequest::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* INotificationLoggerServiceQueryStoredNotificationsRequest::release_language() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void INotificationLoggerServiceQueryStoredNotificationsRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsRequest.language)
}

// -------------------------------------------------------------------

// INotificationLoggerServiceQueryNotificationsRequest

// repeated string archives = 1;
inline int INotificationLoggerServiceQueryNotificationsRequest::_internal_archives_size() const {
  return archives_.size();
}
inline int INotificationLoggerServiceQueryNotificationsRequest::archives_size() const {
  return _internal_archives_size();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::clear_archives() {
  archives_.Clear();
}
inline std::string* INotificationLoggerServiceQueryNotificationsRequest::add_archives() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
  return _internal_add_archives();
}
inline const std::string& INotificationLoggerServiceQueryNotificationsRequest::_internal_archives(int index) const {
  return archives_.Get(index);
}
inline const std::string& INotificationLoggerServiceQueryNotificationsRequest::archives(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
  return _internal_archives(index);
}
inline std::string* INotificationLoggerServiceQueryNotificationsRequest::mutable_archives(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
  return archives_.Mutable(index);
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_archives(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
  archives_.Mutable(index)->assign(value);
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_archives(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
  archives_.Mutable(index)->assign(std::move(value));
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_archives(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  archives_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_archives(int index, const char* value, size_t size) {
  archives_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
}
inline std::string* INotificationLoggerServiceQueryNotificationsRequest::_internal_add_archives() {
  return archives_.Add();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::add_archives(const std::string& value) {
  archives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryNotificationsRequest::add_archives(std::string&& value) {
  archives_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryNotificationsRequest::add_archives(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  archives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
}
inline void INotificationLoggerServiceQueryNotificationsRequest::add_archives(const char* value, size_t size) {
  archives_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
INotificationLoggerServiceQueryNotificationsRequest::archives() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
  return archives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
INotificationLoggerServiceQueryNotificationsRequest::mutable_archives() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.archives)
  return &archives_;
}

// .Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter filter = 2;
inline bool INotificationLoggerServiceQueryNotificationsRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool INotificationLoggerServiceQueryNotificationsRequest::has_filter() const {
  return _internal_has_filter();
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& INotificationLoggerServiceQueryNotificationsRequest::_internal_filter() const {
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter&>(
      ::Arp::Services::NotificationLogger::Services::Grpc::_NotificationFilter_default_instance_);
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& INotificationLoggerServiceQueryNotificationsRequest::filter() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.filter)
  return _internal_filter();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::unsafe_arena_set_allocated_filter(
    ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.filter)
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryNotificationsRequest::release_filter() {
  
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryNotificationsRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.filter)
  
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryNotificationsRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceQueryNotificationsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.filter)
  return _internal_mutable_filter();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_allocated_filter(::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.filter)
}

// int32 limit = 3;
inline void INotificationLoggerServiceQueryNotificationsRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 INotificationLoggerServiceQueryNotificationsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 INotificationLoggerServiceQueryNotificationsRequest::limit() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.limit)
  return _internal_limit();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.limit)
}

// .Arp.Services.NotificationLogger.Services.Grpc.SortOrder sortOrder = 4;
inline void INotificationLoggerServiceQueryNotificationsRequest::clear_sortorder() {
  sortorder_ = 0;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder INotificationLoggerServiceQueryNotificationsRequest::_internal_sortorder() const {
  return static_cast< ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder >(sortorder_);
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::SortOrder INotificationLoggerServiceQueryNotificationsRequest::sortorder() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.sortOrder)
  return _internal_sortorder();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::_internal_set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value) {
  
  sortorder_ = value;
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_sortorder(::Arp::Services::NotificationLogger::Services::Grpc::SortOrder value) {
  _internal_set_sortorder(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.sortOrder)
}

// string language = 5;
inline void INotificationLoggerServiceQueryNotificationsRequest::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& INotificationLoggerServiceQueryNotificationsRequest::language() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
  return _internal_language();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
}
inline std::string* INotificationLoggerServiceQueryNotificationsRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
  return _internal_mutable_language();
}
inline const std::string& INotificationLoggerServiceQueryNotificationsRequest::_internal_language() const {
  return language_.Get();
}
inline void INotificationLoggerServiceQueryNotificationsRequest::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_language(std::string&& value) {
  
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_language(const char* value,
    size_t size) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
}
inline std::string* INotificationLoggerServiceQueryNotificationsRequest::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* INotificationLoggerServiceQueryNotificationsRequest::release_language() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void INotificationLoggerServiceQueryNotificationsRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsRequest.language)
}

// -------------------------------------------------------------------

// INotificationLoggerServiceDeleteNotificationsRequest

// repeated string archives = 1;
inline int INotificationLoggerServiceDeleteNotificationsRequest::_internal_archives_size() const {
  return archives_.size();
}
inline int INotificationLoggerServiceDeleteNotificationsRequest::archives_size() const {
  return _internal_archives_size();
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::clear_archives() {
  archives_.Clear();
}
inline std::string* INotificationLoggerServiceDeleteNotificationsRequest::add_archives() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
  return _internal_add_archives();
}
inline const std::string& INotificationLoggerServiceDeleteNotificationsRequest::_internal_archives(int index) const {
  return archives_.Get(index);
}
inline const std::string& INotificationLoggerServiceDeleteNotificationsRequest::archives(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
  return _internal_archives(index);
}
inline std::string* INotificationLoggerServiceDeleteNotificationsRequest::mutable_archives(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
  return archives_.Mutable(index);
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::set_archives(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
  archives_.Mutable(index)->assign(value);
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::set_archives(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
  archives_.Mutable(index)->assign(std::move(value));
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::set_archives(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  archives_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::set_archives(int index, const char* value, size_t size) {
  archives_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
}
inline std::string* INotificationLoggerServiceDeleteNotificationsRequest::_internal_add_archives() {
  return archives_.Add();
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::add_archives(const std::string& value) {
  archives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::add_archives(std::string&& value) {
  archives_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::add_archives(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  archives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::add_archives(const char* value, size_t size) {
  archives_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
INotificationLoggerServiceDeleteNotificationsRequest::archives() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
  return archives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
INotificationLoggerServiceDeleteNotificationsRequest::mutable_archives() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.archives)
  return &archives_;
}

// .Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter filter = 2;
inline bool INotificationLoggerServiceDeleteNotificationsRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool INotificationLoggerServiceDeleteNotificationsRequest::has_filter() const {
  return _internal_has_filter();
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& INotificationLoggerServiceDeleteNotificationsRequest::_internal_filter() const {
  const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter&>(
      ::Arp::Services::NotificationLogger::Services::Grpc::_NotificationFilter_default_instance_);
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter& INotificationLoggerServiceDeleteNotificationsRequest::filter() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.filter)
  return _internal_filter();
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::unsafe_arena_set_allocated_filter(
    ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.filter)
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceDeleteNotificationsRequest::release_filter() {
  
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceDeleteNotificationsRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.filter)
  
  ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceDeleteNotificationsRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* INotificationLoggerServiceDeleteNotificationsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.filter)
  return _internal_mutable_filter();
}
inline void INotificationLoggerServiceDeleteNotificationsRequest::set_allocated_filter(::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsRequest.filter)
}

// -------------------------------------------------------------------

// INotificationLoggerServiceGetArchiveConfigurationRequest

// string archive = 1;
inline void INotificationLoggerServiceGetArchiveConfigurationRequest::clear_archive() {
  archive_.ClearToEmpty();
}
inline const std::string& INotificationLoggerServiceGetArchiveConfigurationRequest::archive() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
  return _internal_archive();
}
inline void INotificationLoggerServiceGetArchiveConfigurationRequest::set_archive(const std::string& value) {
  _internal_set_archive(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
}
inline std::string* INotificationLoggerServiceGetArchiveConfigurationRequest::mutable_archive() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
  return _internal_mutable_archive();
}
inline const std::string& INotificationLoggerServiceGetArchiveConfigurationRequest::_internal_archive() const {
  return archive_.Get();
}
inline void INotificationLoggerServiceGetArchiveConfigurationRequest::_internal_set_archive(const std::string& value) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void INotificationLoggerServiceGetArchiveConfigurationRequest::set_archive(std::string&& value) {
  
  archive_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
}
inline void INotificationLoggerServiceGetArchiveConfigurationRequest::set_archive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
}
inline void INotificationLoggerServiceGetArchiveConfigurationRequest::set_archive(const char* value,
    size_t size) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
}
inline std::string* INotificationLoggerServiceGetArchiveConfigurationRequest::_internal_mutable_archive() {
  
  return archive_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* INotificationLoggerServiceGetArchiveConfigurationRequest::release_archive() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
  return archive_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void INotificationLoggerServiceGetArchiveConfigurationRequest::set_allocated_archive(std::string* archive) {
  if (archive != nullptr) {
    
  } else {
    
  }
  archive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationRequest.archive)
}

// -------------------------------------------------------------------

// INotificationLoggerServiceSetArchiveConfigurationRequest

// string archive = 1;
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::clear_archive() {
  archive_.ClearToEmpty();
}
inline const std::string& INotificationLoggerServiceSetArchiveConfigurationRequest::archive() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
  return _internal_archive();
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_archive(const std::string& value) {
  _internal_set_archive(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
}
inline std::string* INotificationLoggerServiceSetArchiveConfigurationRequest::mutable_archive() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
  return _internal_mutable_archive();
}
inline const std::string& INotificationLoggerServiceSetArchiveConfigurationRequest::_internal_archive() const {
  return archive_.Get();
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::_internal_set_archive(const std::string& value) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_archive(std::string&& value) {
  
  archive_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_archive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_archive(const char* value,
    size_t size) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
}
inline std::string* INotificationLoggerServiceSetArchiveConfigurationRequest::_internal_mutable_archive() {
  
  return archive_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* INotificationLoggerServiceSetArchiveConfigurationRequest::release_archive() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
  return archive_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_allocated_archive(std::string* archive) {
  if (archive != nullptr) {
    
  } else {
    
  }
  archive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.archive)
}

// repeated string xmlConfiguration = 2;
inline int INotificationLoggerServiceSetArchiveConfigurationRequest::_internal_xmlconfiguration_size() const {
  return xmlconfiguration_.size();
}
inline int INotificationLoggerServiceSetArchiveConfigurationRequest::xmlconfiguration_size() const {
  return _internal_xmlconfiguration_size();
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::clear_xmlconfiguration() {
  xmlconfiguration_.Clear();
}
inline std::string* INotificationLoggerServiceSetArchiveConfigurationRequest::add_xmlconfiguration() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
  return _internal_add_xmlconfiguration();
}
inline const std::string& INotificationLoggerServiceSetArchiveConfigurationRequest::_internal_xmlconfiguration(int index) const {
  return xmlconfiguration_.Get(index);
}
inline const std::string& INotificationLoggerServiceSetArchiveConfigurationRequest::xmlconfiguration(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
  return _internal_xmlconfiguration(index);
}
inline std::string* INotificationLoggerServiceSetArchiveConfigurationRequest::mutable_xmlconfiguration(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
  return xmlconfiguration_.Mutable(index);
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_xmlconfiguration(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
  xmlconfiguration_.Mutable(index)->assign(value);
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_xmlconfiguration(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
  xmlconfiguration_.Mutable(index)->assign(std::move(value));
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_xmlconfiguration(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xmlconfiguration_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::set_xmlconfiguration(int index, const char* value, size_t size) {
  xmlconfiguration_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
}
inline std::string* INotificationLoggerServiceSetArchiveConfigurationRequest::_internal_add_xmlconfiguration() {
  return xmlconfiguration_.Add();
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::add_xmlconfiguration(const std::string& value) {
  xmlconfiguration_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::add_xmlconfiguration(std::string&& value) {
  xmlconfiguration_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::add_xmlconfiguration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xmlconfiguration_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
}
inline void INotificationLoggerServiceSetArchiveConfigurationRequest::add_xmlconfiguration(const char* value, size_t size) {
  xmlconfiguration_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
INotificationLoggerServiceSetArchiveConfigurationRequest::xmlconfiguration() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
  return xmlconfiguration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
INotificationLoggerServiceSetArchiveConfigurationRequest::mutable_xmlconfiguration() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationRequest.xmlConfiguration)
  return &xmlconfiguration_;
}

// -------------------------------------------------------------------

// INotificationLoggerServiceResetArchiveConfigurationToFilesRequest

// string archive = 1;
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::clear_archive() {
  archive_.ClearToEmpty();
}
inline const std::string& INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::archive() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
  return _internal_archive();
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::set_archive(const std::string& value) {
  _internal_set_archive(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
}
inline std::string* INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::mutable_archive() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
  return _internal_mutable_archive();
}
inline const std::string& INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::_internal_archive() const {
  return archive_.Get();
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::_internal_set_archive(const std::string& value) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::set_archive(std::string&& value) {
  
  archive_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::set_archive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::set_archive(const char* value,
    size_t size) {
  
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
}
inline std::string* INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::_internal_mutable_archive() {
  
  return archive_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::release_archive() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
  return archive_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesRequest::set_allocated_archive(std::string* archive) {
  if (archive != nullptr) {
    
  } else {
    
  }
  archive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesRequest.archive)
}

// -------------------------------------------------------------------

// INotificationLoggerServiceQueryStoredNotificationsResponse

// repeated .Arp.Services.NotificationLogger.Services.Grpc.StoredNotification _ReturnValue = 1;
inline int INotificationLoggerServiceQueryStoredNotificationsResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int INotificationLoggerServiceQueryStoredNotificationsResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification* INotificationLoggerServiceQueryStoredNotificationsResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification >*
INotificationLoggerServiceQueryStoredNotificationsResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse._ReturnValue)
  return &_returnvalue_;
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification& INotificationLoggerServiceQueryStoredNotificationsResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification& INotificationLoggerServiceQueryStoredNotificationsResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification* INotificationLoggerServiceQueryStoredNotificationsResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification* INotificationLoggerServiceQueryStoredNotificationsResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::NotificationLogger::Services::Grpc::StoredNotification >&
INotificationLoggerServiceQueryStoredNotificationsResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryStoredNotificationsResponse._ReturnValue)
  return _returnvalue_;
}

// -------------------------------------------------------------------

// INotificationLoggerServiceQueryNotificationsResponse

// repeated .Arp.System.Nm.Services.Grpc.Notification _ReturnValue = 1;
inline int INotificationLoggerServiceQueryNotificationsResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int INotificationLoggerServiceQueryNotificationsResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline ::Arp::System::Nm::Services::Grpc::Notification* INotificationLoggerServiceQueryNotificationsResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::System::Nm::Services::Grpc::Notification >*
INotificationLoggerServiceQueryNotificationsResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse._ReturnValue)
  return &_returnvalue_;
}
inline const ::Arp::System::Nm::Services::Grpc::Notification& INotificationLoggerServiceQueryNotificationsResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const ::Arp::System::Nm::Services::Grpc::Notification& INotificationLoggerServiceQueryNotificationsResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline ::Arp::System::Nm::Services::Grpc::Notification* INotificationLoggerServiceQueryNotificationsResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline ::Arp::System::Nm::Services::Grpc::Notification* INotificationLoggerServiceQueryNotificationsResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::System::Nm::Services::Grpc::Notification >&
INotificationLoggerServiceQueryNotificationsResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceQueryNotificationsResponse._ReturnValue)
  return _returnvalue_;
}

// -------------------------------------------------------------------

// INotificationLoggerServiceDeleteNotificationsResponse

// int32 _ReturnValue = 1;
inline void INotificationLoggerServiceDeleteNotificationsResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 INotificationLoggerServiceDeleteNotificationsResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 INotificationLoggerServiceDeleteNotificationsResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void INotificationLoggerServiceDeleteNotificationsResponse::_internal_set__returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  _returnvalue_ = value;
}
inline void INotificationLoggerServiceDeleteNotificationsResponse::set__returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceDeleteNotificationsResponse._ReturnValue)
}

// -------------------------------------------------------------------

// INotificationLoggerServiceListArchivesResponse

// repeated string _ReturnValue = 1;
inline int INotificationLoggerServiceListArchivesResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int INotificationLoggerServiceListArchivesResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline void INotificationLoggerServiceListArchivesResponse::clear__returnvalue() {
  _returnvalue_.Clear();
}
inline std::string* INotificationLoggerServiceListArchivesResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const std::string& INotificationLoggerServiceListArchivesResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const std::string& INotificationLoggerServiceListArchivesResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline std::string* INotificationLoggerServiceListArchivesResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline void INotificationLoggerServiceListArchivesResponse::set__returnvalue(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(value);
}
inline void INotificationLoggerServiceListArchivesResponse::set__returnvalue(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(std::move(value));
}
inline void INotificationLoggerServiceListArchivesResponse::set__returnvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
}
inline void INotificationLoggerServiceListArchivesResponse::set__returnvalue(int index, const char* value, size_t size) {
  _returnvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
}
inline std::string* INotificationLoggerServiceListArchivesResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline void INotificationLoggerServiceListArchivesResponse::add__returnvalue(const std::string& value) {
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
}
inline void INotificationLoggerServiceListArchivesResponse::add__returnvalue(std::string&& value) {
  _returnvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
}
inline void INotificationLoggerServiceListArchivesResponse::add__returnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
}
inline void INotificationLoggerServiceListArchivesResponse::add__returnvalue(const char* value, size_t size) {
  _returnvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
INotificationLoggerServiceListArchivesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
  return _returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
INotificationLoggerServiceListArchivesResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceListArchivesResponse._ReturnValue)
  return &_returnvalue_;
}

// -------------------------------------------------------------------

// INotificationLoggerServiceGetArchiveConfigurationResponse

// repeated string _ReturnValue = 1;
inline int INotificationLoggerServiceGetArchiveConfigurationResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int INotificationLoggerServiceGetArchiveConfigurationResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::clear__returnvalue() {
  _returnvalue_.Clear();
}
inline std::string* INotificationLoggerServiceGetArchiveConfigurationResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const std::string& INotificationLoggerServiceGetArchiveConfigurationResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const std::string& INotificationLoggerServiceGetArchiveConfigurationResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline std::string* INotificationLoggerServiceGetArchiveConfigurationResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::set__returnvalue(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(value);
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::set__returnvalue(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(std::move(value));
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::set__returnvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::set__returnvalue(int index, const char* value, size_t size) {
  _returnvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
}
inline std::string* INotificationLoggerServiceGetArchiveConfigurationResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::add__returnvalue(const std::string& value) {
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::add__returnvalue(std::string&& value) {
  _returnvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::add__returnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
}
inline void INotificationLoggerServiceGetArchiveConfigurationResponse::add__returnvalue(const char* value, size_t size) {
  _returnvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
INotificationLoggerServiceGetArchiveConfigurationResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
  return _returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
INotificationLoggerServiceGetArchiveConfigurationResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceGetArchiveConfigurationResponse._ReturnValue)
  return &_returnvalue_;
}

// -------------------------------------------------------------------

// INotificationLoggerServiceSetArchiveConfigurationResponse

// bool _ReturnValue = 1;
inline void INotificationLoggerServiceSetArchiveConfigurationResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool INotificationLoggerServiceSetArchiveConfigurationResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool INotificationLoggerServiceSetArchiveConfigurationResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void INotificationLoggerServiceSetArchiveConfigurationResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void INotificationLoggerServiceSetArchiveConfigurationResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceSetArchiveConfigurationResponse._ReturnValue)
}

// -------------------------------------------------------------------

// INotificationLoggerServiceResetArchiveConfigurationToFilesResponse

// bool _ReturnValue = 1;
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool INotificationLoggerServiceResetArchiveConfigurationToFilesResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool INotificationLoggerServiceResetArchiveConfigurationToFilesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void INotificationLoggerServiceResetArchiveConfigurationToFilesResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.INotificationLoggerServiceResetArchiveConfigurationToFilesResponse._ReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_INotificationLoggerService_2eproto
