// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NotificationFilter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NotificationFilter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NotificationFilter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NotificationFilter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NotificationFilter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NotificationFilter_2eproto;
namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {
class NotificationFilter;
class NotificationFilterDefaultTypeInternal;
extern NotificationFilterDefaultTypeInternal _NotificationFilter_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter* Arena::CreateMaybeMessage<::Arp::Services::NotificationLogger::Services::Grpc::NotificationFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Services {
namespace NotificationLogger {
namespace Services {
namespace Grpc {

// ===================================================================

class NotificationFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter) */ {
 public:
  inline NotificationFilter() : NotificationFilter(nullptr) {}
  virtual ~NotificationFilter();

  NotificationFilter(const NotificationFilter& from);
  NotificationFilter(NotificationFilter&& from) noexcept
    : NotificationFilter() {
    *this = ::std::move(from);
  }

  inline NotificationFilter& operator=(const NotificationFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationFilter& operator=(NotificationFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationFilter& default_instance();

  static inline const NotificationFilter* internal_default_instance() {
    return reinterpret_cast<const NotificationFilter*>(
               &_NotificationFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationFilter& a, NotificationFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationFilter* New() const final {
    return CreateMaybeMessage<NotificationFilter>(nullptr);
  }

  NotificationFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationFilter& from);
  void MergeFrom(const NotificationFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter";
  }
  protected:
  explicit NotificationFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NotificationFilter_2eproto);
    return ::descriptor_table_NotificationFilter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationNameRegExpFieldNumber = 3,
    kSenderNameRegExpFieldNumber = 4,
    kTimestampBeforeFieldNumber = 5,
    kTimestampAfterFieldNumber = 6,
    kSeverityLowerLimitFieldNumber = 7,
    kSeverityUpperLimitFieldNumber = 8,
    kStoredIdLowerLimitFieldNumber = 1,
    kStoredIdUpperLimitFieldNumber = 2,
  };
  // string NotificationNameRegExp = 3;
  void clear_notificationnameregexp();
  const std::string& notificationnameregexp() const;
  void set_notificationnameregexp(const std::string& value);
  void set_notificationnameregexp(std::string&& value);
  void set_notificationnameregexp(const char* value);
  void set_notificationnameregexp(const char* value, size_t size);
  std::string* mutable_notificationnameregexp();
  std::string* release_notificationnameregexp();
  void set_allocated_notificationnameregexp(std::string* notificationnameregexp);
  private:
  const std::string& _internal_notificationnameregexp() const;
  void _internal_set_notificationnameregexp(const std::string& value);
  std::string* _internal_mutable_notificationnameregexp();
  public:

  // string SenderNameRegExp = 4;
  void clear_sendernameregexp();
  const std::string& sendernameregexp() const;
  void set_sendernameregexp(const std::string& value);
  void set_sendernameregexp(std::string&& value);
  void set_sendernameregexp(const char* value);
  void set_sendernameregexp(const char* value, size_t size);
  std::string* mutable_sendernameregexp();
  std::string* release_sendernameregexp();
  void set_allocated_sendernameregexp(std::string* sendernameregexp);
  private:
  const std::string& _internal_sendernameregexp() const;
  void _internal_set_sendernameregexp(const std::string& value);
  std::string* _internal_mutable_sendernameregexp();
  public:

  // string TimestampBefore = 5;
  void clear_timestampbefore();
  const std::string& timestampbefore() const;
  void set_timestampbefore(const std::string& value);
  void set_timestampbefore(std::string&& value);
  void set_timestampbefore(const char* value);
  void set_timestampbefore(const char* value, size_t size);
  std::string* mutable_timestampbefore();
  std::string* release_timestampbefore();
  void set_allocated_timestampbefore(std::string* timestampbefore);
  private:
  const std::string& _internal_timestampbefore() const;
  void _internal_set_timestampbefore(const std::string& value);
  std::string* _internal_mutable_timestampbefore();
  public:

  // string TimestampAfter = 6;
  void clear_timestampafter();
  const std::string& timestampafter() const;
  void set_timestampafter(const std::string& value);
  void set_timestampafter(std::string&& value);
  void set_timestampafter(const char* value);
  void set_timestampafter(const char* value, size_t size);
  std::string* mutable_timestampafter();
  std::string* release_timestampafter();
  void set_allocated_timestampafter(std::string* timestampafter);
  private:
  const std::string& _internal_timestampafter() const;
  void _internal_set_timestampafter(const std::string& value);
  std::string* _internal_mutable_timestampafter();
  public:

  // string SeverityLowerLimit = 7;
  void clear_severitylowerlimit();
  const std::string& severitylowerlimit() const;
  void set_severitylowerlimit(const std::string& value);
  void set_severitylowerlimit(std::string&& value);
  void set_severitylowerlimit(const char* value);
  void set_severitylowerlimit(const char* value, size_t size);
  std::string* mutable_severitylowerlimit();
  std::string* release_severitylowerlimit();
  void set_allocated_severitylowerlimit(std::string* severitylowerlimit);
  private:
  const std::string& _internal_severitylowerlimit() const;
  void _internal_set_severitylowerlimit(const std::string& value);
  std::string* _internal_mutable_severitylowerlimit();
  public:

  // string SeverityUpperLimit = 8;
  void clear_severityupperlimit();
  const std::string& severityupperlimit() const;
  void set_severityupperlimit(const std::string& value);
  void set_severityupperlimit(std::string&& value);
  void set_severityupperlimit(const char* value);
  void set_severityupperlimit(const char* value, size_t size);
  std::string* mutable_severityupperlimit();
  std::string* release_severityupperlimit();
  void set_allocated_severityupperlimit(std::string* severityupperlimit);
  private:
  const std::string& _internal_severityupperlimit() const;
  void _internal_set_severityupperlimit(const std::string& value);
  std::string* _internal_mutable_severityupperlimit();
  public:

  // uint64 StoredIdLowerLimit = 1;
  void clear_storedidlowerlimit();
  ::PROTOBUF_NAMESPACE_ID::uint64 storedidlowerlimit() const;
  void set_storedidlowerlimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_storedidlowerlimit() const;
  void _internal_set_storedidlowerlimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 StoredIdUpperLimit = 2;
  void clear_storedidupperlimit();
  ::PROTOBUF_NAMESPACE_ID::uint64 storedidupperlimit() const;
  void set_storedidupperlimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_storedidupperlimit() const;
  void _internal_set_storedidupperlimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notificationnameregexp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendernameregexp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestampbefore_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestampafter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr severitylowerlimit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr severityupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 storedidlowerlimit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 storedidupperlimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NotificationFilter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationFilter

// uint64 StoredIdLowerLimit = 1;
inline void NotificationFilter::clear_storedidlowerlimit() {
  storedidlowerlimit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotificationFilter::_internal_storedidlowerlimit() const {
  return storedidlowerlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotificationFilter::storedidlowerlimit() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.StoredIdLowerLimit)
  return _internal_storedidlowerlimit();
}
inline void NotificationFilter::_internal_set_storedidlowerlimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  storedidlowerlimit_ = value;
}
inline void NotificationFilter::set_storedidlowerlimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_storedidlowerlimit(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.StoredIdLowerLimit)
}

// uint64 StoredIdUpperLimit = 2;
inline void NotificationFilter::clear_storedidupperlimit() {
  storedidupperlimit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotificationFilter::_internal_storedidupperlimit() const {
  return storedidupperlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotificationFilter::storedidupperlimit() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.StoredIdUpperLimit)
  return _internal_storedidupperlimit();
}
inline void NotificationFilter::_internal_set_storedidupperlimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  storedidupperlimit_ = value;
}
inline void NotificationFilter::set_storedidupperlimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_storedidupperlimit(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.StoredIdUpperLimit)
}

// string NotificationNameRegExp = 3;
inline void NotificationFilter::clear_notificationnameregexp() {
  notificationnameregexp_.ClearToEmpty();
}
inline const std::string& NotificationFilter::notificationnameregexp() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
  return _internal_notificationnameregexp();
}
inline void NotificationFilter::set_notificationnameregexp(const std::string& value) {
  _internal_set_notificationnameregexp(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
}
inline std::string* NotificationFilter::mutable_notificationnameregexp() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
  return _internal_mutable_notificationnameregexp();
}
inline const std::string& NotificationFilter::_internal_notificationnameregexp() const {
  return notificationnameregexp_.Get();
}
inline void NotificationFilter::_internal_set_notificationnameregexp(const std::string& value) {
  
  notificationnameregexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationFilter::set_notificationnameregexp(std::string&& value) {
  
  notificationnameregexp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
}
inline void NotificationFilter::set_notificationnameregexp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notificationnameregexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
}
inline void NotificationFilter::set_notificationnameregexp(const char* value,
    size_t size) {
  
  notificationnameregexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
}
inline std::string* NotificationFilter::_internal_mutable_notificationnameregexp() {
  
  return notificationnameregexp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationFilter::release_notificationnameregexp() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
  return notificationnameregexp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationFilter::set_allocated_notificationnameregexp(std::string* notificationnameregexp) {
  if (notificationnameregexp != nullptr) {
    
  } else {
    
  }
  notificationnameregexp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notificationnameregexp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.NotificationNameRegExp)
}

// string SenderNameRegExp = 4;
inline void NotificationFilter::clear_sendernameregexp() {
  sendernameregexp_.ClearToEmpty();
}
inline const std::string& NotificationFilter::sendernameregexp() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
  return _internal_sendernameregexp();
}
inline void NotificationFilter::set_sendernameregexp(const std::string& value) {
  _internal_set_sendernameregexp(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
}
inline std::string* NotificationFilter::mutable_sendernameregexp() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
  return _internal_mutable_sendernameregexp();
}
inline const std::string& NotificationFilter::_internal_sendernameregexp() const {
  return sendernameregexp_.Get();
}
inline void NotificationFilter::_internal_set_sendernameregexp(const std::string& value) {
  
  sendernameregexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationFilter::set_sendernameregexp(std::string&& value) {
  
  sendernameregexp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
}
inline void NotificationFilter::set_sendernameregexp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendernameregexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
}
inline void NotificationFilter::set_sendernameregexp(const char* value,
    size_t size) {
  
  sendernameregexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
}
inline std::string* NotificationFilter::_internal_mutable_sendernameregexp() {
  
  return sendernameregexp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationFilter::release_sendernameregexp() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
  return sendernameregexp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationFilter::set_allocated_sendernameregexp(std::string* sendernameregexp) {
  if (sendernameregexp != nullptr) {
    
  } else {
    
  }
  sendernameregexp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendernameregexp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SenderNameRegExp)
}

// string TimestampBefore = 5;
inline void NotificationFilter::clear_timestampbefore() {
  timestampbefore_.ClearToEmpty();
}
inline const std::string& NotificationFilter::timestampbefore() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
  return _internal_timestampbefore();
}
inline void NotificationFilter::set_timestampbefore(const std::string& value) {
  _internal_set_timestampbefore(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
}
inline std::string* NotificationFilter::mutable_timestampbefore() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
  return _internal_mutable_timestampbefore();
}
inline const std::string& NotificationFilter::_internal_timestampbefore() const {
  return timestampbefore_.Get();
}
inline void NotificationFilter::_internal_set_timestampbefore(const std::string& value) {
  
  timestampbefore_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationFilter::set_timestampbefore(std::string&& value) {
  
  timestampbefore_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
}
inline void NotificationFilter::set_timestampbefore(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestampbefore_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
}
inline void NotificationFilter::set_timestampbefore(const char* value,
    size_t size) {
  
  timestampbefore_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
}
inline std::string* NotificationFilter::_internal_mutable_timestampbefore() {
  
  return timestampbefore_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationFilter::release_timestampbefore() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
  return timestampbefore_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationFilter::set_allocated_timestampbefore(std::string* timestampbefore) {
  if (timestampbefore != nullptr) {
    
  } else {
    
  }
  timestampbefore_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestampbefore,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampBefore)
}

// string TimestampAfter = 6;
inline void NotificationFilter::clear_timestampafter() {
  timestampafter_.ClearToEmpty();
}
inline const std::string& NotificationFilter::timestampafter() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
  return _internal_timestampafter();
}
inline void NotificationFilter::set_timestampafter(const std::string& value) {
  _internal_set_timestampafter(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
}
inline std::string* NotificationFilter::mutable_timestampafter() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
  return _internal_mutable_timestampafter();
}
inline const std::string& NotificationFilter::_internal_timestampafter() const {
  return timestampafter_.Get();
}
inline void NotificationFilter::_internal_set_timestampafter(const std::string& value) {
  
  timestampafter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationFilter::set_timestampafter(std::string&& value) {
  
  timestampafter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
}
inline void NotificationFilter::set_timestampafter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestampafter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
}
inline void NotificationFilter::set_timestampafter(const char* value,
    size_t size) {
  
  timestampafter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
}
inline std::string* NotificationFilter::_internal_mutable_timestampafter() {
  
  return timestampafter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationFilter::release_timestampafter() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
  return timestampafter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationFilter::set_allocated_timestampafter(std::string* timestampafter) {
  if (timestampafter != nullptr) {
    
  } else {
    
  }
  timestampafter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestampafter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.TimestampAfter)
}

// string SeverityLowerLimit = 7;
inline void NotificationFilter::clear_severitylowerlimit() {
  severitylowerlimit_.ClearToEmpty();
}
inline const std::string& NotificationFilter::severitylowerlimit() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
  return _internal_severitylowerlimit();
}
inline void NotificationFilter::set_severitylowerlimit(const std::string& value) {
  _internal_set_severitylowerlimit(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
}
inline std::string* NotificationFilter::mutable_severitylowerlimit() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
  return _internal_mutable_severitylowerlimit();
}
inline const std::string& NotificationFilter::_internal_severitylowerlimit() const {
  return severitylowerlimit_.Get();
}
inline void NotificationFilter::_internal_set_severitylowerlimit(const std::string& value) {
  
  severitylowerlimit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationFilter::set_severitylowerlimit(std::string&& value) {
  
  severitylowerlimit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
}
inline void NotificationFilter::set_severitylowerlimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  severitylowerlimit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
}
inline void NotificationFilter::set_severitylowerlimit(const char* value,
    size_t size) {
  
  severitylowerlimit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
}
inline std::string* NotificationFilter::_internal_mutable_severitylowerlimit() {
  
  return severitylowerlimit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationFilter::release_severitylowerlimit() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
  return severitylowerlimit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationFilter::set_allocated_severitylowerlimit(std::string* severitylowerlimit) {
  if (severitylowerlimit != nullptr) {
    
  } else {
    
  }
  severitylowerlimit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), severitylowerlimit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityLowerLimit)
}

// string SeverityUpperLimit = 8;
inline void NotificationFilter::clear_severityupperlimit() {
  severityupperlimit_.ClearToEmpty();
}
inline const std::string& NotificationFilter::severityupperlimit() const {
  // @@protoc_insertion_point(field_get:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
  return _internal_severityupperlimit();
}
inline void NotificationFilter::set_severityupperlimit(const std::string& value) {
  _internal_set_severityupperlimit(value);
  // @@protoc_insertion_point(field_set:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
}
inline std::string* NotificationFilter::mutable_severityupperlimit() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
  return _internal_mutable_severityupperlimit();
}
inline const std::string& NotificationFilter::_internal_severityupperlimit() const {
  return severityupperlimit_.Get();
}
inline void NotificationFilter::_internal_set_severityupperlimit(const std::string& value) {
  
  severityupperlimit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationFilter::set_severityupperlimit(std::string&& value) {
  
  severityupperlimit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
}
inline void NotificationFilter::set_severityupperlimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  severityupperlimit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
}
inline void NotificationFilter::set_severityupperlimit(const char* value,
    size_t size) {
  
  severityupperlimit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
}
inline std::string* NotificationFilter::_internal_mutable_severityupperlimit() {
  
  return severityupperlimit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationFilter::release_severityupperlimit() {
  // @@protoc_insertion_point(field_release:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
  return severityupperlimit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationFilter::set_allocated_severityupperlimit(std::string* severityupperlimit) {
  if (severityupperlimit != nullptr) {
    
  } else {
    
  }
  severityupperlimit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), severityupperlimit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.NotificationLogger.Services.Grpc.NotificationFilter.SeverityUpperLimit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace NotificationLogger
}  // namespace Services
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NotificationFilter_2eproto
