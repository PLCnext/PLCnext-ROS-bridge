// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IDataLoggerService2.proto

#include "IDataLoggerService2.pb.h"
#include "IDataLoggerService2.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arp {
namespace Services {
namespace DataLogger {
namespace Services {
namespace Grpc {

static const char* IDataLoggerService2_method_names[] = {
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/ListSessionNames",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/CreateSession",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/RemoveSession",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/StartSession",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/StopSession",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/ConfigureSession",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/GetSessionConfiguration",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/GetSessionState",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/SetVariables",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/GetLoggedVariables",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/ReadVariablesData",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/GetRotatedFileNames",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/GetSessionNames",
  "/Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2/SetTriggerCondition",
};

std::unique_ptr< IDataLoggerService2::Stub> IDataLoggerService2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IDataLoggerService2::Stub> stub(new IDataLoggerService2::Stub(channel));
  return stub;
}

IDataLoggerService2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListSessionNames_(IDataLoggerService2_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSession_(IDataLoggerService2_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveSession_(IDataLoggerService2_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartSession_(IDataLoggerService2_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopSession_(IDataLoggerService2_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigureSession_(IDataLoggerService2_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessionConfiguration_(IDataLoggerService2_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessionState_(IDataLoggerService2_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVariables_(IDataLoggerService2_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLoggedVariables_(IDataLoggerService2_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadVariablesData_(IDataLoggerService2_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRotatedFileNames_(IDataLoggerService2_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessionNames_(IDataLoggerService2_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTriggerCondition_(IDataLoggerService2_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IDataLoggerService2::Stub::ListSessionNames(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSessionNames_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::ListSessionNames(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSessionNames_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::ListSessionNames(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSessionNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse>* IDataLoggerService2::Stub::PrepareAsyncListSessionNamesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSessionNames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse>* IDataLoggerService2::Stub::AsyncListSessionNamesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSessionNamesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::CreateSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSession_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::CreateSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::CreateSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse>* IDataLoggerService2::Stub::PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse>* IDataLoggerService2::Stub::AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::RemoveSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveSession_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::RemoveSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSession_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::RemoveSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse>* IDataLoggerService2::Stub::PrepareAsyncRemoveSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse>* IDataLoggerService2::Stub::AsyncRemoveSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::StartSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartSession_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::StartSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::StartSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse>* IDataLoggerService2::Stub::PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse>* IDataLoggerService2::Stub::AsyncStartSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::StopSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopSession_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::StopSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopSession_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::StopSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse>* IDataLoggerService2::Stub::PrepareAsyncStopSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse>* IDataLoggerService2::Stub::AsyncStopSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::ConfigureSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfigureSession_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::ConfigureSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigureSession_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::ConfigureSession(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigureSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse>* IDataLoggerService2::Stub::PrepareAsyncConfigureSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfigureSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse>* IDataLoggerService2::Stub::AsyncConfigureSessionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigureSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::GetSessionConfiguration(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSessionConfiguration_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::GetSessionConfiguration(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionConfiguration_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::GetSessionConfiguration(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse>* IDataLoggerService2::Stub::PrepareAsyncGetSessionConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSessionConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse>* IDataLoggerService2::Stub::AsyncGetSessionConfigurationRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSessionConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::GetSessionState(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSessionState_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::GetSessionState(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionState_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::GetSessionState(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse>* IDataLoggerService2::Stub::PrepareAsyncGetSessionStateRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSessionState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse>* IDataLoggerService2::Stub::AsyncGetSessionStateRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSessionStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::SetVariables(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVariables_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::SetVariables(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVariables_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::SetVariables(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVariables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse>* IDataLoggerService2::Stub::PrepareAsyncSetVariablesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVariables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse>* IDataLoggerService2::Stub::AsyncSetVariablesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVariablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::GetLoggedVariables(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLoggedVariables_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::GetLoggedVariables(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLoggedVariables_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::GetLoggedVariables(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLoggedVariables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse>* IDataLoggerService2::Stub::PrepareAsyncGetLoggedVariablesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLoggedVariables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse>* IDataLoggerService2::Stub::AsyncGetLoggedVariablesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLoggedVariablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::ReadVariablesData(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadVariablesData_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::ReadVariablesData(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadVariablesData_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::ReadVariablesData(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadVariablesData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse>* IDataLoggerService2::Stub::PrepareAsyncReadVariablesDataRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadVariablesData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse>* IDataLoggerService2::Stub::AsyncReadVariablesDataRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadVariablesDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::GetRotatedFileNames(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRotatedFileNames_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::GetRotatedFileNames(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRotatedFileNames_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::GetRotatedFileNames(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRotatedFileNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse>* IDataLoggerService2::Stub::PrepareAsyncGetRotatedFileNamesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRotatedFileNames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse>* IDataLoggerService2::Stub::AsyncGetRotatedFileNamesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRotatedFileNamesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::GetSessionNames(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSessionNames_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::GetSessionNames(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionNames_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::GetSessionNames(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse>* IDataLoggerService2::Stub::PrepareAsyncGetSessionNamesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSessionNames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse>* IDataLoggerService2::Stub::AsyncGetSessionNamesRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSessionNamesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDataLoggerService2::Stub::SetTriggerCondition(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest& request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTriggerCondition_, context, request, response);
}

void IDataLoggerService2::Stub::experimental_async::SetTriggerCondition(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTriggerCondition_, context, request, response, std::move(f));
}

void IDataLoggerService2::Stub::experimental_async::SetTriggerCondition(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTriggerCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse>* IDataLoggerService2::Stub::PrepareAsyncSetTriggerConditionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTriggerCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse>* IDataLoggerService2::Stub::AsyncSetTriggerConditionRaw(::grpc::ClientContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTriggerConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

IDataLoggerService2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::google::protobuf::Empty, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse* resp) {
               return service->ListSessionNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse* resp) {
               return service->CreateSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse* resp) {
               return service->RemoveSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse* resp) {
               return service->StartSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse* resp) {
               return service->StopSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse* resp) {
               return service->ConfigureSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse* resp) {
               return service->GetSessionConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse* resp) {
               return service->GetSessionState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse* resp) {
               return service->SetVariables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse* resp) {
               return service->GetLoggedVariables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse* resp) {
               return service->ReadVariablesData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse* resp) {
               return service->GetRotatedFileNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse* resp) {
               return service->GetSessionNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDataLoggerService2_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDataLoggerService2::Service, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDataLoggerService2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest* req,
             ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse* resp) {
               return service->SetTriggerCondition(ctx, req, resp);
             }, this)));
}

IDataLoggerService2::Service::~Service() {
}

::grpc::Status IDataLoggerService2::Service::ListSessionNames(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::CreateSession(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::RemoveSession(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::StartSession(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::StopSession(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::ConfigureSession(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::GetSessionConfiguration(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::GetSessionState(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::SetVariables(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::GetLoggedVariables(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::ReadVariablesData(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::GetRotatedFileNames(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::GetSessionNames(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDataLoggerService2::Service::SetTriggerCondition(::grpc::ServerContext* context, const ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest* request, ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arp
}  // namespace Services
}  // namespace DataLogger
}  // namespace Services
}  // namespace Grpc

