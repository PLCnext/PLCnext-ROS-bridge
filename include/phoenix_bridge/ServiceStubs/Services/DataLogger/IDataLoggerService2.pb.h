// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IDataLoggerService2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IDataLoggerService2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IDataLoggerService2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ErrorCode.pb.h"
#include "SessionProperty.pb.h"
#include "SessionState.pb.h"
#include "TriggerRpnItem.pb.h"
#include "VariableInfo.pb.h"
#include "ArpTypes.pb.h"
#include "DateTime.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IDataLoggerService2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IDataLoggerService2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IDataLoggerService2_2eproto;
namespace Arp {
namespace Services {
namespace DataLogger {
namespace Services {
namespace Grpc {
class IDataLoggerService2ConfigureSessionRequest;
class IDataLoggerService2ConfigureSessionRequestDefaultTypeInternal;
extern IDataLoggerService2ConfigureSessionRequestDefaultTypeInternal _IDataLoggerService2ConfigureSessionRequest_default_instance_;
class IDataLoggerService2ConfigureSessionResponse;
class IDataLoggerService2ConfigureSessionResponseDefaultTypeInternal;
extern IDataLoggerService2ConfigureSessionResponseDefaultTypeInternal _IDataLoggerService2ConfigureSessionResponse_default_instance_;
class IDataLoggerService2CreateSessionRequest;
class IDataLoggerService2CreateSessionRequestDefaultTypeInternal;
extern IDataLoggerService2CreateSessionRequestDefaultTypeInternal _IDataLoggerService2CreateSessionRequest_default_instance_;
class IDataLoggerService2CreateSessionResponse;
class IDataLoggerService2CreateSessionResponseDefaultTypeInternal;
extern IDataLoggerService2CreateSessionResponseDefaultTypeInternal _IDataLoggerService2CreateSessionResponse_default_instance_;
class IDataLoggerService2GetLoggedVariablesRequest;
class IDataLoggerService2GetLoggedVariablesRequestDefaultTypeInternal;
extern IDataLoggerService2GetLoggedVariablesRequestDefaultTypeInternal _IDataLoggerService2GetLoggedVariablesRequest_default_instance_;
class IDataLoggerService2GetLoggedVariablesResponse;
class IDataLoggerService2GetLoggedVariablesResponseDefaultTypeInternal;
extern IDataLoggerService2GetLoggedVariablesResponseDefaultTypeInternal _IDataLoggerService2GetLoggedVariablesResponse_default_instance_;
class IDataLoggerService2GetRotatedFileNamesRequest;
class IDataLoggerService2GetRotatedFileNamesRequestDefaultTypeInternal;
extern IDataLoggerService2GetRotatedFileNamesRequestDefaultTypeInternal _IDataLoggerService2GetRotatedFileNamesRequest_default_instance_;
class IDataLoggerService2GetRotatedFileNamesResponse;
class IDataLoggerService2GetRotatedFileNamesResponseDefaultTypeInternal;
extern IDataLoggerService2GetRotatedFileNamesResponseDefaultTypeInternal _IDataLoggerService2GetRotatedFileNamesResponse_default_instance_;
class IDataLoggerService2GetSessionConfigurationRequest;
class IDataLoggerService2GetSessionConfigurationRequestDefaultTypeInternal;
extern IDataLoggerService2GetSessionConfigurationRequestDefaultTypeInternal _IDataLoggerService2GetSessionConfigurationRequest_default_instance_;
class IDataLoggerService2GetSessionConfigurationResponse;
class IDataLoggerService2GetSessionConfigurationResponseDefaultTypeInternal;
extern IDataLoggerService2GetSessionConfigurationResponseDefaultTypeInternal _IDataLoggerService2GetSessionConfigurationResponse_default_instance_;
class IDataLoggerService2GetSessionNamesRequest;
class IDataLoggerService2GetSessionNamesRequestDefaultTypeInternal;
extern IDataLoggerService2GetSessionNamesRequestDefaultTypeInternal _IDataLoggerService2GetSessionNamesRequest_default_instance_;
class IDataLoggerService2GetSessionNamesResponse;
class IDataLoggerService2GetSessionNamesResponseDefaultTypeInternal;
extern IDataLoggerService2GetSessionNamesResponseDefaultTypeInternal _IDataLoggerService2GetSessionNamesResponse_default_instance_;
class IDataLoggerService2GetSessionStateRequest;
class IDataLoggerService2GetSessionStateRequestDefaultTypeInternal;
extern IDataLoggerService2GetSessionStateRequestDefaultTypeInternal _IDataLoggerService2GetSessionStateRequest_default_instance_;
class IDataLoggerService2GetSessionStateResponse;
class IDataLoggerService2GetSessionStateResponseDefaultTypeInternal;
extern IDataLoggerService2GetSessionStateResponseDefaultTypeInternal _IDataLoggerService2GetSessionStateResponse_default_instance_;
class IDataLoggerService2ListSessionNamesResponse;
class IDataLoggerService2ListSessionNamesResponseDefaultTypeInternal;
extern IDataLoggerService2ListSessionNamesResponseDefaultTypeInternal _IDataLoggerService2ListSessionNamesResponse_default_instance_;
class IDataLoggerService2ReadVariablesDataRequest;
class IDataLoggerService2ReadVariablesDataRequestDefaultTypeInternal;
extern IDataLoggerService2ReadVariablesDataRequestDefaultTypeInternal _IDataLoggerService2ReadVariablesDataRequest_default_instance_;
class IDataLoggerService2ReadVariablesDataResponse;
class IDataLoggerService2ReadVariablesDataResponseDefaultTypeInternal;
extern IDataLoggerService2ReadVariablesDataResponseDefaultTypeInternal _IDataLoggerService2ReadVariablesDataResponse_default_instance_;
class IDataLoggerService2RemoveSessionRequest;
class IDataLoggerService2RemoveSessionRequestDefaultTypeInternal;
extern IDataLoggerService2RemoveSessionRequestDefaultTypeInternal _IDataLoggerService2RemoveSessionRequest_default_instance_;
class IDataLoggerService2RemoveSessionResponse;
class IDataLoggerService2RemoveSessionResponseDefaultTypeInternal;
extern IDataLoggerService2RemoveSessionResponseDefaultTypeInternal _IDataLoggerService2RemoveSessionResponse_default_instance_;
class IDataLoggerService2SetTriggerConditionRequest;
class IDataLoggerService2SetTriggerConditionRequestDefaultTypeInternal;
extern IDataLoggerService2SetTriggerConditionRequestDefaultTypeInternal _IDataLoggerService2SetTriggerConditionRequest_default_instance_;
class IDataLoggerService2SetTriggerConditionResponse;
class IDataLoggerService2SetTriggerConditionResponseDefaultTypeInternal;
extern IDataLoggerService2SetTriggerConditionResponseDefaultTypeInternal _IDataLoggerService2SetTriggerConditionResponse_default_instance_;
class IDataLoggerService2SetVariablesRequest;
class IDataLoggerService2SetVariablesRequestDefaultTypeInternal;
extern IDataLoggerService2SetVariablesRequestDefaultTypeInternal _IDataLoggerService2SetVariablesRequest_default_instance_;
class IDataLoggerService2SetVariablesResponse;
class IDataLoggerService2SetVariablesResponseDefaultTypeInternal;
extern IDataLoggerService2SetVariablesResponseDefaultTypeInternal _IDataLoggerService2SetVariablesResponse_default_instance_;
class IDataLoggerService2StartSessionRequest;
class IDataLoggerService2StartSessionRequestDefaultTypeInternal;
extern IDataLoggerService2StartSessionRequestDefaultTypeInternal _IDataLoggerService2StartSessionRequest_default_instance_;
class IDataLoggerService2StartSessionResponse;
class IDataLoggerService2StartSessionResponseDefaultTypeInternal;
extern IDataLoggerService2StartSessionResponseDefaultTypeInternal _IDataLoggerService2StartSessionResponse_default_instance_;
class IDataLoggerService2StopSessionRequest;
class IDataLoggerService2StopSessionRequestDefaultTypeInternal;
extern IDataLoggerService2StopSessionRequestDefaultTypeInternal _IDataLoggerService2StopSessionRequest_default_instance_;
class IDataLoggerService2StopSessionResponse;
class IDataLoggerService2StopSessionResponseDefaultTypeInternal;
extern IDataLoggerService2StopSessionResponseDefaultTypeInternal _IDataLoggerService2StopSessionResponse_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace DataLogger
}  // namespace Services
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ConfigureSessionResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2CreateSessionResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetLoggedVariablesResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetRotatedFileNamesResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionConfigurationResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionNamesResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2GetSessionStateResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ListSessionNamesResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2ReadVariablesDataResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2RemoveSessionResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetTriggerConditionResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2SetVariablesResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StartSessionResponse>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionRequest>(Arena*);
template<> ::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse* Arena::CreateMaybeMessage<::Arp::Services::DataLogger::Services::Grpc::IDataLoggerService2StopSessionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Services {
namespace DataLogger {
namespace Services {
namespace Grpc {

// ===================================================================

class IDataLoggerService2CreateSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest) */ {
 public:
  inline IDataLoggerService2CreateSessionRequest() : IDataLoggerService2CreateSessionRequest(nullptr) {}
  virtual ~IDataLoggerService2CreateSessionRequest();

  IDataLoggerService2CreateSessionRequest(const IDataLoggerService2CreateSessionRequest& from);
  IDataLoggerService2CreateSessionRequest(IDataLoggerService2CreateSessionRequest&& from) noexcept
    : IDataLoggerService2CreateSessionRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2CreateSessionRequest& operator=(const IDataLoggerService2CreateSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2CreateSessionRequest& operator=(IDataLoggerService2CreateSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2CreateSessionRequest& default_instance();

  static inline const IDataLoggerService2CreateSessionRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2CreateSessionRequest*>(
               &_IDataLoggerService2CreateSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IDataLoggerService2CreateSessionRequest& a, IDataLoggerService2CreateSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2CreateSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2CreateSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2CreateSessionRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2CreateSessionRequest>(nullptr);
  }

  IDataLoggerService2CreateSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2CreateSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2CreateSessionRequest& from);
  void MergeFrom(const IDataLoggerService2CreateSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2CreateSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest";
  }
  protected:
  explicit IDataLoggerService2CreateSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
    kPersistentFieldNumber = 2,
  };
  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // bool persistent = 2;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);
  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  bool persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2RemoveSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest) */ {
 public:
  inline IDataLoggerService2RemoveSessionRequest() : IDataLoggerService2RemoveSessionRequest(nullptr) {}
  virtual ~IDataLoggerService2RemoveSessionRequest();

  IDataLoggerService2RemoveSessionRequest(const IDataLoggerService2RemoveSessionRequest& from);
  IDataLoggerService2RemoveSessionRequest(IDataLoggerService2RemoveSessionRequest&& from) noexcept
    : IDataLoggerService2RemoveSessionRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2RemoveSessionRequest& operator=(const IDataLoggerService2RemoveSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2RemoveSessionRequest& operator=(IDataLoggerService2RemoveSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2RemoveSessionRequest& default_instance();

  static inline const IDataLoggerService2RemoveSessionRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2RemoveSessionRequest*>(
               &_IDataLoggerService2RemoveSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IDataLoggerService2RemoveSessionRequest& a, IDataLoggerService2RemoveSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2RemoveSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2RemoveSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2RemoveSessionRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2RemoveSessionRequest>(nullptr);
  }

  IDataLoggerService2RemoveSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2RemoveSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2RemoveSessionRequest& from);
  void MergeFrom(const IDataLoggerService2RemoveSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2RemoveSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest";
  }
  protected:
  explicit IDataLoggerService2RemoveSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
  };
  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2StartSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest) */ {
 public:
  inline IDataLoggerService2StartSessionRequest() : IDataLoggerService2StartSessionRequest(nullptr) {}
  virtual ~IDataLoggerService2StartSessionRequest();

  IDataLoggerService2StartSessionRequest(const IDataLoggerService2StartSessionRequest& from);
  IDataLoggerService2StartSessionRequest(IDataLoggerService2StartSessionRequest&& from) noexcept
    : IDataLoggerService2StartSessionRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2StartSessionRequest& operator=(const IDataLoggerService2StartSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2StartSessionRequest& operator=(IDataLoggerService2StartSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2StartSessionRequest& default_instance();

  static inline const IDataLoggerService2StartSessionRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2StartSessionRequest*>(
               &_IDataLoggerService2StartSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IDataLoggerService2StartSessionRequest& a, IDataLoggerService2StartSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2StartSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2StartSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2StartSessionRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2StartSessionRequest>(nullptr);
  }

  IDataLoggerService2StartSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2StartSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2StartSessionRequest& from);
  void MergeFrom(const IDataLoggerService2StartSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2StartSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest";
  }
  protected:
  explicit IDataLoggerService2StartSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
  };
  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2StopSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest) */ {
 public:
  inline IDataLoggerService2StopSessionRequest() : IDataLoggerService2StopSessionRequest(nullptr) {}
  virtual ~IDataLoggerService2StopSessionRequest();

  IDataLoggerService2StopSessionRequest(const IDataLoggerService2StopSessionRequest& from);
  IDataLoggerService2StopSessionRequest(IDataLoggerService2StopSessionRequest&& from) noexcept
    : IDataLoggerService2StopSessionRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2StopSessionRequest& operator=(const IDataLoggerService2StopSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2StopSessionRequest& operator=(IDataLoggerService2StopSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2StopSessionRequest& default_instance();

  static inline const IDataLoggerService2StopSessionRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2StopSessionRequest*>(
               &_IDataLoggerService2StopSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IDataLoggerService2StopSessionRequest& a, IDataLoggerService2StopSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2StopSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2StopSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2StopSessionRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2StopSessionRequest>(nullptr);
  }

  IDataLoggerService2StopSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2StopSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2StopSessionRequest& from);
  void MergeFrom(const IDataLoggerService2StopSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2StopSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest";
  }
  protected:
  explicit IDataLoggerService2StopSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
  };
  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2ConfigureSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest) */ {
 public:
  inline IDataLoggerService2ConfigureSessionRequest() : IDataLoggerService2ConfigureSessionRequest(nullptr) {}
  virtual ~IDataLoggerService2ConfigureSessionRequest();

  IDataLoggerService2ConfigureSessionRequest(const IDataLoggerService2ConfigureSessionRequest& from);
  IDataLoggerService2ConfigureSessionRequest(IDataLoggerService2ConfigureSessionRequest&& from) noexcept
    : IDataLoggerService2ConfigureSessionRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2ConfigureSessionRequest& operator=(const IDataLoggerService2ConfigureSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2ConfigureSessionRequest& operator=(IDataLoggerService2ConfigureSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2ConfigureSessionRequest& default_instance();

  static inline const IDataLoggerService2ConfigureSessionRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2ConfigureSessionRequest*>(
               &_IDataLoggerService2ConfigureSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IDataLoggerService2ConfigureSessionRequest& a, IDataLoggerService2ConfigureSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2ConfigureSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2ConfigureSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2ConfigureSessionRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2ConfigureSessionRequest>(nullptr);
  }

  IDataLoggerService2ConfigureSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2ConfigureSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2ConfigureSessionRequest& from);
  void MergeFrom(const IDataLoggerService2ConfigureSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2ConfigureSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest";
  }
  protected:
  explicit IDataLoggerService2ConfigureSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kSessionnameFieldNumber = 1,
  };
  // repeated .Arp.Services.DataLogger.Services.Grpc.SessionProperty properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >*
      mutable_properties();
  private:
  const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& _internal_properties(int index) const;
  ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* _internal_add_properties();
  public:
  const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& properties(int index) const;
  ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >&
      properties() const;

  // string sessionname = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetSessionConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest) */ {
 public:
  inline IDataLoggerService2GetSessionConfigurationRequest() : IDataLoggerService2GetSessionConfigurationRequest(nullptr) {}
  virtual ~IDataLoggerService2GetSessionConfigurationRequest();

  IDataLoggerService2GetSessionConfigurationRequest(const IDataLoggerService2GetSessionConfigurationRequest& from);
  IDataLoggerService2GetSessionConfigurationRequest(IDataLoggerService2GetSessionConfigurationRequest&& from) noexcept
    : IDataLoggerService2GetSessionConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetSessionConfigurationRequest& operator=(const IDataLoggerService2GetSessionConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetSessionConfigurationRequest& operator=(IDataLoggerService2GetSessionConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetSessionConfigurationRequest& default_instance();

  static inline const IDataLoggerService2GetSessionConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetSessionConfigurationRequest*>(
               &_IDataLoggerService2GetSessionConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IDataLoggerService2GetSessionConfigurationRequest& a, IDataLoggerService2GetSessionConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetSessionConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetSessionConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetSessionConfigurationRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionConfigurationRequest>(nullptr);
  }

  IDataLoggerService2GetSessionConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetSessionConfigurationRequest& from);
  void MergeFrom(const IDataLoggerService2GetSessionConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetSessionConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest";
  }
  protected:
  explicit IDataLoggerService2GetSessionConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionnameFieldNumber = 1,
  };
  // string sessionname = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetSessionStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest) */ {
 public:
  inline IDataLoggerService2GetSessionStateRequest() : IDataLoggerService2GetSessionStateRequest(nullptr) {}
  virtual ~IDataLoggerService2GetSessionStateRequest();

  IDataLoggerService2GetSessionStateRequest(const IDataLoggerService2GetSessionStateRequest& from);
  IDataLoggerService2GetSessionStateRequest(IDataLoggerService2GetSessionStateRequest&& from) noexcept
    : IDataLoggerService2GetSessionStateRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetSessionStateRequest& operator=(const IDataLoggerService2GetSessionStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetSessionStateRequest& operator=(IDataLoggerService2GetSessionStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetSessionStateRequest& default_instance();

  static inline const IDataLoggerService2GetSessionStateRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetSessionStateRequest*>(
               &_IDataLoggerService2GetSessionStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IDataLoggerService2GetSessionStateRequest& a, IDataLoggerService2GetSessionStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetSessionStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetSessionStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetSessionStateRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionStateRequest>(nullptr);
  }

  IDataLoggerService2GetSessionStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetSessionStateRequest& from);
  void MergeFrom(const IDataLoggerService2GetSessionStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetSessionStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest";
  }
  protected:
  explicit IDataLoggerService2GetSessionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
  };
  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2SetVariablesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest) */ {
 public:
  inline IDataLoggerService2SetVariablesRequest() : IDataLoggerService2SetVariablesRequest(nullptr) {}
  virtual ~IDataLoggerService2SetVariablesRequest();

  IDataLoggerService2SetVariablesRequest(const IDataLoggerService2SetVariablesRequest& from);
  IDataLoggerService2SetVariablesRequest(IDataLoggerService2SetVariablesRequest&& from) noexcept
    : IDataLoggerService2SetVariablesRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2SetVariablesRequest& operator=(const IDataLoggerService2SetVariablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2SetVariablesRequest& operator=(IDataLoggerService2SetVariablesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2SetVariablesRequest& default_instance();

  static inline const IDataLoggerService2SetVariablesRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2SetVariablesRequest*>(
               &_IDataLoggerService2SetVariablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IDataLoggerService2SetVariablesRequest& a, IDataLoggerService2SetVariablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2SetVariablesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2SetVariablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2SetVariablesRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2SetVariablesRequest>(nullptr);
  }

  IDataLoggerService2SetVariablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2SetVariablesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2SetVariablesRequest& from);
  void MergeFrom(const IDataLoggerService2SetVariablesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2SetVariablesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest";
  }
  protected:
  explicit IDataLoggerService2SetVariablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableNamesFieldNumber = 2,
    kSessionNameFieldNumber = 1,
  };
  // repeated string variableNames = 2;
  int variablenames_size() const;
  private:
  int _internal_variablenames_size() const;
  public:
  void clear_variablenames();
  const std::string& variablenames(int index) const;
  std::string* mutable_variablenames(int index);
  void set_variablenames(int index, const std::string& value);
  void set_variablenames(int index, std::string&& value);
  void set_variablenames(int index, const char* value);
  void set_variablenames(int index, const char* value, size_t size);
  std::string* add_variablenames();
  void add_variablenames(const std::string& value);
  void add_variablenames(std::string&& value);
  void add_variablenames(const char* value);
  void add_variablenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& variablenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_variablenames();
  private:
  const std::string& _internal_variablenames(int index) const;
  std::string* _internal_add_variablenames();
  public:

  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> variablenames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetLoggedVariablesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest) */ {
 public:
  inline IDataLoggerService2GetLoggedVariablesRequest() : IDataLoggerService2GetLoggedVariablesRequest(nullptr) {}
  virtual ~IDataLoggerService2GetLoggedVariablesRequest();

  IDataLoggerService2GetLoggedVariablesRequest(const IDataLoggerService2GetLoggedVariablesRequest& from);
  IDataLoggerService2GetLoggedVariablesRequest(IDataLoggerService2GetLoggedVariablesRequest&& from) noexcept
    : IDataLoggerService2GetLoggedVariablesRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetLoggedVariablesRequest& operator=(const IDataLoggerService2GetLoggedVariablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetLoggedVariablesRequest& operator=(IDataLoggerService2GetLoggedVariablesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetLoggedVariablesRequest& default_instance();

  static inline const IDataLoggerService2GetLoggedVariablesRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetLoggedVariablesRequest*>(
               &_IDataLoggerService2GetLoggedVariablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IDataLoggerService2GetLoggedVariablesRequest& a, IDataLoggerService2GetLoggedVariablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetLoggedVariablesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetLoggedVariablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetLoggedVariablesRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetLoggedVariablesRequest>(nullptr);
  }

  IDataLoggerService2GetLoggedVariablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetLoggedVariablesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetLoggedVariablesRequest& from);
  void MergeFrom(const IDataLoggerService2GetLoggedVariablesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetLoggedVariablesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest";
  }
  protected:
  explicit IDataLoggerService2GetLoggedVariablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
  };
  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2ReadVariablesDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest) */ {
 public:
  inline IDataLoggerService2ReadVariablesDataRequest() : IDataLoggerService2ReadVariablesDataRequest(nullptr) {}
  virtual ~IDataLoggerService2ReadVariablesDataRequest();

  IDataLoggerService2ReadVariablesDataRequest(const IDataLoggerService2ReadVariablesDataRequest& from);
  IDataLoggerService2ReadVariablesDataRequest(IDataLoggerService2ReadVariablesDataRequest&& from) noexcept
    : IDataLoggerService2ReadVariablesDataRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2ReadVariablesDataRequest& operator=(const IDataLoggerService2ReadVariablesDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2ReadVariablesDataRequest& operator=(IDataLoggerService2ReadVariablesDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2ReadVariablesDataRequest& default_instance();

  static inline const IDataLoggerService2ReadVariablesDataRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2ReadVariablesDataRequest*>(
               &_IDataLoggerService2ReadVariablesDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IDataLoggerService2ReadVariablesDataRequest& a, IDataLoggerService2ReadVariablesDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2ReadVariablesDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2ReadVariablesDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2ReadVariablesDataRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2ReadVariablesDataRequest>(nullptr);
  }

  IDataLoggerService2ReadVariablesDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2ReadVariablesDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2ReadVariablesDataRequest& from);
  void MergeFrom(const IDataLoggerService2ReadVariablesDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2ReadVariablesDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest";
  }
  protected:
  explicit IDataLoggerService2ReadVariablesDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableNamesFieldNumber = 4,
    kSessionNameFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // repeated string variableNames = 4;
  int variablenames_size() const;
  private:
  int _internal_variablenames_size() const;
  public:
  void clear_variablenames();
  const std::string& variablenames(int index) const;
  std::string* mutable_variablenames(int index);
  void set_variablenames(int index, const std::string& value);
  void set_variablenames(int index, std::string&& value);
  void set_variablenames(int index, const char* value);
  void set_variablenames(int index, const char* value, size_t size);
  std::string* add_variablenames();
  void add_variablenames(const std::string& value);
  void add_variablenames(std::string&& value);
  void add_variablenames(const char* value);
  void add_variablenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& variablenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_variablenames();
  private:
  const std::string& _internal_variablenames(int index) const;
  std::string* _internal_add_variablenames();
  public:

  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // .Arp.Grpc.DateTime startTime = 2;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::Arp::Grpc::DateTime& starttime() const;
  ::Arp::Grpc::DateTime* release_starttime();
  ::Arp::Grpc::DateTime* mutable_starttime();
  void set_allocated_starttime(::Arp::Grpc::DateTime* starttime);
  private:
  const ::Arp::Grpc::DateTime& _internal_starttime() const;
  ::Arp::Grpc::DateTime* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::Arp::Grpc::DateTime* starttime);
  ::Arp::Grpc::DateTime* unsafe_arena_release_starttime();

  // .Arp.Grpc.DateTime endTime = 3;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  const ::Arp::Grpc::DateTime& endtime() const;
  ::Arp::Grpc::DateTime* release_endtime();
  ::Arp::Grpc::DateTime* mutable_endtime();
  void set_allocated_endtime(::Arp::Grpc::DateTime* endtime);
  private:
  const ::Arp::Grpc::DateTime& _internal_endtime() const;
  ::Arp::Grpc::DateTime* _internal_mutable_endtime();
  public:
  void unsafe_arena_set_allocated_endtime(
      ::Arp::Grpc::DateTime* endtime);
  ::Arp::Grpc::DateTime* unsafe_arena_release_endtime();

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> variablenames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  ::Arp::Grpc::DateTime* starttime_;
  ::Arp::Grpc::DateTime* endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetRotatedFileNamesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest) */ {
 public:
  inline IDataLoggerService2GetRotatedFileNamesRequest() : IDataLoggerService2GetRotatedFileNamesRequest(nullptr) {}
  virtual ~IDataLoggerService2GetRotatedFileNamesRequest();

  IDataLoggerService2GetRotatedFileNamesRequest(const IDataLoggerService2GetRotatedFileNamesRequest& from);
  IDataLoggerService2GetRotatedFileNamesRequest(IDataLoggerService2GetRotatedFileNamesRequest&& from) noexcept
    : IDataLoggerService2GetRotatedFileNamesRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetRotatedFileNamesRequest& operator=(const IDataLoggerService2GetRotatedFileNamesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetRotatedFileNamesRequest& operator=(IDataLoggerService2GetRotatedFileNamesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetRotatedFileNamesRequest& default_instance();

  static inline const IDataLoggerService2GetRotatedFileNamesRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetRotatedFileNamesRequest*>(
               &_IDataLoggerService2GetRotatedFileNamesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IDataLoggerService2GetRotatedFileNamesRequest& a, IDataLoggerService2GetRotatedFileNamesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetRotatedFileNamesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetRotatedFileNamesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetRotatedFileNamesRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetRotatedFileNamesRequest>(nullptr);
  }

  IDataLoggerService2GetRotatedFileNamesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetRotatedFileNamesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetRotatedFileNamesRequest& from);
  void MergeFrom(const IDataLoggerService2GetRotatedFileNamesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetRotatedFileNamesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest";
  }
  protected:
  explicit IDataLoggerService2GetRotatedFileNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionnameFieldNumber = 1,
  };
  // string sessionname = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetSessionNamesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest) */ {
 public:
  inline IDataLoggerService2GetSessionNamesRequest() : IDataLoggerService2GetSessionNamesRequest(nullptr) {}
  virtual ~IDataLoggerService2GetSessionNamesRequest();

  IDataLoggerService2GetSessionNamesRequest(const IDataLoggerService2GetSessionNamesRequest& from);
  IDataLoggerService2GetSessionNamesRequest(IDataLoggerService2GetSessionNamesRequest&& from) noexcept
    : IDataLoggerService2GetSessionNamesRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetSessionNamesRequest& operator=(const IDataLoggerService2GetSessionNamesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetSessionNamesRequest& operator=(IDataLoggerService2GetSessionNamesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetSessionNamesRequest& default_instance();

  static inline const IDataLoggerService2GetSessionNamesRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetSessionNamesRequest*>(
               &_IDataLoggerService2GetSessionNamesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IDataLoggerService2GetSessionNamesRequest& a, IDataLoggerService2GetSessionNamesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetSessionNamesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetSessionNamesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetSessionNamesRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionNamesRequest>(nullptr);
  }

  IDataLoggerService2GetSessionNamesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionNamesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetSessionNamesRequest& from);
  void MergeFrom(const IDataLoggerService2GetSessionNamesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetSessionNamesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest";
  }
  protected:
  explicit IDataLoggerService2GetSessionNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablenameFieldNumber = 1,
  };
  // string variablename = 1;
  void clear_variablename();
  const std::string& variablename() const;
  void set_variablename(const std::string& value);
  void set_variablename(std::string&& value);
  void set_variablename(const char* value);
  void set_variablename(const char* value, size_t size);
  std::string* mutable_variablename();
  std::string* release_variablename();
  void set_allocated_variablename(std::string* variablename);
  private:
  const std::string& _internal_variablename() const;
  void _internal_set_variablename(const std::string& value);
  std::string* _internal_mutable_variablename();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variablename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2SetTriggerConditionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest) */ {
 public:
  inline IDataLoggerService2SetTriggerConditionRequest() : IDataLoggerService2SetTriggerConditionRequest(nullptr) {}
  virtual ~IDataLoggerService2SetTriggerConditionRequest();

  IDataLoggerService2SetTriggerConditionRequest(const IDataLoggerService2SetTriggerConditionRequest& from);
  IDataLoggerService2SetTriggerConditionRequest(IDataLoggerService2SetTriggerConditionRequest&& from) noexcept
    : IDataLoggerService2SetTriggerConditionRequest() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2SetTriggerConditionRequest& operator=(const IDataLoggerService2SetTriggerConditionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2SetTriggerConditionRequest& operator=(IDataLoggerService2SetTriggerConditionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2SetTriggerConditionRequest& default_instance();

  static inline const IDataLoggerService2SetTriggerConditionRequest* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2SetTriggerConditionRequest*>(
               &_IDataLoggerService2SetTriggerConditionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IDataLoggerService2SetTriggerConditionRequest& a, IDataLoggerService2SetTriggerConditionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2SetTriggerConditionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2SetTriggerConditionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2SetTriggerConditionRequest* New() const final {
    return CreateMaybeMessage<IDataLoggerService2SetTriggerConditionRequest>(nullptr);
  }

  IDataLoggerService2SetTriggerConditionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2SetTriggerConditionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2SetTriggerConditionRequest& from);
  void MergeFrom(const IDataLoggerService2SetTriggerConditionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2SetTriggerConditionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest";
  }
  protected:
  explicit IDataLoggerService2SetTriggerConditionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerConditionFieldNumber = 5,
    kSessionNameFieldNumber = 1,
    kTaskNameFieldNumber = 2,
    kPreCycleCountFieldNumber = 3,
    kPostCycleCountFieldNumber = 4,
  };
  // repeated .Arp.Services.DataLogger.Services.Grpc.TriggerRpnItem triggerCondition = 5;
  int triggercondition_size() const;
  private:
  int _internal_triggercondition_size() const;
  public:
  void clear_triggercondition();
  ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem* mutable_triggercondition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem >*
      mutable_triggercondition();
  private:
  const ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem& _internal_triggercondition(int index) const;
  ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem* _internal_add_triggercondition();
  public:
  const ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem& triggercondition(int index) const;
  ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem* add_triggercondition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem >&
      triggercondition() const;

  // string sessionName = 1;
  void clear_sessionname();
  const std::string& sessionname() const;
  void set_sessionname(const std::string& value);
  void set_sessionname(std::string&& value);
  void set_sessionname(const char* value);
  void set_sessionname(const char* value, size_t size);
  std::string* mutable_sessionname();
  std::string* release_sessionname();
  void set_allocated_sessionname(std::string* sessionname);
  private:
  const std::string& _internal_sessionname() const;
  void _internal_set_sessionname(const std::string& value);
  std::string* _internal_mutable_sessionname();
  public:

  // string taskName = 2;
  void clear_taskname();
  const std::string& taskname() const;
  void set_taskname(const std::string& value);
  void set_taskname(std::string&& value);
  void set_taskname(const char* value);
  void set_taskname(const char* value, size_t size);
  std::string* mutable_taskname();
  std::string* release_taskname();
  void set_allocated_taskname(std::string* taskname);
  private:
  const std::string& _internal_taskname() const;
  void _internal_set_taskname(const std::string& value);
  std::string* _internal_mutable_taskname();
  public:

  // int32 preCycleCount = 3;
  void clear_precyclecount();
  ::PROTOBUF_NAMESPACE_ID::int32 precyclecount() const;
  void set_precyclecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precyclecount() const;
  void _internal_set_precyclecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 postCycleCount = 4;
  void clear_postcyclecount();
  ::PROTOBUF_NAMESPACE_ID::int32 postcyclecount() const;
  void set_postcyclecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_postcyclecount() const;
  void _internal_set_postcyclecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem > triggercondition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskname_;
  ::PROTOBUF_NAMESPACE_ID::int32 precyclecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 postcyclecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2ListSessionNamesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse) */ {
 public:
  inline IDataLoggerService2ListSessionNamesResponse() : IDataLoggerService2ListSessionNamesResponse(nullptr) {}
  virtual ~IDataLoggerService2ListSessionNamesResponse();

  IDataLoggerService2ListSessionNamesResponse(const IDataLoggerService2ListSessionNamesResponse& from);
  IDataLoggerService2ListSessionNamesResponse(IDataLoggerService2ListSessionNamesResponse&& from) noexcept
    : IDataLoggerService2ListSessionNamesResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2ListSessionNamesResponse& operator=(const IDataLoggerService2ListSessionNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2ListSessionNamesResponse& operator=(IDataLoggerService2ListSessionNamesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2ListSessionNamesResponse& default_instance();

  static inline const IDataLoggerService2ListSessionNamesResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2ListSessionNamesResponse*>(
               &_IDataLoggerService2ListSessionNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IDataLoggerService2ListSessionNamesResponse& a, IDataLoggerService2ListSessionNamesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2ListSessionNamesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2ListSessionNamesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2ListSessionNamesResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2ListSessionNamesResponse>(nullptr);
  }

  IDataLoggerService2ListSessionNamesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2ListSessionNamesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2ListSessionNamesResponse& from);
  void MergeFrom(const IDataLoggerService2ListSessionNamesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2ListSessionNamesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse";
  }
  protected:
  explicit IDataLoggerService2ListSessionNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated string _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  const std::string& _returnvalue(int index) const;
  std::string* mutable__returnvalue(int index);
  void set__returnvalue(int index, const std::string& value);
  void set__returnvalue(int index, std::string&& value);
  void set__returnvalue(int index, const char* value);
  void set__returnvalue(int index, const char* value, size_t size);
  std::string* add__returnvalue();
  void add__returnvalue(const std::string& value);
  void add__returnvalue(std::string&& value);
  void add__returnvalue(const char* value);
  void add__returnvalue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _returnvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable__returnvalue();
  private:
  const std::string& _internal__returnvalue(int index) const;
  std::string* _internal_add__returnvalue();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2CreateSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionResponse) */ {
 public:
  inline IDataLoggerService2CreateSessionResponse() : IDataLoggerService2CreateSessionResponse(nullptr) {}
  virtual ~IDataLoggerService2CreateSessionResponse();

  IDataLoggerService2CreateSessionResponse(const IDataLoggerService2CreateSessionResponse& from);
  IDataLoggerService2CreateSessionResponse(IDataLoggerService2CreateSessionResponse&& from) noexcept
    : IDataLoggerService2CreateSessionResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2CreateSessionResponse& operator=(const IDataLoggerService2CreateSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2CreateSessionResponse& operator=(IDataLoggerService2CreateSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2CreateSessionResponse& default_instance();

  static inline const IDataLoggerService2CreateSessionResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2CreateSessionResponse*>(
               &_IDataLoggerService2CreateSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(IDataLoggerService2CreateSessionResponse& a, IDataLoggerService2CreateSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2CreateSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2CreateSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2CreateSessionResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2CreateSessionResponse>(nullptr);
  }

  IDataLoggerService2CreateSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2CreateSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2CreateSessionResponse& from);
  void MergeFrom(const IDataLoggerService2CreateSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2CreateSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionResponse";
  }
  protected:
  explicit IDataLoggerService2CreateSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2RemoveSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionResponse) */ {
 public:
  inline IDataLoggerService2RemoveSessionResponse() : IDataLoggerService2RemoveSessionResponse(nullptr) {}
  virtual ~IDataLoggerService2RemoveSessionResponse();

  IDataLoggerService2RemoveSessionResponse(const IDataLoggerService2RemoveSessionResponse& from);
  IDataLoggerService2RemoveSessionResponse(IDataLoggerService2RemoveSessionResponse&& from) noexcept
    : IDataLoggerService2RemoveSessionResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2RemoveSessionResponse& operator=(const IDataLoggerService2RemoveSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2RemoveSessionResponse& operator=(IDataLoggerService2RemoveSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2RemoveSessionResponse& default_instance();

  static inline const IDataLoggerService2RemoveSessionResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2RemoveSessionResponse*>(
               &_IDataLoggerService2RemoveSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(IDataLoggerService2RemoveSessionResponse& a, IDataLoggerService2RemoveSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2RemoveSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2RemoveSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2RemoveSessionResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2RemoveSessionResponse>(nullptr);
  }

  IDataLoggerService2RemoveSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2RemoveSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2RemoveSessionResponse& from);
  void MergeFrom(const IDataLoggerService2RemoveSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2RemoveSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionResponse";
  }
  protected:
  explicit IDataLoggerService2RemoveSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2StartSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionResponse) */ {
 public:
  inline IDataLoggerService2StartSessionResponse() : IDataLoggerService2StartSessionResponse(nullptr) {}
  virtual ~IDataLoggerService2StartSessionResponse();

  IDataLoggerService2StartSessionResponse(const IDataLoggerService2StartSessionResponse& from);
  IDataLoggerService2StartSessionResponse(IDataLoggerService2StartSessionResponse&& from) noexcept
    : IDataLoggerService2StartSessionResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2StartSessionResponse& operator=(const IDataLoggerService2StartSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2StartSessionResponse& operator=(IDataLoggerService2StartSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2StartSessionResponse& default_instance();

  static inline const IDataLoggerService2StartSessionResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2StartSessionResponse*>(
               &_IDataLoggerService2StartSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IDataLoggerService2StartSessionResponse& a, IDataLoggerService2StartSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2StartSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2StartSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2StartSessionResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2StartSessionResponse>(nullptr);
  }

  IDataLoggerService2StartSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2StartSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2StartSessionResponse& from);
  void MergeFrom(const IDataLoggerService2StartSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2StartSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionResponse";
  }
  protected:
  explicit IDataLoggerService2StartSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2StopSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionResponse) */ {
 public:
  inline IDataLoggerService2StopSessionResponse() : IDataLoggerService2StopSessionResponse(nullptr) {}
  virtual ~IDataLoggerService2StopSessionResponse();

  IDataLoggerService2StopSessionResponse(const IDataLoggerService2StopSessionResponse& from);
  IDataLoggerService2StopSessionResponse(IDataLoggerService2StopSessionResponse&& from) noexcept
    : IDataLoggerService2StopSessionResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2StopSessionResponse& operator=(const IDataLoggerService2StopSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2StopSessionResponse& operator=(IDataLoggerService2StopSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2StopSessionResponse& default_instance();

  static inline const IDataLoggerService2StopSessionResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2StopSessionResponse*>(
               &_IDataLoggerService2StopSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IDataLoggerService2StopSessionResponse& a, IDataLoggerService2StopSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2StopSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2StopSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2StopSessionResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2StopSessionResponse>(nullptr);
  }

  IDataLoggerService2StopSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2StopSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2StopSessionResponse& from);
  void MergeFrom(const IDataLoggerService2StopSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2StopSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionResponse";
  }
  protected:
  explicit IDataLoggerService2StopSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2ConfigureSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionResponse) */ {
 public:
  inline IDataLoggerService2ConfigureSessionResponse() : IDataLoggerService2ConfigureSessionResponse(nullptr) {}
  virtual ~IDataLoggerService2ConfigureSessionResponse();

  IDataLoggerService2ConfigureSessionResponse(const IDataLoggerService2ConfigureSessionResponse& from);
  IDataLoggerService2ConfigureSessionResponse(IDataLoggerService2ConfigureSessionResponse&& from) noexcept
    : IDataLoggerService2ConfigureSessionResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2ConfigureSessionResponse& operator=(const IDataLoggerService2ConfigureSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2ConfigureSessionResponse& operator=(IDataLoggerService2ConfigureSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2ConfigureSessionResponse& default_instance();

  static inline const IDataLoggerService2ConfigureSessionResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2ConfigureSessionResponse*>(
               &_IDataLoggerService2ConfigureSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IDataLoggerService2ConfigureSessionResponse& a, IDataLoggerService2ConfigureSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2ConfigureSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2ConfigureSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2ConfigureSessionResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2ConfigureSessionResponse>(nullptr);
  }

  IDataLoggerService2ConfigureSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2ConfigureSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2ConfigureSessionResponse& from);
  void MergeFrom(const IDataLoggerService2ConfigureSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2ConfigureSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionResponse";
  }
  protected:
  explicit IDataLoggerService2ConfigureSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetSessionConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse) */ {
 public:
  inline IDataLoggerService2GetSessionConfigurationResponse() : IDataLoggerService2GetSessionConfigurationResponse(nullptr) {}
  virtual ~IDataLoggerService2GetSessionConfigurationResponse();

  IDataLoggerService2GetSessionConfigurationResponse(const IDataLoggerService2GetSessionConfigurationResponse& from);
  IDataLoggerService2GetSessionConfigurationResponse(IDataLoggerService2GetSessionConfigurationResponse&& from) noexcept
    : IDataLoggerService2GetSessionConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetSessionConfigurationResponse& operator=(const IDataLoggerService2GetSessionConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetSessionConfigurationResponse& operator=(IDataLoggerService2GetSessionConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetSessionConfigurationResponse& default_instance();

  static inline const IDataLoggerService2GetSessionConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetSessionConfigurationResponse*>(
               &_IDataLoggerService2GetSessionConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(IDataLoggerService2GetSessionConfigurationResponse& a, IDataLoggerService2GetSessionConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetSessionConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetSessionConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetSessionConfigurationResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionConfigurationResponse>(nullptr);
  }

  IDataLoggerService2GetSessionConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetSessionConfigurationResponse& from);
  void MergeFrom(const IDataLoggerService2GetSessionConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetSessionConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse";
  }
  protected:
  explicit IDataLoggerService2GetSessionConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kReturnValueFieldNumber = 1,
    kIsPersistentFieldNumber = 3,
  };
  // repeated .Arp.Services.DataLogger.Services.Grpc.SessionProperty properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >*
      mutable_properties();
  private:
  const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& _internal_properties(int index) const;
  ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* _internal_add_properties();
  public:
  const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& properties(int index) const;
  ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >&
      properties() const;

  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // bool isPersistent = 3;
  void clear_ispersistent();
  bool ispersistent() const;
  void set_ispersistent(bool value);
  private:
  bool _internal_ispersistent() const;
  void _internal_set_ispersistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty > properties_;
  int _returnvalue_;
  bool ispersistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetSessionStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateResponse) */ {
 public:
  inline IDataLoggerService2GetSessionStateResponse() : IDataLoggerService2GetSessionStateResponse(nullptr) {}
  virtual ~IDataLoggerService2GetSessionStateResponse();

  IDataLoggerService2GetSessionStateResponse(const IDataLoggerService2GetSessionStateResponse& from);
  IDataLoggerService2GetSessionStateResponse(IDataLoggerService2GetSessionStateResponse&& from) noexcept
    : IDataLoggerService2GetSessionStateResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetSessionStateResponse& operator=(const IDataLoggerService2GetSessionStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetSessionStateResponse& operator=(IDataLoggerService2GetSessionStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetSessionStateResponse& default_instance();

  static inline const IDataLoggerService2GetSessionStateResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetSessionStateResponse*>(
               &_IDataLoggerService2GetSessionStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(IDataLoggerService2GetSessionStateResponse& a, IDataLoggerService2GetSessionStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetSessionStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetSessionStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetSessionStateResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionStateResponse>(nullptr);
  }

  IDataLoggerService2GetSessionStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetSessionStateResponse& from);
  void MergeFrom(const IDataLoggerService2GetSessionStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetSessionStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateResponse";
  }
  protected:
  explicit IDataLoggerService2GetSessionStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // .Arp.Services.DataLogger.Services.Grpc.SessionState state = 2;
  void clear_state();
  ::Arp::Services::DataLogger::Services::Grpc::SessionState state() const;
  void set_state(::Arp::Services::DataLogger::Services::Grpc::SessionState value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::SessionState _internal_state() const;
  void _internal_set_state(::Arp::Services::DataLogger::Services::Grpc::SessionState value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2SetVariablesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse) */ {
 public:
  inline IDataLoggerService2SetVariablesResponse() : IDataLoggerService2SetVariablesResponse(nullptr) {}
  virtual ~IDataLoggerService2SetVariablesResponse();

  IDataLoggerService2SetVariablesResponse(const IDataLoggerService2SetVariablesResponse& from);
  IDataLoggerService2SetVariablesResponse(IDataLoggerService2SetVariablesResponse&& from) noexcept
    : IDataLoggerService2SetVariablesResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2SetVariablesResponse& operator=(const IDataLoggerService2SetVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2SetVariablesResponse& operator=(IDataLoggerService2SetVariablesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2SetVariablesResponse& default_instance();

  static inline const IDataLoggerService2SetVariablesResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2SetVariablesResponse*>(
               &_IDataLoggerService2SetVariablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(IDataLoggerService2SetVariablesResponse& a, IDataLoggerService2SetVariablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2SetVariablesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2SetVariablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2SetVariablesResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2SetVariablesResponse>(nullptr);
  }

  IDataLoggerService2SetVariablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2SetVariablesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2SetVariablesResponse& from);
  void MergeFrom(const IDataLoggerService2SetVariablesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2SetVariablesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse";
  }
  protected:
  explicit IDataLoggerService2SetVariablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue(int index) const;
  void _internal_add__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable__returnvalue();
  public:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue(int index) const;
  void set__returnvalue(int index, ::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  void add__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _returnvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable__returnvalue();

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> _returnvalue_;
  mutable std::atomic<int> __returnvalue_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetLoggedVariablesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse) */ {
 public:
  inline IDataLoggerService2GetLoggedVariablesResponse() : IDataLoggerService2GetLoggedVariablesResponse(nullptr) {}
  virtual ~IDataLoggerService2GetLoggedVariablesResponse();

  IDataLoggerService2GetLoggedVariablesResponse(const IDataLoggerService2GetLoggedVariablesResponse& from);
  IDataLoggerService2GetLoggedVariablesResponse(IDataLoggerService2GetLoggedVariablesResponse&& from) noexcept
    : IDataLoggerService2GetLoggedVariablesResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetLoggedVariablesResponse& operator=(const IDataLoggerService2GetLoggedVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetLoggedVariablesResponse& operator=(IDataLoggerService2GetLoggedVariablesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetLoggedVariablesResponse& default_instance();

  static inline const IDataLoggerService2GetLoggedVariablesResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetLoggedVariablesResponse*>(
               &_IDataLoggerService2GetLoggedVariablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(IDataLoggerService2GetLoggedVariablesResponse& a, IDataLoggerService2GetLoggedVariablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetLoggedVariablesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetLoggedVariablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetLoggedVariablesResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetLoggedVariablesResponse>(nullptr);
  }

  IDataLoggerService2GetLoggedVariablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetLoggedVariablesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetLoggedVariablesResponse& from);
  void MergeFrom(const IDataLoggerService2GetLoggedVariablesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetLoggedVariablesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse";
  }
  protected:
  explicit IDataLoggerService2GetLoggedVariablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Plc.Gds.Services.Grpc.VariableInfo infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::Arp::Plc::Gds::Services::Grpc::VariableInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::VariableInfo >*
      mutable_infos();
  private:
  const ::Arp::Plc::Gds::Services::Grpc::VariableInfo& _internal_infos(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::VariableInfo* _internal_add_infos();
  public:
  const ::Arp::Plc::Gds::Services::Grpc::VariableInfo& infos(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::VariableInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::VariableInfo >&
      infos() const;

  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::VariableInfo > infos_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2ReadVariablesDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse) */ {
 public:
  inline IDataLoggerService2ReadVariablesDataResponse() : IDataLoggerService2ReadVariablesDataResponse(nullptr) {}
  virtual ~IDataLoggerService2ReadVariablesDataResponse();

  IDataLoggerService2ReadVariablesDataResponse(const IDataLoggerService2ReadVariablesDataResponse& from);
  IDataLoggerService2ReadVariablesDataResponse(IDataLoggerService2ReadVariablesDataResponse&& from) noexcept
    : IDataLoggerService2ReadVariablesDataResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2ReadVariablesDataResponse& operator=(const IDataLoggerService2ReadVariablesDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2ReadVariablesDataResponse& operator=(IDataLoggerService2ReadVariablesDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2ReadVariablesDataResponse& default_instance();

  static inline const IDataLoggerService2ReadVariablesDataResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2ReadVariablesDataResponse*>(
               &_IDataLoggerService2ReadVariablesDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(IDataLoggerService2ReadVariablesDataResponse& a, IDataLoggerService2ReadVariablesDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2ReadVariablesDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2ReadVariablesDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2ReadVariablesDataResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2ReadVariablesDataResponse>(nullptr);
  }

  IDataLoggerService2ReadVariablesDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2ReadVariablesDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2ReadVariablesDataResponse& from);
  void MergeFrom(const IDataLoggerService2ReadVariablesDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2ReadVariablesDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse";
  }
  protected:
  explicit IDataLoggerService2ReadVariablesDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Type.Grpc.ObjectType values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Arp::Type::Grpc::ObjectType* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >*
      mutable_values();
  private:
  const ::Arp::Type::Grpc::ObjectType& _internal_values(int index) const;
  ::Arp::Type::Grpc::ObjectType* _internal_add_values();
  public:
  const ::Arp::Type::Grpc::ObjectType& values(int index) const;
  ::Arp::Type::Grpc::ObjectType* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >&
      values() const;

  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType > values_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetRotatedFileNamesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse) */ {
 public:
  inline IDataLoggerService2GetRotatedFileNamesResponse() : IDataLoggerService2GetRotatedFileNamesResponse(nullptr) {}
  virtual ~IDataLoggerService2GetRotatedFileNamesResponse();

  IDataLoggerService2GetRotatedFileNamesResponse(const IDataLoggerService2GetRotatedFileNamesResponse& from);
  IDataLoggerService2GetRotatedFileNamesResponse(IDataLoggerService2GetRotatedFileNamesResponse&& from) noexcept
    : IDataLoggerService2GetRotatedFileNamesResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetRotatedFileNamesResponse& operator=(const IDataLoggerService2GetRotatedFileNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetRotatedFileNamesResponse& operator=(IDataLoggerService2GetRotatedFileNamesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetRotatedFileNamesResponse& default_instance();

  static inline const IDataLoggerService2GetRotatedFileNamesResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetRotatedFileNamesResponse*>(
               &_IDataLoggerService2GetRotatedFileNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(IDataLoggerService2GetRotatedFileNamesResponse& a, IDataLoggerService2GetRotatedFileNamesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetRotatedFileNamesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetRotatedFileNamesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetRotatedFileNamesResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetRotatedFileNamesResponse>(nullptr);
  }

  IDataLoggerService2GetRotatedFileNamesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetRotatedFileNamesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetRotatedFileNamesResponse& from);
  void MergeFrom(const IDataLoggerService2GetRotatedFileNamesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetRotatedFileNamesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse";
  }
  protected:
  explicit IDataLoggerService2GetRotatedFileNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenamesFieldNumber = 2,
    kReturnValueFieldNumber = 1,
  };
  // repeated string filenames = 2;
  int filenames_size() const;
  private:
  int _internal_filenames_size() const;
  public:
  void clear_filenames();
  const std::string& filenames(int index) const;
  std::string* mutable_filenames(int index);
  void set_filenames(int index, const std::string& value);
  void set_filenames(int index, std::string&& value);
  void set_filenames(int index, const char* value);
  void set_filenames(int index, const char* value, size_t size);
  std::string* add_filenames();
  void add_filenames(const std::string& value);
  void add_filenames(std::string&& value);
  void add_filenames(const char* value);
  void add_filenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filenames();
  private:
  const std::string& _internal_filenames(int index) const;
  std::string* _internal_add_filenames();
  public:

  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filenames_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2GetSessionNamesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse) */ {
 public:
  inline IDataLoggerService2GetSessionNamesResponse() : IDataLoggerService2GetSessionNamesResponse(nullptr) {}
  virtual ~IDataLoggerService2GetSessionNamesResponse();

  IDataLoggerService2GetSessionNamesResponse(const IDataLoggerService2GetSessionNamesResponse& from);
  IDataLoggerService2GetSessionNamesResponse(IDataLoggerService2GetSessionNamesResponse&& from) noexcept
    : IDataLoggerService2GetSessionNamesResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2GetSessionNamesResponse& operator=(const IDataLoggerService2GetSessionNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2GetSessionNamesResponse& operator=(IDataLoggerService2GetSessionNamesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2GetSessionNamesResponse& default_instance();

  static inline const IDataLoggerService2GetSessionNamesResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2GetSessionNamesResponse*>(
               &_IDataLoggerService2GetSessionNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(IDataLoggerService2GetSessionNamesResponse& a, IDataLoggerService2GetSessionNamesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2GetSessionNamesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2GetSessionNamesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2GetSessionNamesResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionNamesResponse>(nullptr);
  }

  IDataLoggerService2GetSessionNamesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2GetSessionNamesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2GetSessionNamesResponse& from);
  void MergeFrom(const IDataLoggerService2GetSessionNamesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2GetSessionNamesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse";
  }
  protected:
  explicit IDataLoggerService2GetSessionNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated string _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  const std::string& _returnvalue(int index) const;
  std::string* mutable__returnvalue(int index);
  void set__returnvalue(int index, const std::string& value);
  void set__returnvalue(int index, std::string&& value);
  void set__returnvalue(int index, const char* value);
  void set__returnvalue(int index, const char* value, size_t size);
  std::string* add__returnvalue();
  void add__returnvalue(const std::string& value);
  void add__returnvalue(std::string&& value);
  void add__returnvalue(const char* value);
  void add__returnvalue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _returnvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable__returnvalue();
  private:
  const std::string& _internal__returnvalue(int index) const;
  std::string* _internal_add__returnvalue();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// -------------------------------------------------------------------

class IDataLoggerService2SetTriggerConditionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionResponse) */ {
 public:
  inline IDataLoggerService2SetTriggerConditionResponse() : IDataLoggerService2SetTriggerConditionResponse(nullptr) {}
  virtual ~IDataLoggerService2SetTriggerConditionResponse();

  IDataLoggerService2SetTriggerConditionResponse(const IDataLoggerService2SetTriggerConditionResponse& from);
  IDataLoggerService2SetTriggerConditionResponse(IDataLoggerService2SetTriggerConditionResponse&& from) noexcept
    : IDataLoggerService2SetTriggerConditionResponse() {
    *this = ::std::move(from);
  }

  inline IDataLoggerService2SetTriggerConditionResponse& operator=(const IDataLoggerService2SetTriggerConditionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataLoggerService2SetTriggerConditionResponse& operator=(IDataLoggerService2SetTriggerConditionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataLoggerService2SetTriggerConditionResponse& default_instance();

  static inline const IDataLoggerService2SetTriggerConditionResponse* internal_default_instance() {
    return reinterpret_cast<const IDataLoggerService2SetTriggerConditionResponse*>(
               &_IDataLoggerService2SetTriggerConditionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(IDataLoggerService2SetTriggerConditionResponse& a, IDataLoggerService2SetTriggerConditionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataLoggerService2SetTriggerConditionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataLoggerService2SetTriggerConditionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataLoggerService2SetTriggerConditionResponse* New() const final {
    return CreateMaybeMessage<IDataLoggerService2SetTriggerConditionResponse>(nullptr);
  }

  IDataLoggerService2SetTriggerConditionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataLoggerService2SetTriggerConditionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataLoggerService2SetTriggerConditionResponse& from);
  void MergeFrom(const IDataLoggerService2SetTriggerConditionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataLoggerService2SetTriggerConditionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionResponse";
  }
  protected:
  explicit IDataLoggerService2SetTriggerConditionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataLoggerService2_2eproto);
    return ::descriptor_table_IDataLoggerService2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _returnvalue() const;
  void set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  private:
  ::Arp::Services::DataLogger::Services::Grpc::ErrorCode _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataLoggerService2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IDataLoggerService2CreateSessionRequest

// string sessionName = 1;
inline void IDataLoggerService2CreateSessionRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2CreateSessionRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2CreateSessionRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2CreateSessionRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2CreateSessionRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2CreateSessionRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2CreateSessionRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
}
inline void IDataLoggerService2CreateSessionRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
}
inline void IDataLoggerService2CreateSessionRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2CreateSessionRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2CreateSessionRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2CreateSessionRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.sessionName)
}

// bool persistent = 2;
inline void IDataLoggerService2CreateSessionRequest::clear_persistent() {
  persistent_ = false;
}
inline bool IDataLoggerService2CreateSessionRequest::_internal_persistent() const {
  return persistent_;
}
inline bool IDataLoggerService2CreateSessionRequest::persistent() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.persistent)
  return _internal_persistent();
}
inline void IDataLoggerService2CreateSessionRequest::_internal_set_persistent(bool value) {
  
  persistent_ = value;
}
inline void IDataLoggerService2CreateSessionRequest::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionRequest.persistent)
}

// -------------------------------------------------------------------

// IDataLoggerService2RemoveSessionRequest

// string sessionName = 1;
inline void IDataLoggerService2RemoveSessionRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2RemoveSessionRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2RemoveSessionRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2RemoveSessionRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2RemoveSessionRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2RemoveSessionRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2RemoveSessionRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
}
inline void IDataLoggerService2RemoveSessionRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
}
inline void IDataLoggerService2RemoveSessionRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2RemoveSessionRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2RemoveSessionRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2RemoveSessionRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionRequest.sessionName)
}

// -------------------------------------------------------------------

// IDataLoggerService2StartSessionRequest

// string sessionName = 1;
inline void IDataLoggerService2StartSessionRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2StartSessionRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2StartSessionRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2StartSessionRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2StartSessionRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2StartSessionRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2StartSessionRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
}
inline void IDataLoggerService2StartSessionRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
}
inline void IDataLoggerService2StartSessionRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2StartSessionRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2StartSessionRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2StartSessionRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionRequest.sessionName)
}

// -------------------------------------------------------------------

// IDataLoggerService2StopSessionRequest

// string sessionName = 1;
inline void IDataLoggerService2StopSessionRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2StopSessionRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2StopSessionRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2StopSessionRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2StopSessionRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2StopSessionRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2StopSessionRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
}
inline void IDataLoggerService2StopSessionRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
}
inline void IDataLoggerService2StopSessionRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
}
inline std::string* IDataLoggerService2StopSessionRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2StopSessionRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2StopSessionRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionRequest.sessionName)
}

// -------------------------------------------------------------------

// IDataLoggerService2ConfigureSessionRequest

// string sessionname = 1;
inline void IDataLoggerService2ConfigureSessionRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2ConfigureSessionRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
  return _internal_sessionname();
}
inline void IDataLoggerService2ConfigureSessionRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
}
inline std::string* IDataLoggerService2ConfigureSessionRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2ConfigureSessionRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2ConfigureSessionRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2ConfigureSessionRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
}
inline void IDataLoggerService2ConfigureSessionRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
}
inline void IDataLoggerService2ConfigureSessionRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
}
inline std::string* IDataLoggerService2ConfigureSessionRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2ConfigureSessionRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2ConfigureSessionRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.sessionname)
}

// repeated .Arp.Services.DataLogger.Services.Grpc.SessionProperty properties = 2;
inline int IDataLoggerService2ConfigureSessionRequest::_internal_properties_size() const {
  return properties_.size();
}
inline int IDataLoggerService2ConfigureSessionRequest::properties_size() const {
  return _internal_properties_size();
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* IDataLoggerService2ConfigureSessionRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >*
IDataLoggerService2ConfigureSessionRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.properties)
  return &properties_;
}
inline const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& IDataLoggerService2ConfigureSessionRequest::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& IDataLoggerService2ConfigureSessionRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.properties)
  return _internal_properties(index);
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* IDataLoggerService2ConfigureSessionRequest::_internal_add_properties() {
  return properties_.Add();
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* IDataLoggerService2ConfigureSessionRequest::add_properties() {
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >&
IDataLoggerService2ConfigureSessionRequest::properties() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionRequest.properties)
  return properties_;
}

// -------------------------------------------------------------------

// IDataLoggerService2GetSessionConfigurationRequest

// string sessionname = 1;
inline void IDataLoggerService2GetSessionConfigurationRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2GetSessionConfigurationRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
  return _internal_sessionname();
}
inline void IDataLoggerService2GetSessionConfigurationRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
}
inline std::string* IDataLoggerService2GetSessionConfigurationRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2GetSessionConfigurationRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2GetSessionConfigurationRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2GetSessionConfigurationRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
}
inline void IDataLoggerService2GetSessionConfigurationRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
}
inline void IDataLoggerService2GetSessionConfigurationRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
}
inline std::string* IDataLoggerService2GetSessionConfigurationRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2GetSessionConfigurationRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2GetSessionConfigurationRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationRequest.sessionname)
}

// -------------------------------------------------------------------

// IDataLoggerService2GetSessionStateRequest

// string sessionName = 1;
inline void IDataLoggerService2GetSessionStateRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2GetSessionStateRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2GetSessionStateRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
}
inline std::string* IDataLoggerService2GetSessionStateRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2GetSessionStateRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2GetSessionStateRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2GetSessionStateRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
}
inline void IDataLoggerService2GetSessionStateRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
}
inline void IDataLoggerService2GetSessionStateRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
}
inline std::string* IDataLoggerService2GetSessionStateRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2GetSessionStateRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2GetSessionStateRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateRequest.sessionName)
}

// -------------------------------------------------------------------

// IDataLoggerService2SetVariablesRequest

// string sessionName = 1;
inline void IDataLoggerService2SetVariablesRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2SetVariablesRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2SetVariablesRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
}
inline std::string* IDataLoggerService2SetVariablesRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2SetVariablesRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2SetVariablesRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2SetVariablesRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
}
inline void IDataLoggerService2SetVariablesRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
}
inline void IDataLoggerService2SetVariablesRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
}
inline std::string* IDataLoggerService2SetVariablesRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2SetVariablesRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2SetVariablesRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.sessionName)
}

// repeated string variableNames = 2;
inline int IDataLoggerService2SetVariablesRequest::_internal_variablenames_size() const {
  return variablenames_.size();
}
inline int IDataLoggerService2SetVariablesRequest::variablenames_size() const {
  return _internal_variablenames_size();
}
inline void IDataLoggerService2SetVariablesRequest::clear_variablenames() {
  variablenames_.Clear();
}
inline std::string* IDataLoggerService2SetVariablesRequest::add_variablenames() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
  return _internal_add_variablenames();
}
inline const std::string& IDataLoggerService2SetVariablesRequest::_internal_variablenames(int index) const {
  return variablenames_.Get(index);
}
inline const std::string& IDataLoggerService2SetVariablesRequest::variablenames(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
  return _internal_variablenames(index);
}
inline std::string* IDataLoggerService2SetVariablesRequest::mutable_variablenames(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
  return variablenames_.Mutable(index);
}
inline void IDataLoggerService2SetVariablesRequest::set_variablenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
  variablenames_.Mutable(index)->assign(value);
}
inline void IDataLoggerService2SetVariablesRequest::set_variablenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
  variablenames_.Mutable(index)->assign(std::move(value));
}
inline void IDataLoggerService2SetVariablesRequest::set_variablenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  variablenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
}
inline void IDataLoggerService2SetVariablesRequest::set_variablenames(int index, const char* value, size_t size) {
  variablenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
}
inline std::string* IDataLoggerService2SetVariablesRequest::_internal_add_variablenames() {
  return variablenames_.Add();
}
inline void IDataLoggerService2SetVariablesRequest::add_variablenames(const std::string& value) {
  variablenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
}
inline void IDataLoggerService2SetVariablesRequest::add_variablenames(std::string&& value) {
  variablenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
}
inline void IDataLoggerService2SetVariablesRequest::add_variablenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  variablenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
}
inline void IDataLoggerService2SetVariablesRequest::add_variablenames(const char* value, size_t size) {
  variablenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDataLoggerService2SetVariablesRequest::variablenames() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
  return variablenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDataLoggerService2SetVariablesRequest::mutable_variablenames() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesRequest.variableNames)
  return &variablenames_;
}

// -------------------------------------------------------------------

// IDataLoggerService2GetLoggedVariablesRequest

// string sessionName = 1;
inline void IDataLoggerService2GetLoggedVariablesRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2GetLoggedVariablesRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2GetLoggedVariablesRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
}
inline std::string* IDataLoggerService2GetLoggedVariablesRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2GetLoggedVariablesRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2GetLoggedVariablesRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2GetLoggedVariablesRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
}
inline void IDataLoggerService2GetLoggedVariablesRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
}
inline void IDataLoggerService2GetLoggedVariablesRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
}
inline std::string* IDataLoggerService2GetLoggedVariablesRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2GetLoggedVariablesRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2GetLoggedVariablesRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesRequest.sessionName)
}

// -------------------------------------------------------------------

// IDataLoggerService2ReadVariablesDataRequest

// string sessionName = 1;
inline void IDataLoggerService2ReadVariablesDataRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2ReadVariablesDataRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
}
inline std::string* IDataLoggerService2ReadVariablesDataRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2ReadVariablesDataRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2ReadVariablesDataRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
}
inline std::string* IDataLoggerService2ReadVariablesDataRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2ReadVariablesDataRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.sessionName)
}

// .Arp.Grpc.DateTime startTime = 2;
inline bool IDataLoggerService2ReadVariablesDataRequest::_internal_has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline bool IDataLoggerService2ReadVariablesDataRequest::has_starttime() const {
  return _internal_has_starttime();
}
inline const ::Arp::Grpc::DateTime& IDataLoggerService2ReadVariablesDataRequest::_internal_starttime() const {
  const ::Arp::Grpc::DateTime* p = starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Grpc::DateTime&>(
      ::Arp::Grpc::_DateTime_default_instance_);
}
inline const ::Arp::Grpc::DateTime& IDataLoggerService2ReadVariablesDataRequest::starttime() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.startTime)
  return _internal_starttime();
}
inline void IDataLoggerService2ReadVariablesDataRequest::unsafe_arena_set_allocated_starttime(
    ::Arp::Grpc::DateTime* starttime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.startTime)
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::release_starttime() {
  
  ::Arp::Grpc::DateTime* temp = starttime_;
  starttime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.startTime)
  
  ::Arp::Grpc::DateTime* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::_internal_mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Grpc::DateTime>(GetArena());
    starttime_ = p;
  }
  return starttime_;
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.startTime)
  return _internal_mutable_starttime();
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_allocated_starttime(::Arp::Grpc::DateTime* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime)->GetArena();
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.startTime)
}

// .Arp.Grpc.DateTime endTime = 3;
inline bool IDataLoggerService2ReadVariablesDataRequest::_internal_has_endtime() const {
  return this != internal_default_instance() && endtime_ != nullptr;
}
inline bool IDataLoggerService2ReadVariablesDataRequest::has_endtime() const {
  return _internal_has_endtime();
}
inline const ::Arp::Grpc::DateTime& IDataLoggerService2ReadVariablesDataRequest::_internal_endtime() const {
  const ::Arp::Grpc::DateTime* p = endtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Grpc::DateTime&>(
      ::Arp::Grpc::_DateTime_default_instance_);
}
inline const ::Arp::Grpc::DateTime& IDataLoggerService2ReadVariablesDataRequest::endtime() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.endTime)
  return _internal_endtime();
}
inline void IDataLoggerService2ReadVariablesDataRequest::unsafe_arena_set_allocated_endtime(
    ::Arp::Grpc::DateTime* endtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtime_);
  }
  endtime_ = endtime;
  if (endtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.endTime)
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::release_endtime() {
  
  ::Arp::Grpc::DateTime* temp = endtime_;
  endtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.endTime)
  
  ::Arp::Grpc::DateTime* temp = endtime_;
  endtime_ = nullptr;
  return temp;
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::_internal_mutable_endtime() {
  
  if (endtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Grpc::DateTime>(GetArena());
    endtime_ = p;
  }
  return endtime_;
}
inline ::Arp::Grpc::DateTime* IDataLoggerService2ReadVariablesDataRequest::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.endTime)
  return _internal_mutable_endtime();
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_allocated_endtime(::Arp::Grpc::DateTime* endtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtime_);
  }
  if (endtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtime)->GetArena();
    if (message_arena != submessage_arena) {
      endtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtime, submessage_arena);
    }
    
  } else {
    
  }
  endtime_ = endtime;
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.endTime)
}

// repeated string variableNames = 4;
inline int IDataLoggerService2ReadVariablesDataRequest::_internal_variablenames_size() const {
  return variablenames_.size();
}
inline int IDataLoggerService2ReadVariablesDataRequest::variablenames_size() const {
  return _internal_variablenames_size();
}
inline void IDataLoggerService2ReadVariablesDataRequest::clear_variablenames() {
  variablenames_.Clear();
}
inline std::string* IDataLoggerService2ReadVariablesDataRequest::add_variablenames() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
  return _internal_add_variablenames();
}
inline const std::string& IDataLoggerService2ReadVariablesDataRequest::_internal_variablenames(int index) const {
  return variablenames_.Get(index);
}
inline const std::string& IDataLoggerService2ReadVariablesDataRequest::variablenames(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
  return _internal_variablenames(index);
}
inline std::string* IDataLoggerService2ReadVariablesDataRequest::mutable_variablenames(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
  return variablenames_.Mutable(index);
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_variablenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
  variablenames_.Mutable(index)->assign(value);
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_variablenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
  variablenames_.Mutable(index)->assign(std::move(value));
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_variablenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  variablenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
}
inline void IDataLoggerService2ReadVariablesDataRequest::set_variablenames(int index, const char* value, size_t size) {
  variablenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
}
inline std::string* IDataLoggerService2ReadVariablesDataRequest::_internal_add_variablenames() {
  return variablenames_.Add();
}
inline void IDataLoggerService2ReadVariablesDataRequest::add_variablenames(const std::string& value) {
  variablenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
}
inline void IDataLoggerService2ReadVariablesDataRequest::add_variablenames(std::string&& value) {
  variablenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
}
inline void IDataLoggerService2ReadVariablesDataRequest::add_variablenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  variablenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
}
inline void IDataLoggerService2ReadVariablesDataRequest::add_variablenames(const char* value, size_t size) {
  variablenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDataLoggerService2ReadVariablesDataRequest::variablenames() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
  return variablenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDataLoggerService2ReadVariablesDataRequest::mutable_variablenames() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataRequest.variableNames)
  return &variablenames_;
}

// -------------------------------------------------------------------

// IDataLoggerService2GetRotatedFileNamesRequest

// string sessionname = 1;
inline void IDataLoggerService2GetRotatedFileNamesRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2GetRotatedFileNamesRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
  return _internal_sessionname();
}
inline void IDataLoggerService2GetRotatedFileNamesRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
}
inline std::string* IDataLoggerService2GetRotatedFileNamesRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2GetRotatedFileNamesRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2GetRotatedFileNamesRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2GetRotatedFileNamesRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
}
inline void IDataLoggerService2GetRotatedFileNamesRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
}
inline void IDataLoggerService2GetRotatedFileNamesRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
}
inline std::string* IDataLoggerService2GetRotatedFileNamesRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2GetRotatedFileNamesRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2GetRotatedFileNamesRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesRequest.sessionname)
}

// -------------------------------------------------------------------

// IDataLoggerService2GetSessionNamesRequest

// string variablename = 1;
inline void IDataLoggerService2GetSessionNamesRequest::clear_variablename() {
  variablename_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2GetSessionNamesRequest::variablename() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
  return _internal_variablename();
}
inline void IDataLoggerService2GetSessionNamesRequest::set_variablename(const std::string& value) {
  _internal_set_variablename(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
}
inline std::string* IDataLoggerService2GetSessionNamesRequest::mutable_variablename() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
  return _internal_mutable_variablename();
}
inline const std::string& IDataLoggerService2GetSessionNamesRequest::_internal_variablename() const {
  return variablename_.Get();
}
inline void IDataLoggerService2GetSessionNamesRequest::_internal_set_variablename(const std::string& value) {
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2GetSessionNamesRequest::set_variablename(std::string&& value) {
  
  variablename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
}
inline void IDataLoggerService2GetSessionNamesRequest::set_variablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
}
inline void IDataLoggerService2GetSessionNamesRequest::set_variablename(const char* value,
    size_t size) {
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
}
inline std::string* IDataLoggerService2GetSessionNamesRequest::_internal_mutable_variablename() {
  
  return variablename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2GetSessionNamesRequest::release_variablename() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
  return variablename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2GetSessionNamesRequest::set_allocated_variablename(std::string* variablename) {
  if (variablename != nullptr) {
    
  } else {
    
  }
  variablename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variablename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesRequest.variablename)
}

// -------------------------------------------------------------------

// IDataLoggerService2SetTriggerConditionRequest

// string sessionName = 1;
inline void IDataLoggerService2SetTriggerConditionRequest::clear_sessionname() {
  sessionname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2SetTriggerConditionRequest::sessionname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
  return _internal_sessionname();
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_sessionname(const std::string& value) {
  _internal_set_sessionname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
}
inline std::string* IDataLoggerService2SetTriggerConditionRequest::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
  return _internal_mutable_sessionname();
}
inline const std::string& IDataLoggerService2SetTriggerConditionRequest::_internal_sessionname() const {
  return sessionname_.Get();
}
inline void IDataLoggerService2SetTriggerConditionRequest::_internal_set_sessionname(const std::string& value) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_sessionname(std::string&& value) {
  
  sessionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_sessionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_sessionname(const char* value,
    size_t size) {
  
  sessionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
}
inline std::string* IDataLoggerService2SetTriggerConditionRequest::_internal_mutable_sessionname() {
  
  return sessionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2SetTriggerConditionRequest::release_sessionname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
  return sessionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_allocated_sessionname(std::string* sessionname) {
  if (sessionname != nullptr) {
    
  } else {
    
  }
  sessionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.sessionName)
}

// string taskName = 2;
inline void IDataLoggerService2SetTriggerConditionRequest::clear_taskname() {
  taskname_.ClearToEmpty();
}
inline const std::string& IDataLoggerService2SetTriggerConditionRequest::taskname() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
  return _internal_taskname();
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_taskname(const std::string& value) {
  _internal_set_taskname(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
}
inline std::string* IDataLoggerService2SetTriggerConditionRequest::mutable_taskname() {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
  return _internal_mutable_taskname();
}
inline const std::string& IDataLoggerService2SetTriggerConditionRequest::_internal_taskname() const {
  return taskname_.Get();
}
inline void IDataLoggerService2SetTriggerConditionRequest::_internal_set_taskname(const std::string& value) {
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_taskname(std::string&& value) {
  
  taskname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_taskname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_taskname(const char* value,
    size_t size) {
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
}
inline std::string* IDataLoggerService2SetTriggerConditionRequest::_internal_mutable_taskname() {
  
  return taskname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataLoggerService2SetTriggerConditionRequest::release_taskname() {
  // @@protoc_insertion_point(field_release:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
  return taskname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_allocated_taskname(std::string* taskname) {
  if (taskname != nullptr) {
    
  } else {
    
  }
  taskname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.taskName)
}

// int32 preCycleCount = 3;
inline void IDataLoggerService2SetTriggerConditionRequest::clear_precyclecount() {
  precyclecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IDataLoggerService2SetTriggerConditionRequest::_internal_precyclecount() const {
  return precyclecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IDataLoggerService2SetTriggerConditionRequest::precyclecount() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.preCycleCount)
  return _internal_precyclecount();
}
inline void IDataLoggerService2SetTriggerConditionRequest::_internal_set_precyclecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  precyclecount_ = value;
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_precyclecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precyclecount(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.preCycleCount)
}

// int32 postCycleCount = 4;
inline void IDataLoggerService2SetTriggerConditionRequest::clear_postcyclecount() {
  postcyclecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IDataLoggerService2SetTriggerConditionRequest::_internal_postcyclecount() const {
  return postcyclecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IDataLoggerService2SetTriggerConditionRequest::postcyclecount() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.postCycleCount)
  return _internal_postcyclecount();
}
inline void IDataLoggerService2SetTriggerConditionRequest::_internal_set_postcyclecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  postcyclecount_ = value;
}
inline void IDataLoggerService2SetTriggerConditionRequest::set_postcyclecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_postcyclecount(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.postCycleCount)
}

// repeated .Arp.Services.DataLogger.Services.Grpc.TriggerRpnItem triggerCondition = 5;
inline int IDataLoggerService2SetTriggerConditionRequest::_internal_triggercondition_size() const {
  return triggercondition_.size();
}
inline int IDataLoggerService2SetTriggerConditionRequest::triggercondition_size() const {
  return _internal_triggercondition_size();
}
inline ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem* IDataLoggerService2SetTriggerConditionRequest::mutable_triggercondition(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.triggerCondition)
  return triggercondition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem >*
IDataLoggerService2SetTriggerConditionRequest::mutable_triggercondition() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.triggerCondition)
  return &triggercondition_;
}
inline const ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem& IDataLoggerService2SetTriggerConditionRequest::_internal_triggercondition(int index) const {
  return triggercondition_.Get(index);
}
inline const ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem& IDataLoggerService2SetTriggerConditionRequest::triggercondition(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.triggerCondition)
  return _internal_triggercondition(index);
}
inline ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem* IDataLoggerService2SetTriggerConditionRequest::_internal_add_triggercondition() {
  return triggercondition_.Add();
}
inline ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem* IDataLoggerService2SetTriggerConditionRequest::add_triggercondition() {
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.triggerCondition)
  return _internal_add_triggercondition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::TriggerRpnItem >&
IDataLoggerService2SetTriggerConditionRequest::triggercondition() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionRequest.triggerCondition)
  return triggercondition_;
}

// -------------------------------------------------------------------

// IDataLoggerService2ListSessionNamesResponse

// repeated string _ReturnValue = 1;
inline int IDataLoggerService2ListSessionNamesResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int IDataLoggerService2ListSessionNamesResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline void IDataLoggerService2ListSessionNamesResponse::clear__returnvalue() {
  _returnvalue_.Clear();
}
inline std::string* IDataLoggerService2ListSessionNamesResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const std::string& IDataLoggerService2ListSessionNamesResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const std::string& IDataLoggerService2ListSessionNamesResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline std::string* IDataLoggerService2ListSessionNamesResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline void IDataLoggerService2ListSessionNamesResponse::set__returnvalue(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(value);
}
inline void IDataLoggerService2ListSessionNamesResponse::set__returnvalue(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(std::move(value));
}
inline void IDataLoggerService2ListSessionNamesResponse::set__returnvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2ListSessionNamesResponse::set__returnvalue(int index, const char* value, size_t size) {
  _returnvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
}
inline std::string* IDataLoggerService2ListSessionNamesResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline void IDataLoggerService2ListSessionNamesResponse::add__returnvalue(const std::string& value) {
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2ListSessionNamesResponse::add__returnvalue(std::string&& value) {
  _returnvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2ListSessionNamesResponse::add__returnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2ListSessionNamesResponse::add__returnvalue(const char* value, size_t size) {
  _returnvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDataLoggerService2ListSessionNamesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
  return _returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDataLoggerService2ListSessionNamesResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ListSessionNamesResponse._ReturnValue)
  return &_returnvalue_;
}

// -------------------------------------------------------------------

// IDataLoggerService2CreateSessionResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2CreateSessionResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2CreateSessionResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2CreateSessionResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2CreateSessionResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2CreateSessionResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2CreateSessionResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDataLoggerService2RemoveSessionResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2RemoveSessionResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2RemoveSessionResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2RemoveSessionResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2RemoveSessionResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2RemoveSessionResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2RemoveSessionResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDataLoggerService2StartSessionResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2StartSessionResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2StartSessionResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2StartSessionResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2StartSessionResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2StartSessionResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StartSessionResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDataLoggerService2StopSessionResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2StopSessionResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2StopSessionResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2StopSessionResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2StopSessionResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2StopSessionResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2StopSessionResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDataLoggerService2ConfigureSessionResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2ConfigureSessionResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2ConfigureSessionResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2ConfigureSessionResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2ConfigureSessionResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2ConfigureSessionResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ConfigureSessionResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDataLoggerService2GetSessionConfigurationResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2GetSessionConfigurationResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetSessionConfigurationResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetSessionConfigurationResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2GetSessionConfigurationResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2GetSessionConfigurationResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse._ReturnValue)
}

// repeated .Arp.Services.DataLogger.Services.Grpc.SessionProperty properties = 2;
inline int IDataLoggerService2GetSessionConfigurationResponse::_internal_properties_size() const {
  return properties_.size();
}
inline int IDataLoggerService2GetSessionConfigurationResponse::properties_size() const {
  return _internal_properties_size();
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* IDataLoggerService2GetSessionConfigurationResponse::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >*
IDataLoggerService2GetSessionConfigurationResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse.properties)
  return &properties_;
}
inline const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& IDataLoggerService2GetSessionConfigurationResponse::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::Arp::Services::DataLogger::Services::Grpc::SessionProperty& IDataLoggerService2GetSessionConfigurationResponse::properties(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse.properties)
  return _internal_properties(index);
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* IDataLoggerService2GetSessionConfigurationResponse::_internal_add_properties() {
  return properties_.Add();
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionProperty* IDataLoggerService2GetSessionConfigurationResponse::add_properties() {
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Services::DataLogger::Services::Grpc::SessionProperty >&
IDataLoggerService2GetSessionConfigurationResponse::properties() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse.properties)
  return properties_;
}

// bool isPersistent = 3;
inline void IDataLoggerService2GetSessionConfigurationResponse::clear_ispersistent() {
  ispersistent_ = false;
}
inline bool IDataLoggerService2GetSessionConfigurationResponse::_internal_ispersistent() const {
  return ispersistent_;
}
inline bool IDataLoggerService2GetSessionConfigurationResponse::ispersistent() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse.isPersistent)
  return _internal_ispersistent();
}
inline void IDataLoggerService2GetSessionConfigurationResponse::_internal_set_ispersistent(bool value) {
  
  ispersistent_ = value;
}
inline void IDataLoggerService2GetSessionConfigurationResponse::set_ispersistent(bool value) {
  _internal_set_ispersistent(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionConfigurationResponse.isPersistent)
}

// -------------------------------------------------------------------

// IDataLoggerService2GetSessionStateResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2GetSessionStateResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetSessionStateResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetSessionStateResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2GetSessionStateResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2GetSessionStateResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateResponse._ReturnValue)
}

// .Arp.Services.DataLogger.Services.Grpc.SessionState state = 2;
inline void IDataLoggerService2GetSessionStateResponse::clear_state() {
  state_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionState IDataLoggerService2GetSessionStateResponse::_internal_state() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::SessionState >(state_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::SessionState IDataLoggerService2GetSessionStateResponse::state() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateResponse.state)
  return _internal_state();
}
inline void IDataLoggerService2GetSessionStateResponse::_internal_set_state(::Arp::Services::DataLogger::Services::Grpc::SessionState value) {
  
  state_ = value;
}
inline void IDataLoggerService2GetSessionStateResponse::set_state(::Arp::Services::DataLogger::Services::Grpc::SessionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionStateResponse.state)
}

// -------------------------------------------------------------------

// IDataLoggerService2SetVariablesResponse

// repeated .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline int IDataLoggerService2SetVariablesResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int IDataLoggerService2SetVariablesResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline void IDataLoggerService2SetVariablesResponse::clear__returnvalue() {
  _returnvalue_.Clear();
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2SetVariablesResponse::_internal__returnvalue(int index) const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_.Get(index));
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2SetVariablesResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline void IDataLoggerService2SetVariablesResponse::set__returnvalue(int index, ::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _returnvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse._ReturnValue)
}
inline void IDataLoggerService2SetVariablesResponse::_internal_add__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _returnvalue_.Add(value);
}
inline void IDataLoggerService2SetVariablesResponse::add__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse._ReturnValue)
  _internal_add__returnvalue(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
IDataLoggerService2SetVariablesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse._ReturnValue)
  return _returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
IDataLoggerService2SetVariablesResponse::_internal_mutable__returnvalue() {
  return &_returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
IDataLoggerService2SetVariablesResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetVariablesResponse._ReturnValue)
  return _internal_mutable__returnvalue();
}

// -------------------------------------------------------------------

// IDataLoggerService2GetLoggedVariablesResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2GetLoggedVariablesResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetLoggedVariablesResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetLoggedVariablesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2GetLoggedVariablesResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2GetLoggedVariablesResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse._ReturnValue)
}

// repeated .Arp.Plc.Gds.Services.Grpc.VariableInfo infos = 2;
inline int IDataLoggerService2GetLoggedVariablesResponse::_internal_infos_size() const {
  return infos_.size();
}
inline int IDataLoggerService2GetLoggedVariablesResponse::infos_size() const {
  return _internal_infos_size();
}
inline ::Arp::Plc::Gds::Services::Grpc::VariableInfo* IDataLoggerService2GetLoggedVariablesResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::VariableInfo >*
IDataLoggerService2GetLoggedVariablesResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse.infos)
  return &infos_;
}
inline const ::Arp::Plc::Gds::Services::Grpc::VariableInfo& IDataLoggerService2GetLoggedVariablesResponse::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::Arp::Plc::Gds::Services::Grpc::VariableInfo& IDataLoggerService2GetLoggedVariablesResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse.infos)
  return _internal_infos(index);
}
inline ::Arp::Plc::Gds::Services::Grpc::VariableInfo* IDataLoggerService2GetLoggedVariablesResponse::_internal_add_infos() {
  return infos_.Add();
}
inline ::Arp::Plc::Gds::Services::Grpc::VariableInfo* IDataLoggerService2GetLoggedVariablesResponse::add_infos() {
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::VariableInfo >&
IDataLoggerService2GetLoggedVariablesResponse::infos() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetLoggedVariablesResponse.infos)
  return infos_;
}

// -------------------------------------------------------------------

// IDataLoggerService2ReadVariablesDataResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2ReadVariablesDataResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2ReadVariablesDataResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2ReadVariablesDataResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2ReadVariablesDataResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2ReadVariablesDataResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse._ReturnValue)
}

// repeated .Arp.Type.Grpc.ObjectType values = 2;
inline int IDataLoggerService2ReadVariablesDataResponse::_internal_values_size() const {
  return values_.size();
}
inline int IDataLoggerService2ReadVariablesDataResponse::values_size() const {
  return _internal_values_size();
}
inline ::Arp::Type::Grpc::ObjectType* IDataLoggerService2ReadVariablesDataResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >*
IDataLoggerService2ReadVariablesDataResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse.values)
  return &values_;
}
inline const ::Arp::Type::Grpc::ObjectType& IDataLoggerService2ReadVariablesDataResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Arp::Type::Grpc::ObjectType& IDataLoggerService2ReadVariablesDataResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse.values)
  return _internal_values(index);
}
inline ::Arp::Type::Grpc::ObjectType* IDataLoggerService2ReadVariablesDataResponse::_internal_add_values() {
  return values_.Add();
}
inline ::Arp::Type::Grpc::ObjectType* IDataLoggerService2ReadVariablesDataResponse::add_values() {
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >&
IDataLoggerService2ReadVariablesDataResponse::values() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2ReadVariablesDataResponse.values)
  return values_;
}

// -------------------------------------------------------------------

// IDataLoggerService2GetRotatedFileNamesResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2GetRotatedFileNamesResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetRotatedFileNamesResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2GetRotatedFileNamesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse._ReturnValue)
}

// repeated string filenames = 2;
inline int IDataLoggerService2GetRotatedFileNamesResponse::_internal_filenames_size() const {
  return filenames_.size();
}
inline int IDataLoggerService2GetRotatedFileNamesResponse::filenames_size() const {
  return _internal_filenames_size();
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::clear_filenames() {
  filenames_.Clear();
}
inline std::string* IDataLoggerService2GetRotatedFileNamesResponse::add_filenames() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
  return _internal_add_filenames();
}
inline const std::string& IDataLoggerService2GetRotatedFileNamesResponse::_internal_filenames(int index) const {
  return filenames_.Get(index);
}
inline const std::string& IDataLoggerService2GetRotatedFileNamesResponse::filenames(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
  return _internal_filenames(index);
}
inline std::string* IDataLoggerService2GetRotatedFileNamesResponse::mutable_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
  return filenames_.Mutable(index);
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::set_filenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
  filenames_.Mutable(index)->assign(value);
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::set_filenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
  filenames_.Mutable(index)->assign(std::move(value));
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::set_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::set_filenames(int index, const char* value, size_t size) {
  filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
}
inline std::string* IDataLoggerService2GetRotatedFileNamesResponse::_internal_add_filenames() {
  return filenames_.Add();
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::add_filenames(const std::string& value) {
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::add_filenames(std::string&& value) {
  filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::add_filenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
}
inline void IDataLoggerService2GetRotatedFileNamesResponse::add_filenames(const char* value, size_t size) {
  filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDataLoggerService2GetRotatedFileNamesResponse::filenames() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
  return filenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDataLoggerService2GetRotatedFileNamesResponse::mutable_filenames() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetRotatedFileNamesResponse.filenames)
  return &filenames_;
}

// -------------------------------------------------------------------

// IDataLoggerService2GetSessionNamesResponse

// repeated string _ReturnValue = 1;
inline int IDataLoggerService2GetSessionNamesResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int IDataLoggerService2GetSessionNamesResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline void IDataLoggerService2GetSessionNamesResponse::clear__returnvalue() {
  _returnvalue_.Clear();
}
inline std::string* IDataLoggerService2GetSessionNamesResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const std::string& IDataLoggerService2GetSessionNamesResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const std::string& IDataLoggerService2GetSessionNamesResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline std::string* IDataLoggerService2GetSessionNamesResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline void IDataLoggerService2GetSessionNamesResponse::set__returnvalue(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(value);
}
inline void IDataLoggerService2GetSessionNamesResponse::set__returnvalue(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
  _returnvalue_.Mutable(index)->assign(std::move(value));
}
inline void IDataLoggerService2GetSessionNamesResponse::set__returnvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2GetSessionNamesResponse::set__returnvalue(int index, const char* value, size_t size) {
  _returnvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
}
inline std::string* IDataLoggerService2GetSessionNamesResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline void IDataLoggerService2GetSessionNamesResponse::add__returnvalue(const std::string& value) {
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2GetSessionNamesResponse::add__returnvalue(std::string&& value) {
  _returnvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2GetSessionNamesResponse::add__returnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _returnvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
}
inline void IDataLoggerService2GetSessionNamesResponse::add__returnvalue(const char* value, size_t size) {
  _returnvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDataLoggerService2GetSessionNamesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
  return _returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDataLoggerService2GetSessionNamesResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2GetSessionNamesResponse._ReturnValue)
  return &_returnvalue_;
}

// -------------------------------------------------------------------

// IDataLoggerService2SetTriggerConditionResponse

// .Arp.Services.DataLogger.Services.Grpc.ErrorCode _ReturnValue = 1;
inline void IDataLoggerService2SetTriggerConditionResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2SetTriggerConditionResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Services::DataLogger::Services::Grpc::ErrorCode >(_returnvalue_);
}
inline ::Arp::Services::DataLogger::Services::Grpc::ErrorCode IDataLoggerService2SetTriggerConditionResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataLoggerService2SetTriggerConditionResponse::_internal_set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  
  _returnvalue_ = value;
}
inline void IDataLoggerService2SetTriggerConditionResponse::set__returnvalue(::Arp::Services::DataLogger::Services::Grpc::ErrorCode value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Services.DataLogger.Services.Grpc.IDataLoggerService2SetTriggerConditionResponse._ReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace DataLogger
}  // namespace Services
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IDataLoggerService2_2eproto
