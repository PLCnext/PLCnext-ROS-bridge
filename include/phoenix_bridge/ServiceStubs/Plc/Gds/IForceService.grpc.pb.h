// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IForceService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_IForceService_2eproto__INCLUDED
#define GRPC_IForceService_2eproto__INCLUDED

#include "IForceService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {

// *
// Service for managing and controlling force variables by the Arp GDS.
// 
// <div>
// Use {@code T:Arp.Plc.Gds.Services.IForceService} in order to force and to unforce variables.
// </div>
//
class IForceService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.Plc.Gds.Services.Grpc.IForceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Adds a new variable and value for forcing. Enables force mode.
    // / </summary>
    // / <remarks>
    // / The enabled force mode is signalized by notification and by the
    // / activated 'PlcState.Forcing'
    // / </remarks>
    // / <param name="item">
    // / Force item <see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
    // / of the variable with the full instance path and the force value.
    // / The data type of the force value must be equal with the data type
    // / of the target variable.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
    // / </returns>
    virtual ::grpc::Status AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>> AsyncAddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>>(AsyncAddVariableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>> PrepareAsyncAddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>>(PrepareAsyncAddVariableRaw(context, request, cq));
    }
    // / <summary>
    // / Resets forced variable. Disables force mode after force list is empty.
    // / </summary>
    // / <param name="variableName">
    // / Instance path of the variable.
    // / </param>
    virtual ::grpc::Status RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRemoveVariableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRemoveVariableRaw(context, request, cq));
    }
    // / <summary>
    // / Gets a list of all forced variables.
    // / </summary>
    // / <returns>
    // / Returns a list with all existing <see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
    // / </returns>
    virtual ::grpc::Status GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>> AsyncGetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>>(AsyncGetVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>> PrepareAsyncGetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>>(PrepareAsyncGetVariablesRaw(context, request, cq));
    }
    // / <summary>
    // / Resets the force list. Disables force mode.
    // / </summary>
    // / <remarks>
    // / The disabled force mode is signalized by notification and by the
    // / deactivated PlcState.
    // / </remarks>
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReset(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReset(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncResetRaw(context, request, cq));
    }
    // / <summary>
    // / Tests whether variable is forcable.
    // / </summary>
    // / <remarks>
    // / The variable has to meet the following requirements to be forcable:
    // / 1. The kind of variable should be an In- or an Out-port of a program
    // / (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
    // / 2. The data type of the variable has to be supported.
    // / </remarks>
    // / <returns>
    // / <b>true</b>if the variable is forcable.</returns>
    virtual ::grpc::Status IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>> AsyncIsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>>(AsyncIsForcableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>> PrepareAsyncIsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>>(PrepareAsyncIsForcableRaw(context, request, cq));
    }
    // / <summary>
    // / Tests whether force mode is active.
    // / </summary>
    // / <returns>
    // / <b>true</b>if the force mode is active.</returns>
    virtual ::grpc::Status IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>> AsyncIsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>>(AsyncIsActiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>> PrepareAsyncIsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>>(PrepareAsyncIsActiveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Adds a new variable and value for forcing. Enables force mode.
      // / </summary>
      // / <remarks>
      // / The enabled force mode is signalized by notification and by the
      // / activated 'PlcState.Forcing'
      // / </remarks>
      // / <param name="item">
      // / Force item <see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
      // / of the variable with the full instance path and the force value.
      // / The data type of the force value must be equal with the data type
      // / of the target variable.
      // / </param>
      // / <returns>
      // / Returns <see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
      // / </returns>
      virtual void AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Resets forced variable. Disables force mode after force list is empty.
      // / </summary>
      // / <param name="variableName">
      // / Instance path of the variable.
      // / </param>
      virtual void RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Gets a list of all forced variables.
      // / </summary>
      // / <returns>
      // / Returns a list with all existing <see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
      // / </returns>
      virtual void GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Resets the force list. Disables force mode.
      // / </summary>
      // / <remarks>
      // / The disabled force mode is signalized by notification and by the
      // / deactivated PlcState.
      // / </remarks>
      virtual void Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Tests whether variable is forcable.
      // / </summary>
      // / <remarks>
      // / The variable has to meet the following requirements to be forcable:
      // / 1. The kind of variable should be an In- or an Out-port of a program
      // / (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
      // / 2. The data type of the variable has to be supported.
      // / </remarks>
      // / <returns>
      // / <b>true</b>if the variable is forcable.</returns>
      virtual void IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Tests whether force mode is active.
      // / </summary>
      // / <returns>
      // / <b>true</b>if the force mode is active.</returns>
      virtual void IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* AsyncAddVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* PrepareAsyncAddVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRemoveVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRemoveVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* AsyncGetVariablesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* PrepareAsyncGetVariablesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncResetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* AsyncIsForcableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* PrepareAsyncIsForcableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* AsyncIsActiveRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* PrepareAsyncIsActiveRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>> AsyncAddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>>(AsyncAddVariableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>> PrepareAsyncAddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>>(PrepareAsyncAddVariableRaw(context, request, cq));
    }
    ::grpc::Status RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRemoveVariableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRemoveVariableRaw(context, request, cq));
    }
    ::grpc::Status GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>> AsyncGetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>>(AsyncGetVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>> PrepareAsyncGetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>>(PrepareAsyncGetVariablesRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReset(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReset(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>> AsyncIsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>>(AsyncIsForcableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>> PrepareAsyncIsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>>(PrepareAsyncIsForcableRaw(context, request, cq));
    }
    ::grpc::Status IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>> AsyncIsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>>(AsyncIsActiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>> PrepareAsyncIsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>>(PrepareAsyncIsActiveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVariables(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reset(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsForcable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsActive(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* AsyncAddVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* PrepareAsyncAddVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRemoveVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRemoveVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* AsyncGetVariablesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* PrepareAsyncGetVariablesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncResetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* AsyncIsForcableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* PrepareAsyncIsForcableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* AsyncIsActiveRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* PrepareAsyncIsActiveRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddVariable_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveVariable_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVariables_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_IsForcable_;
    const ::grpc::internal::RpcMethod rpcmethod_IsActive_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Adds a new variable and value for forcing. Enables force mode.
    // / </summary>
    // / <remarks>
    // / The enabled force mode is signalized by notification and by the
    // / activated 'PlcState.Forcing'
    // / </remarks>
    // / <param name="item">
    // / Force item <see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
    // / of the variable with the full instance path and the force value.
    // / The data type of the force value must be equal with the data type
    // / of the target variable.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
    // / </returns>
    virtual ::grpc::Status AddVariable(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response);
    // / <summary>
    // / Resets forced variable. Disables force mode after force list is empty.
    // / </summary>
    // / <param name="variableName">
    // / Instance path of the variable.
    // / </param>
    virtual ::grpc::Status RemoveVariable(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response);
    // / <summary>
    // / Gets a list of all forced variables.
    // / </summary>
    // / <returns>
    // / Returns a list with all existing <see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
    // / </returns>
    virtual ::grpc::Status GetVariables(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response);
    // / <summary>
    // / Resets the force list. Disables force mode.
    // / </summary>
    // / <remarks>
    // / The disabled force mode is signalized by notification and by the
    // / deactivated PlcState.
    // / </remarks>
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
    // / <summary>
    // / Tests whether variable is forcable.
    // / </summary>
    // / <remarks>
    // / The variable has to meet the following requirements to be forcable:
    // / 1. The kind of variable should be an In- or an Out-port of a program
    // / (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
    // / 2. The data type of the variable has to be supported.
    // / </remarks>
    // / <returns>
    // / <b>true</b>if the variable is forcable.</returns>
    virtual ::grpc::Status IsForcable(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response);
    // / <summary>
    // / Tests whether force mode is active.
    // / </summary>
    // / <returns>
    // / <b>true</b>if the force mode is active.</returns>
    virtual ::grpc::Status IsActive(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddVariable() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVariable(::grpc::ServerContext* context, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveVariable() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RemoveVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveVariable(::grpc::ServerContext* context, ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVariables() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVariables(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVariables(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsForcable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsForcable() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_IsForcable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsForcable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsForcable(::grpc::ServerContext* context, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsActive() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsActive(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddVariable<WithAsyncMethod_RemoveVariable<WithAsyncMethod_GetVariables<WithAsyncMethod_Reset<WithAsyncMethod_IsForcable<WithAsyncMethod_IsActive<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddVariable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* response) { return this->AddVariable(context, request, response); }));}
    void SetMessageAllocatorFor_AddVariable(
        ::grpc::experimental::MessageAllocator< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddVariable(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddVariable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveVariable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* request, ::google::protobuf::Empty* response) { return this->RemoveVariable(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveVariable(
        ::grpc::experimental::MessageAllocator< ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveVariable(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveVariable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVariables() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* response) { return this->GetVariables(context, request, response); }));}
    void SetMessageAllocatorFor_GetVariables(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVariables(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVariables(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVariables(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsForcable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsForcable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* response) { return this->IsForcable(context, request, response); }));}
    void SetMessageAllocatorFor_IsForcable(
        ::grpc::experimental::MessageAllocator< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsForcable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsForcable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsForcable(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsForcable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsActive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* response) { return this->IsActive(context, request, response); }));}
    void SetMessageAllocatorFor_IsActive(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsActive(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsActive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AddVariable<ExperimentalWithCallbackMethod_RemoveVariable<ExperimentalWithCallbackMethod_GetVariables<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_IsForcable<ExperimentalWithCallbackMethod_IsActive<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AddVariable<ExperimentalWithCallbackMethod_RemoveVariable<ExperimentalWithCallbackMethod_GetVariables<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_IsForcable<ExperimentalWithCallbackMethod_IsActive<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddVariable() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveVariable() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RemoveVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVariables() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVariables(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsForcable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsForcable() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_IsForcable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsForcable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsActive() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddVariable() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVariable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveVariable() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RemoveVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveVariable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVariables() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVariables(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVariables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsForcable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsForcable() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_IsForcable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsForcable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsForcable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsActive() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsActive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddVariable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddVariable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddVariable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddVariable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveVariable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveVariable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveVariable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveVariable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVariables() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVariables(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVariables(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVariables(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVariables(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsForcable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsForcable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsForcable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsForcable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsForcable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsForcable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsForcable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsActive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsActive(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsActive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsActive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddVariable() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* streamer) {
                       return this->StreamedAddVariable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddVariable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest,::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveVariable() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedRemoveVariable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveVariable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveVariable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVariables() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* streamer) {
                       return this->StreamedGetVariables(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVariables(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVariables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsForcable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsForcable() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* streamer) {
                       return this->StreamedIsForcable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsForcable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsForcable(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsForcable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest,::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsActive() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* streamer) {
                       return this->StreamedIsActive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsActive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddVariable<WithStreamedUnaryMethod_RemoveVariable<WithStreamedUnaryMethod_GetVariables<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_IsForcable<WithStreamedUnaryMethod_IsActive<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddVariable<WithStreamedUnaryMethod_RemoveVariable<WithStreamedUnaryMethod_GetVariables<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_IsForcable<WithStreamedUnaryMethod_IsActive<Service > > > > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp


#endif  // GRPC_IForceService_2eproto__INCLUDED
