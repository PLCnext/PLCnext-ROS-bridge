// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IDataAccessService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_IDataAccessService_2eproto__INCLUDED
#define GRPC_IDataAccessService_2eproto__INCLUDED

#include "IDataAccessService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {

// *
// Services for the direct data access.
// 
// <div>
// <p>The direct access functionality is a way for reading and
// writing values from and to variables.
// This is the fastest way, with a minimum of influence to the
// real time process, but it is not guaranteed that the data
// will be read/write in the same task cycle.
// For task consistent reading the subscription
// service {@code T:Arp.Plc.Gds.Services.ISubscriptionService} has to be used.</p><p>A client can read/write from/to different types of variables
// provided in {@code T:Arp.Plc.DataType}. Currently supported types
// are listed below:</p><p>To address a variable, the full variable name uri is necessary.
// Some valid examples are given below:
// {@code
// ComponentName-1/ProgramName-1.Variable_Name
// ComponentName-1/Global_Variable_Name
// ComponentName-1/ProgramName-1.Array_Variable_Name
// ComponentName-1/ProgramName-1.Array_Variable_Name[index]
// ComponentName-1/ProgramName-1.Array_Variable_Name[startIndex:endIndex]
// ComponentName-1/ProgramName-1.Struct_Variable_Name.Element1.Leaf
// ComponentName-1/ProgramName-1.Struct_Variable_Name.Element1.LeafArray
// ComponentName-1/ProgramName-1.Struct_Variable_Name.Element1.LeafArray[index]
// }</p>
// </div>
//
class IDataAccessService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Reads the value of the variable directly from the
    // / given variable name.
    // / </summary>
    // / <remarks>
    // / Copies the value of the variable, given by the variable name,
    // / to the <see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
    // / ReadSingle can only read one single variable, so if you want
    // / to read multiple variables simultaneously, an array or a
    // / range of an array, you have to use the
    // / <see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
    // / Be aware, this copy process isn't task consistent and the
    // / data could be corrupted.
    // / </remarks>
    // / <param name="portName">
    // / Full variable name uri.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.ReadItem" />.
    // / </returns>
    virtual ::grpc::Status ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>> AsyncReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>>(AsyncReadSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>> PrepareAsyncReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>>(PrepareAsyncReadSingleRaw(context, request, cq));
    }
    // / <summary>
    // / Reads the value of the variable directly from the
    // / given variable name.
    // / </summary>
    // / <remarks>
    // / Copies the value of the variable, given by the variable name,
    // / to the <see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
    // / ReadSingle can only read one single variable, so if you want
    // / to read multiple variables simultaneously, an array or a
    // / range of an array, you have to use the
    // / <see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
    // / Be aware, this copy process isn't task consistent and the
    // / data could be corrupted.
    // / </remarks>
    // / <param name="portName">
    // / Full variable name uri.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.ReadItem" />.
    // / </returns>
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    // / <summary>
    // / Writes the given value to the given variable name
    // / containing in the given <see cref="Arp.Device.Interface.Services.WriteItem" />.
    // / </summary>
    // / <remarks>
    // / Writes the given value to the given variable containing
    // / in the given <see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
    // / can only write one single value, so if you want to write to
    // / multiple variables simultaneously, to an array or to a range
    // / of an array, you have to use the <see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
    // / service instead. Be aware, this write process isn't task
    // / consistent and the data could be corrupted.
    // / </remarks>
    // / <param name="data">
    // / Variable data which contains the variable name and the
    // / value to be written.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
    // / </returns>
    virtual ::grpc::Status WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>> AsyncWriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>>(AsyncWriteSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>> PrepareAsyncWriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>>(PrepareAsyncWriteSingleRaw(context, request, cq));
    }
    // / <summary>
    // / Writes the given value to the given variable name
    // / containing in the given <see cref="Arp.Device.Interface.Services.WriteItem" />.
    // / </summary>
    // / <remarks>
    // / Writes the given value to the given variable containing
    // / in the given <see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
    // / can only write one single value, so if you want to write to
    // / multiple variables simultaneously, to an array or to a range
    // / of an array, you have to use the <see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
    // / service instead. Be aware, this write process isn't task
    // / consistent and the data could be corrupted.
    // / </remarks>
    // / <param name="data">
    // / Variable data which contains the variable name and the
    // / value to be written.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
    // / </returns>
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>> AsyncWrite(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Reads the value of the variable directly from the
      // / given variable name.
      // / </summary>
      // / <remarks>
      // / Copies the value of the variable, given by the variable name,
      // / to the <see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      // / ReadSingle can only read one single variable, so if you want
      // / to read multiple variables simultaneously, an array or a
      // / range of an array, you have to use the
      // / <see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      // / Be aware, this copy process isn't task consistent and the
      // / data could be corrupted.
      // / </remarks>
      // / <param name="portName">
      // / Full variable name uri.
      // / </param>
      // / <returns>
      // / Returns <see cref="Arp.Device.Interface.Services.ReadItem" />.
      // / </returns>
      virtual void ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Reads the value of the variable directly from the
      // / given variable name.
      // / </summary>
      // / <remarks>
      // / Copies the value of the variable, given by the variable name,
      // / to the <see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      // / ReadSingle can only read one single variable, so if you want
      // / to read multiple variables simultaneously, an array or a
      // / range of an array, you have to use the
      // / <see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      // / Be aware, this copy process isn't task consistent and the
      // / data could be corrupted.
      // / </remarks>
      // / <param name="portName">
      // / Full variable name uri.
      // / </param>
      // / <returns>
      // / Returns <see cref="Arp.Device.Interface.Services.ReadItem" />.
      // / </returns>
      virtual void Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Writes the given value to the given variable name
      // / containing in the given <see cref="Arp.Device.Interface.Services.WriteItem" />.
      // / </summary>
      // / <remarks>
      // / Writes the given value to the given variable containing
      // / in the given <see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      // / can only write one single value, so if you want to write to
      // / multiple variables simultaneously, to an array or to a range
      // / of an array, you have to use the <see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      // / service instead. Be aware, this write process isn't task
      // / consistent and the data could be corrupted.
      // / </remarks>
      // / <param name="data">
      // / Variable data which contains the variable name and the
      // / value to be written.
      // / </param>
      // / <returns>
      // / Returns <see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      // / </returns>
      virtual void WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Writes the given value to the given variable name
      // / containing in the given <see cref="Arp.Device.Interface.Services.WriteItem" />.
      // / </summary>
      // / <remarks>
      // / Writes the given value to the given variable containing
      // / in the given <see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      // / can only write one single value, so if you want to write to
      // / multiple variables simultaneously, to an array or to a range
      // / of an array, you have to use the <see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      // / service instead. Be aware, this write process isn't task
      // / consistent and the data could be corrupted.
      // / </remarks>
      // / <param name="data">
      // / Variable data which contains the variable name and the
      // / value to be written.
      // / </param>
      // / <returns>
      // / Returns <see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      // / </returns>
      virtual void Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* AsyncReadSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* PrepareAsyncReadSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* AsyncWriteSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* PrepareAsyncWriteSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>> AsyncReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>>(AsyncReadSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>> PrepareAsyncReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>>(PrepareAsyncReadSingleRaw(context, request, cq));
    }
    ::grpc::Status Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    ::grpc::Status WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>> AsyncWriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>>(AsyncWriteSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>> PrepareAsyncWriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>>(PrepareAsyncWriteSingleRaw(context, request, cq));
    }
    ::grpc::Status Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>> AsyncWrite(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReadSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WriteSingle(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* AsyncReadSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* PrepareAsyncReadSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* AsyncWriteSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* PrepareAsyncWriteSingleRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Reads the value of the variable directly from the
    // / given variable name.
    // / </summary>
    // / <remarks>
    // / Copies the value of the variable, given by the variable name,
    // / to the <see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
    // / ReadSingle can only read one single variable, so if you want
    // / to read multiple variables simultaneously, an array or a
    // / range of an array, you have to use the
    // / <see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
    // / Be aware, this copy process isn't task consistent and the
    // / data could be corrupted.
    // / </remarks>
    // / <param name="portName">
    // / Full variable name uri.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.ReadItem" />.
    // / </returns>
    virtual ::grpc::Status ReadSingle(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response);
    // / <summary>
    // / Reads the value of the variable directly from the
    // / given variable name.
    // / </summary>
    // / <remarks>
    // / Copies the value of the variable, given by the variable name,
    // / to the <see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
    // / ReadSingle can only read one single variable, so if you want
    // / to read multiple variables simultaneously, an array or a
    // / range of an array, you have to use the
    // / <see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
    // / Be aware, this copy process isn't task consistent and the
    // / data could be corrupted.
    // / </remarks>
    // / <param name="portName">
    // / Full variable name uri.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.ReadItem" />.
    // / </returns>
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response);
    // / <summary>
    // / Writes the given value to the given variable name
    // / containing in the given <see cref="Arp.Device.Interface.Services.WriteItem" />.
    // / </summary>
    // / <remarks>
    // / Writes the given value to the given variable containing
    // / in the given <see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
    // / can only write one single value, so if you want to write to
    // / multiple variables simultaneously, to an array or to a range
    // / of an array, you have to use the <see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
    // / service instead. Be aware, this write process isn't task
    // / consistent and the data could be corrupted.
    // / </remarks>
    // / <param name="data">
    // / Variable data which contains the variable name and the
    // / value to be written.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
    // / </returns>
    virtual ::grpc::Status WriteSingle(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response);
    // / <summary>
    // / Writes the given value to the given variable name
    // / containing in the given <see cref="Arp.Device.Interface.Services.WriteItem" />.
    // / </summary>
    // / <remarks>
    // / Writes the given value to the given variable containing
    // / in the given <see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
    // / can only write one single value, so if you want to write to
    // / multiple variables simultaneously, to an array or to a range
    // / of an array, you have to use the <see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
    // / service instead. Be aware, this write process isn't task
    // / consistent and the data could be corrupted.
    // / </remarks>
    // / <param name="data">
    // / Variable data which contains the variable name and the
    // / value to be written.
    // / </param>
    // / <returns>
    // / Returns <see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
    // / </returns>
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadSingle() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSingle(::grpc::ServerContext* context, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteSingle() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_WriteSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSingle(::grpc::ServerContext* context, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadSingle<WithAsyncMethod_Read<WithAsyncMethod_WriteSingle<WithAsyncMethod_Write<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReadSingle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* response) { return this->ReadSingle(context, request, response); }));}
    void SetMessageAllocatorFor_ReadSingle(
        ::grpc::experimental::MessageAllocator< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReadSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadSingle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* response) { return this->Read(context, request, response); }));}
    void SetMessageAllocatorFor_Read(
        ::grpc::experimental::MessageAllocator< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WriteSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WriteSingle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* response) { return this->WriteSingle(context, request, response); }));}
    void SetMessageAllocatorFor_WriteSingle(
        ::grpc::experimental::MessageAllocator< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WriteSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WriteSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WriteSingle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* request, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* response) { return this->Write(context, request, response); }));}
    void SetMessageAllocatorFor_Write(
        ::grpc::experimental::MessageAllocator< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ReadSingle<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_WriteSingle<ExperimentalWithCallbackMethod_Write<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ReadSingle<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_WriteSingle<ExperimentalWithCallbackMethod_Write<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadSingle() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteSingle() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_WriteSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadSingle() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteSingle() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_WriteSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadSingle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadSingle(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadSingle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Read(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WriteSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WriteSingle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteSingle(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_WriteSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WriteSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WriteSingle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Write(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadSingle() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* streamer) {
                       return this->StreamedReadSingle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadSingle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest,::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* streamer) {
                       return this->StreamedRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest,::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteSingle() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* streamer) {
                       return this->StreamedWriteSingle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteSingle(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteSingle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest,::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* streamer) {
                       return this->StreamedWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* /*request*/, ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest,::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadSingle<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_WriteSingle<WithStreamedUnaryMethod_Write<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadSingle<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_WriteSingle<WithStreamedUnaryMethod_Write<Service > > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp


#endif  // GRPC_IDataAccessService_2eproto__INCLUDED
