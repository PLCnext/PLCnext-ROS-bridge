// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IForceService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IForceService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IForceService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DataAccessError.pb.h"
#include "ForceItem.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IForceService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IForceService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IForceService_2eproto;
namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {
class IForceServiceAddVariableRequest;
class IForceServiceAddVariableRequestDefaultTypeInternal;
extern IForceServiceAddVariableRequestDefaultTypeInternal _IForceServiceAddVariableRequest_default_instance_;
class IForceServiceAddVariableResponse;
class IForceServiceAddVariableResponseDefaultTypeInternal;
extern IForceServiceAddVariableResponseDefaultTypeInternal _IForceServiceAddVariableResponse_default_instance_;
class IForceServiceGetVariablesResponse;
class IForceServiceGetVariablesResponseDefaultTypeInternal;
extern IForceServiceGetVariablesResponseDefaultTypeInternal _IForceServiceGetVariablesResponse_default_instance_;
class IForceServiceIsActiveResponse;
class IForceServiceIsActiveResponseDefaultTypeInternal;
extern IForceServiceIsActiveResponseDefaultTypeInternal _IForceServiceIsActiveResponse_default_instance_;
class IForceServiceIsForcableRequest;
class IForceServiceIsForcableRequestDefaultTypeInternal;
extern IForceServiceIsForcableRequestDefaultTypeInternal _IForceServiceIsForcableRequest_default_instance_;
class IForceServiceIsForcableResponse;
class IForceServiceIsForcableResponseDefaultTypeInternal;
extern IForceServiceIsForcableResponseDefaultTypeInternal _IForceServiceIsForcableResponse_default_instance_;
class IForceServiceRemoveVariableRequest;
class IForceServiceRemoveVariableRequestDefaultTypeInternal;
extern IForceServiceRemoveVariableRequestDefaultTypeInternal _IForceServiceRemoveVariableRequest_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableRequest>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IForceServiceAddVariableResponse>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IForceServiceGetVariablesResponse>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IForceServiceIsActiveResponse>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableRequest>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IForceServiceIsForcableResponse>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IForceServiceRemoveVariableRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {

// ===================================================================

class IForceServiceAddVariableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest) */ {
 public:
  inline IForceServiceAddVariableRequest() : IForceServiceAddVariableRequest(nullptr) {}
  virtual ~IForceServiceAddVariableRequest();

  IForceServiceAddVariableRequest(const IForceServiceAddVariableRequest& from);
  IForceServiceAddVariableRequest(IForceServiceAddVariableRequest&& from) noexcept
    : IForceServiceAddVariableRequest() {
    *this = ::std::move(from);
  }

  inline IForceServiceAddVariableRequest& operator=(const IForceServiceAddVariableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IForceServiceAddVariableRequest& operator=(IForceServiceAddVariableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IForceServiceAddVariableRequest& default_instance();

  static inline const IForceServiceAddVariableRequest* internal_default_instance() {
    return reinterpret_cast<const IForceServiceAddVariableRequest*>(
               &_IForceServiceAddVariableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IForceServiceAddVariableRequest& a, IForceServiceAddVariableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IForceServiceAddVariableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IForceServiceAddVariableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IForceServiceAddVariableRequest* New() const final {
    return CreateMaybeMessage<IForceServiceAddVariableRequest>(nullptr);
  }

  IForceServiceAddVariableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IForceServiceAddVariableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IForceServiceAddVariableRequest& from);
  void MergeFrom(const IForceServiceAddVariableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IForceServiceAddVariableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest";
  }
  protected:
  explicit IForceServiceAddVariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IForceService_2eproto);
    return ::descriptor_table_IForceService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .Arp.Plc.Gds.Services.Grpc.ForceItem item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Arp::Plc::Gds::Services::Grpc::ForceItem& item() const;
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* release_item();
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* mutable_item();
  void set_allocated_item(::Arp::Plc::Gds::Services::Grpc::ForceItem* item);
  private:
  const ::Arp::Plc::Gds::Services::Grpc::ForceItem& _internal_item() const;
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Arp::Plc::Gds::Services::Grpc::ForceItem* item);
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IForceService_2eproto;
};
// -------------------------------------------------------------------

class IForceServiceRemoveVariableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest) */ {
 public:
  inline IForceServiceRemoveVariableRequest() : IForceServiceRemoveVariableRequest(nullptr) {}
  virtual ~IForceServiceRemoveVariableRequest();

  IForceServiceRemoveVariableRequest(const IForceServiceRemoveVariableRequest& from);
  IForceServiceRemoveVariableRequest(IForceServiceRemoveVariableRequest&& from) noexcept
    : IForceServiceRemoveVariableRequest() {
    *this = ::std::move(from);
  }

  inline IForceServiceRemoveVariableRequest& operator=(const IForceServiceRemoveVariableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IForceServiceRemoveVariableRequest& operator=(IForceServiceRemoveVariableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IForceServiceRemoveVariableRequest& default_instance();

  static inline const IForceServiceRemoveVariableRequest* internal_default_instance() {
    return reinterpret_cast<const IForceServiceRemoveVariableRequest*>(
               &_IForceServiceRemoveVariableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IForceServiceRemoveVariableRequest& a, IForceServiceRemoveVariableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IForceServiceRemoveVariableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IForceServiceRemoveVariableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IForceServiceRemoveVariableRequest* New() const final {
    return CreateMaybeMessage<IForceServiceRemoveVariableRequest>(nullptr);
  }

  IForceServiceRemoveVariableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IForceServiceRemoveVariableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IForceServiceRemoveVariableRequest& from);
  void MergeFrom(const IForceServiceRemoveVariableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IForceServiceRemoveVariableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest";
  }
  protected:
  explicit IForceServiceRemoveVariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IForceService_2eproto);
    return ::descriptor_table_IForceService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableNameFieldNumber = 1,
  };
  // string variableName = 1;
  void clear_variablename();
  const std::string& variablename() const;
  void set_variablename(const std::string& value);
  void set_variablename(std::string&& value);
  void set_variablename(const char* value);
  void set_variablename(const char* value, size_t size);
  std::string* mutable_variablename();
  std::string* release_variablename();
  void set_allocated_variablename(std::string* variablename);
  private:
  const std::string& _internal_variablename() const;
  void _internal_set_variablename(const std::string& value);
  std::string* _internal_mutable_variablename();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variablename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IForceService_2eproto;
};
// -------------------------------------------------------------------

class IForceServiceIsForcableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest) */ {
 public:
  inline IForceServiceIsForcableRequest() : IForceServiceIsForcableRequest(nullptr) {}
  virtual ~IForceServiceIsForcableRequest();

  IForceServiceIsForcableRequest(const IForceServiceIsForcableRequest& from);
  IForceServiceIsForcableRequest(IForceServiceIsForcableRequest&& from) noexcept
    : IForceServiceIsForcableRequest() {
    *this = ::std::move(from);
  }

  inline IForceServiceIsForcableRequest& operator=(const IForceServiceIsForcableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IForceServiceIsForcableRequest& operator=(IForceServiceIsForcableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IForceServiceIsForcableRequest& default_instance();

  static inline const IForceServiceIsForcableRequest* internal_default_instance() {
    return reinterpret_cast<const IForceServiceIsForcableRequest*>(
               &_IForceServiceIsForcableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IForceServiceIsForcableRequest& a, IForceServiceIsForcableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IForceServiceIsForcableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IForceServiceIsForcableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IForceServiceIsForcableRequest* New() const final {
    return CreateMaybeMessage<IForceServiceIsForcableRequest>(nullptr);
  }

  IForceServiceIsForcableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IForceServiceIsForcableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IForceServiceIsForcableRequest& from);
  void MergeFrom(const IForceServiceIsForcableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IForceServiceIsForcableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest";
  }
  protected:
  explicit IForceServiceIsForcableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IForceService_2eproto);
    return ::descriptor_table_IForceService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableNameFieldNumber = 1,
  };
  // string variableName = 1;
  void clear_variablename();
  const std::string& variablename() const;
  void set_variablename(const std::string& value);
  void set_variablename(std::string&& value);
  void set_variablename(const char* value);
  void set_variablename(const char* value, size_t size);
  std::string* mutable_variablename();
  std::string* release_variablename();
  void set_allocated_variablename(std::string* variablename);
  private:
  const std::string& _internal_variablename() const;
  void _internal_set_variablename(const std::string& value);
  std::string* _internal_mutable_variablename();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variablename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IForceService_2eproto;
};
// -------------------------------------------------------------------

class IForceServiceAddVariableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse) */ {
 public:
  inline IForceServiceAddVariableResponse() : IForceServiceAddVariableResponse(nullptr) {}
  virtual ~IForceServiceAddVariableResponse();

  IForceServiceAddVariableResponse(const IForceServiceAddVariableResponse& from);
  IForceServiceAddVariableResponse(IForceServiceAddVariableResponse&& from) noexcept
    : IForceServiceAddVariableResponse() {
    *this = ::std::move(from);
  }

  inline IForceServiceAddVariableResponse& operator=(const IForceServiceAddVariableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IForceServiceAddVariableResponse& operator=(IForceServiceAddVariableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IForceServiceAddVariableResponse& default_instance();

  static inline const IForceServiceAddVariableResponse* internal_default_instance() {
    return reinterpret_cast<const IForceServiceAddVariableResponse*>(
               &_IForceServiceAddVariableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IForceServiceAddVariableResponse& a, IForceServiceAddVariableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IForceServiceAddVariableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IForceServiceAddVariableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IForceServiceAddVariableResponse* New() const final {
    return CreateMaybeMessage<IForceServiceAddVariableResponse>(nullptr);
  }

  IForceServiceAddVariableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IForceServiceAddVariableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IForceServiceAddVariableResponse& from);
  void MergeFrom(const IForceServiceAddVariableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IForceServiceAddVariableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse";
  }
  protected:
  explicit IForceServiceAddVariableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IForceService_2eproto);
    return ::descriptor_table_IForceService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Plc.Gds.Services.Grpc.DataAccessError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Plc::Gds::Services::Grpc::DataAccessError _returnvalue() const;
  void set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value);
  private:
  ::Arp::Plc::Gds::Services::Grpc::DataAccessError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IForceService_2eproto;
};
// -------------------------------------------------------------------

class IForceServiceGetVariablesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse) */ {
 public:
  inline IForceServiceGetVariablesResponse() : IForceServiceGetVariablesResponse(nullptr) {}
  virtual ~IForceServiceGetVariablesResponse();

  IForceServiceGetVariablesResponse(const IForceServiceGetVariablesResponse& from);
  IForceServiceGetVariablesResponse(IForceServiceGetVariablesResponse&& from) noexcept
    : IForceServiceGetVariablesResponse() {
    *this = ::std::move(from);
  }

  inline IForceServiceGetVariablesResponse& operator=(const IForceServiceGetVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IForceServiceGetVariablesResponse& operator=(IForceServiceGetVariablesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IForceServiceGetVariablesResponse& default_instance();

  static inline const IForceServiceGetVariablesResponse* internal_default_instance() {
    return reinterpret_cast<const IForceServiceGetVariablesResponse*>(
               &_IForceServiceGetVariablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IForceServiceGetVariablesResponse& a, IForceServiceGetVariablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IForceServiceGetVariablesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IForceServiceGetVariablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IForceServiceGetVariablesResponse* New() const final {
    return CreateMaybeMessage<IForceServiceGetVariablesResponse>(nullptr);
  }

  IForceServiceGetVariablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IForceServiceGetVariablesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IForceServiceGetVariablesResponse& from);
  void MergeFrom(const IForceServiceGetVariablesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IForceServiceGetVariablesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse";
  }
  protected:
  explicit IForceServiceGetVariablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IForceService_2eproto);
    return ::descriptor_table_IForceService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Plc.Gds.Services.Grpc.ForceItem _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* mutable__returnvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ForceItem >*
      mutable__returnvalue();
  private:
  const ::Arp::Plc::Gds::Services::Grpc::ForceItem& _internal__returnvalue(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* _internal_add__returnvalue();
  public:
  const ::Arp::Plc::Gds::Services::Grpc::ForceItem& _returnvalue(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* add__returnvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ForceItem >&
      _returnvalue() const;

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ForceItem > _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IForceService_2eproto;
};
// -------------------------------------------------------------------

class IForceServiceIsForcableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse) */ {
 public:
  inline IForceServiceIsForcableResponse() : IForceServiceIsForcableResponse(nullptr) {}
  virtual ~IForceServiceIsForcableResponse();

  IForceServiceIsForcableResponse(const IForceServiceIsForcableResponse& from);
  IForceServiceIsForcableResponse(IForceServiceIsForcableResponse&& from) noexcept
    : IForceServiceIsForcableResponse() {
    *this = ::std::move(from);
  }

  inline IForceServiceIsForcableResponse& operator=(const IForceServiceIsForcableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IForceServiceIsForcableResponse& operator=(IForceServiceIsForcableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IForceServiceIsForcableResponse& default_instance();

  static inline const IForceServiceIsForcableResponse* internal_default_instance() {
    return reinterpret_cast<const IForceServiceIsForcableResponse*>(
               &_IForceServiceIsForcableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IForceServiceIsForcableResponse& a, IForceServiceIsForcableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IForceServiceIsForcableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IForceServiceIsForcableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IForceServiceIsForcableResponse* New() const final {
    return CreateMaybeMessage<IForceServiceIsForcableResponse>(nullptr);
  }

  IForceServiceIsForcableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IForceServiceIsForcableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IForceServiceIsForcableResponse& from);
  void MergeFrom(const IForceServiceIsForcableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IForceServiceIsForcableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse";
  }
  protected:
  explicit IForceServiceIsForcableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IForceService_2eproto);
    return ::descriptor_table_IForceService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IForceService_2eproto;
};
// -------------------------------------------------------------------

class IForceServiceIsActiveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse) */ {
 public:
  inline IForceServiceIsActiveResponse() : IForceServiceIsActiveResponse(nullptr) {}
  virtual ~IForceServiceIsActiveResponse();

  IForceServiceIsActiveResponse(const IForceServiceIsActiveResponse& from);
  IForceServiceIsActiveResponse(IForceServiceIsActiveResponse&& from) noexcept
    : IForceServiceIsActiveResponse() {
    *this = ::std::move(from);
  }

  inline IForceServiceIsActiveResponse& operator=(const IForceServiceIsActiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IForceServiceIsActiveResponse& operator=(IForceServiceIsActiveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IForceServiceIsActiveResponse& default_instance();

  static inline const IForceServiceIsActiveResponse* internal_default_instance() {
    return reinterpret_cast<const IForceServiceIsActiveResponse*>(
               &_IForceServiceIsActiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IForceServiceIsActiveResponse& a, IForceServiceIsActiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IForceServiceIsActiveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IForceServiceIsActiveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IForceServiceIsActiveResponse* New() const final {
    return CreateMaybeMessage<IForceServiceIsActiveResponse>(nullptr);
  }

  IForceServiceIsActiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IForceServiceIsActiveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IForceServiceIsActiveResponse& from);
  void MergeFrom(const IForceServiceIsActiveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IForceServiceIsActiveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse";
  }
  protected:
  explicit IForceServiceIsActiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IForceService_2eproto);
    return ::descriptor_table_IForceService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IForceService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IForceServiceAddVariableRequest

// .Arp.Plc.Gds.Services.Grpc.ForceItem item = 1;
inline bool IForceServiceAddVariableRequest::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool IForceServiceAddVariableRequest::has_item() const {
  return _internal_has_item();
}
inline const ::Arp::Plc::Gds::Services::Grpc::ForceItem& IForceServiceAddVariableRequest::_internal_item() const {
  const ::Arp::Plc::Gds::Services::Grpc::ForceItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Plc::Gds::Services::Grpc::ForceItem&>(
      ::Arp::Plc::Gds::Services::Grpc::_ForceItem_default_instance_);
}
inline const ::Arp::Plc::Gds::Services::Grpc::ForceItem& IForceServiceAddVariableRequest::item() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest.item)
  return _internal_item();
}
inline void IForceServiceAddVariableRequest::unsafe_arena_set_allocated_item(
    ::Arp::Plc::Gds::Services::Grpc::ForceItem* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest.item)
}
inline ::Arp::Plc::Gds::Services::Grpc::ForceItem* IForceServiceAddVariableRequest::release_item() {
  
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Plc::Gds::Services::Grpc::ForceItem* IForceServiceAddVariableRequest::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest.item)
  
  ::Arp::Plc::Gds::Services::Grpc::ForceItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::Arp::Plc::Gds::Services::Grpc::ForceItem* IForceServiceAddVariableRequest::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::ForceItem>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::Arp::Plc::Gds::Services::Grpc::ForceItem* IForceServiceAddVariableRequest::mutable_item() {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest.item)
  return _internal_mutable_item();
}
inline void IForceServiceAddVariableRequest::set_allocated_item(::Arp::Plc::Gds::Services::Grpc::ForceItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item)->GetArena();
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest.item)
}

// -------------------------------------------------------------------

// IForceServiceRemoveVariableRequest

// string variableName = 1;
inline void IForceServiceRemoveVariableRequest::clear_variablename() {
  variablename_.ClearToEmpty();
}
inline const std::string& IForceServiceRemoveVariableRequest::variablename() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
  return _internal_variablename();
}
inline void IForceServiceRemoveVariableRequest::set_variablename(const std::string& value) {
  _internal_set_variablename(value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
}
inline std::string* IForceServiceRemoveVariableRequest::mutable_variablename() {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
  return _internal_mutable_variablename();
}
inline const std::string& IForceServiceRemoveVariableRequest::_internal_variablename() const {
  return variablename_.Get();
}
inline void IForceServiceRemoveVariableRequest::_internal_set_variablename(const std::string& value) {
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IForceServiceRemoveVariableRequest::set_variablename(std::string&& value) {
  
  variablename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
}
inline void IForceServiceRemoveVariableRequest::set_variablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
}
inline void IForceServiceRemoveVariableRequest::set_variablename(const char* value,
    size_t size) {
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
}
inline std::string* IForceServiceRemoveVariableRequest::_internal_mutable_variablename() {
  
  return variablename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IForceServiceRemoveVariableRequest::release_variablename() {
  // @@protoc_insertion_point(field_release:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
  return variablename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IForceServiceRemoveVariableRequest::set_allocated_variablename(std::string* variablename) {
  if (variablename != nullptr) {
    
  } else {
    
  }
  variablename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variablename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.variableName)
}

// -------------------------------------------------------------------

// IForceServiceIsForcableRequest

// string variableName = 1;
inline void IForceServiceIsForcableRequest::clear_variablename() {
  variablename_.ClearToEmpty();
}
inline const std::string& IForceServiceIsForcableRequest::variablename() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
  return _internal_variablename();
}
inline void IForceServiceIsForcableRequest::set_variablename(const std::string& value) {
  _internal_set_variablename(value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
}
inline std::string* IForceServiceIsForcableRequest::mutable_variablename() {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
  return _internal_mutable_variablename();
}
inline const std::string& IForceServiceIsForcableRequest::_internal_variablename() const {
  return variablename_.Get();
}
inline void IForceServiceIsForcableRequest::_internal_set_variablename(const std::string& value) {
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IForceServiceIsForcableRequest::set_variablename(std::string&& value) {
  
  variablename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
}
inline void IForceServiceIsForcableRequest::set_variablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
}
inline void IForceServiceIsForcableRequest::set_variablename(const char* value,
    size_t size) {
  
  variablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
}
inline std::string* IForceServiceIsForcableRequest::_internal_mutable_variablename() {
  
  return variablename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IForceServiceIsForcableRequest::release_variablename() {
  // @@protoc_insertion_point(field_release:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
  return variablename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IForceServiceIsForcableRequest::set_allocated_variablename(std::string* variablename) {
  if (variablename != nullptr) {
    
  } else {
    
  }
  variablename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variablename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.variableName)
}

// -------------------------------------------------------------------

// IForceServiceAddVariableResponse

// .Arp.Plc.Gds.Services.Grpc.DataAccessError _ReturnValue = 1;
inline void IForceServiceAddVariableResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Plc::Gds::Services::Grpc::DataAccessError IForceServiceAddVariableResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Plc::Gds::Services::Grpc::DataAccessError >(_returnvalue_);
}
inline ::Arp::Plc::Gds::Services::Grpc::DataAccessError IForceServiceAddVariableResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IForceServiceAddVariableResponse::_internal_set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value) {
  
  _returnvalue_ = value;
}
inline void IForceServiceAddVariableResponse::set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IForceServiceGetVariablesResponse

// repeated .Arp.Plc.Gds.Services.Grpc.ForceItem _ReturnValue = 1;
inline int IForceServiceGetVariablesResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int IForceServiceGetVariablesResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline ::Arp::Plc::Gds::Services::Grpc::ForceItem* IForceServiceGetVariablesResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ForceItem >*
IForceServiceGetVariablesResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse._ReturnValue)
  return &_returnvalue_;
}
inline const ::Arp::Plc::Gds::Services::Grpc::ForceItem& IForceServiceGetVariablesResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const ::Arp::Plc::Gds::Services::Grpc::ForceItem& IForceServiceGetVariablesResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline ::Arp::Plc::Gds::Services::Grpc::ForceItem* IForceServiceGetVariablesResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline ::Arp::Plc::Gds::Services::Grpc::ForceItem* IForceServiceGetVariablesResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add:Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ForceItem >&
IForceServiceGetVariablesResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse._ReturnValue)
  return _returnvalue_;
}

// -------------------------------------------------------------------

// IForceServiceIsForcableResponse

// bool _ReturnValue = 1;
inline void IForceServiceIsForcableResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool IForceServiceIsForcableResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool IForceServiceIsForcableResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IForceServiceIsForcableResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void IForceServiceIsForcableResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IForceServiceIsActiveResponse

// bool _ReturnValue = 1;
inline void IForceServiceIsActiveResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool IForceServiceIsActiveResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool IForceServiceIsActiveResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IForceServiceIsActiveResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void IForceServiceIsActiveResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse._ReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IForceService_2eproto
