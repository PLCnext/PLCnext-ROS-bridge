// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IFileService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IFileService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IFileService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "FileSystemError.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IFileService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IFileService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IFileService_2eproto;
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {
class IFileServiceCopyRequest;
class IFileServiceCopyRequestDefaultTypeInternal;
extern IFileServiceCopyRequestDefaultTypeInternal _IFileServiceCopyRequest_default_instance_;
class IFileServiceCopyResponse;
class IFileServiceCopyResponseDefaultTypeInternal;
extern IFileServiceCopyResponseDefaultTypeInternal _IFileServiceCopyResponse_default_instance_;
class IFileServiceDeleteRequest;
class IFileServiceDeleteRequestDefaultTypeInternal;
extern IFileServiceDeleteRequestDefaultTypeInternal _IFileServiceDeleteRequest_default_instance_;
class IFileServiceDeleteResponse;
class IFileServiceDeleteResponseDefaultTypeInternal;
extern IFileServiceDeleteResponseDefaultTypeInternal _IFileServiceDeleteResponse_default_instance_;
class IFileServiceExistsRequest;
class IFileServiceExistsRequestDefaultTypeInternal;
extern IFileServiceExistsRequestDefaultTypeInternal _IFileServiceExistsRequest_default_instance_;
class IFileServiceExistsResponse;
class IFileServiceExistsResponseDefaultTypeInternal;
extern IFileServiceExistsResponseDefaultTypeInternal _IFileServiceExistsResponse_default_instance_;
class IFileServiceMoveRequest;
class IFileServiceMoveRequestDefaultTypeInternal;
extern IFileServiceMoveRequestDefaultTypeInternal _IFileServiceMoveRequest_default_instance_;
class IFileServiceMoveResponse;
class IFileServiceMoveResponseDefaultTypeInternal;
extern IFileServiceMoveResponseDefaultTypeInternal _IFileServiceMoveResponse_default_instance_;
}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {

// ===================================================================

class IFileServiceExistsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest) */ {
 public:
  inline IFileServiceExistsRequest() : IFileServiceExistsRequest(nullptr) {}
  virtual ~IFileServiceExistsRequest();

  IFileServiceExistsRequest(const IFileServiceExistsRequest& from);
  IFileServiceExistsRequest(IFileServiceExistsRequest&& from) noexcept
    : IFileServiceExistsRequest() {
    *this = ::std::move(from);
  }

  inline IFileServiceExistsRequest& operator=(const IFileServiceExistsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceExistsRequest& operator=(IFileServiceExistsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceExistsRequest& default_instance();

  static inline const IFileServiceExistsRequest* internal_default_instance() {
    return reinterpret_cast<const IFileServiceExistsRequest*>(
               &_IFileServiceExistsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IFileServiceExistsRequest& a, IFileServiceExistsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceExistsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceExistsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceExistsRequest* New() const final {
    return CreateMaybeMessage<IFileServiceExistsRequest>(nullptr);
  }

  IFileServiceExistsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceExistsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceExistsRequest& from);
  void MergeFrom(const IFileServiceExistsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceExistsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest";
  }
  protected:
  explicit IFileServiceExistsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// -------------------------------------------------------------------

class IFileServiceDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest) */ {
 public:
  inline IFileServiceDeleteRequest() : IFileServiceDeleteRequest(nullptr) {}
  virtual ~IFileServiceDeleteRequest();

  IFileServiceDeleteRequest(const IFileServiceDeleteRequest& from);
  IFileServiceDeleteRequest(IFileServiceDeleteRequest&& from) noexcept
    : IFileServiceDeleteRequest() {
    *this = ::std::move(from);
  }

  inline IFileServiceDeleteRequest& operator=(const IFileServiceDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceDeleteRequest& operator=(IFileServiceDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceDeleteRequest& default_instance();

  static inline const IFileServiceDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const IFileServiceDeleteRequest*>(
               &_IFileServiceDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IFileServiceDeleteRequest& a, IFileServiceDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceDeleteRequest* New() const final {
    return CreateMaybeMessage<IFileServiceDeleteRequest>(nullptr);
  }

  IFileServiceDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceDeleteRequest& from);
  void MergeFrom(const IFileServiceDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest";
  }
  protected:
  explicit IFileServiceDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string filePath = 1;
  void clear_filepath();
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// -------------------------------------------------------------------

class IFileServiceMoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest) */ {
 public:
  inline IFileServiceMoveRequest() : IFileServiceMoveRequest(nullptr) {}
  virtual ~IFileServiceMoveRequest();

  IFileServiceMoveRequest(const IFileServiceMoveRequest& from);
  IFileServiceMoveRequest(IFileServiceMoveRequest&& from) noexcept
    : IFileServiceMoveRequest() {
    *this = ::std::move(from);
  }

  inline IFileServiceMoveRequest& operator=(const IFileServiceMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceMoveRequest& operator=(IFileServiceMoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceMoveRequest& default_instance();

  static inline const IFileServiceMoveRequest* internal_default_instance() {
    return reinterpret_cast<const IFileServiceMoveRequest*>(
               &_IFileServiceMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IFileServiceMoveRequest& a, IFileServiceMoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceMoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceMoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceMoveRequest* New() const final {
    return CreateMaybeMessage<IFileServiceMoveRequest>(nullptr);
  }

  IFileServiceMoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceMoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceMoveRequest& from);
  void MergeFrom(const IFileServiceMoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceMoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest";
  }
  protected:
  explicit IFileServiceMoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFilePathFieldNumber = 3,
    kDestinationFilePathFieldNumber = 4,
    kCreateDirectoryFieldNumber = 1,
    kOverwriteFieldNumber = 2,
  };
  // string sourceFilePath = 3;
  void clear_sourcefilepath();
  const std::string& sourcefilepath() const;
  void set_sourcefilepath(const std::string& value);
  void set_sourcefilepath(std::string&& value);
  void set_sourcefilepath(const char* value);
  void set_sourcefilepath(const char* value, size_t size);
  std::string* mutable_sourcefilepath();
  std::string* release_sourcefilepath();
  void set_allocated_sourcefilepath(std::string* sourcefilepath);
  private:
  const std::string& _internal_sourcefilepath() const;
  void _internal_set_sourcefilepath(const std::string& value);
  std::string* _internal_mutable_sourcefilepath();
  public:

  // string destinationFilePath = 4;
  void clear_destinationfilepath();
  const std::string& destinationfilepath() const;
  void set_destinationfilepath(const std::string& value);
  void set_destinationfilepath(std::string&& value);
  void set_destinationfilepath(const char* value);
  void set_destinationfilepath(const char* value, size_t size);
  std::string* mutable_destinationfilepath();
  std::string* release_destinationfilepath();
  void set_allocated_destinationfilepath(std::string* destinationfilepath);
  private:
  const std::string& _internal_destinationfilepath() const;
  void _internal_set_destinationfilepath(const std::string& value);
  std::string* _internal_mutable_destinationfilepath();
  public:

  // bool createDirectory = 1;
  void clear_createdirectory();
  bool createdirectory() const;
  void set_createdirectory(bool value);
  private:
  bool _internal_createdirectory() const;
  void _internal_set_createdirectory(bool value);
  public:

  // bool overwrite = 2;
  void clear_overwrite();
  bool overwrite() const;
  void set_overwrite(bool value);
  private:
  bool _internal_overwrite() const;
  void _internal_set_overwrite(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcefilepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destinationfilepath_;
  bool createdirectory_;
  bool overwrite_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// -------------------------------------------------------------------

class IFileServiceCopyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest) */ {
 public:
  inline IFileServiceCopyRequest() : IFileServiceCopyRequest(nullptr) {}
  virtual ~IFileServiceCopyRequest();

  IFileServiceCopyRequest(const IFileServiceCopyRequest& from);
  IFileServiceCopyRequest(IFileServiceCopyRequest&& from) noexcept
    : IFileServiceCopyRequest() {
    *this = ::std::move(from);
  }

  inline IFileServiceCopyRequest& operator=(const IFileServiceCopyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceCopyRequest& operator=(IFileServiceCopyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceCopyRequest& default_instance();

  static inline const IFileServiceCopyRequest* internal_default_instance() {
    return reinterpret_cast<const IFileServiceCopyRequest*>(
               &_IFileServiceCopyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IFileServiceCopyRequest& a, IFileServiceCopyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceCopyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceCopyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceCopyRequest* New() const final {
    return CreateMaybeMessage<IFileServiceCopyRequest>(nullptr);
  }

  IFileServiceCopyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceCopyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceCopyRequest& from);
  void MergeFrom(const IFileServiceCopyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceCopyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest";
  }
  protected:
  explicit IFileServiceCopyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFilePathFieldNumber = 3,
    kDestinationFilePathFieldNumber = 4,
    kCreateDirectoryFieldNumber = 1,
    kOverwriteFieldNumber = 2,
  };
  // string sourceFilePath = 3;
  void clear_sourcefilepath();
  const std::string& sourcefilepath() const;
  void set_sourcefilepath(const std::string& value);
  void set_sourcefilepath(std::string&& value);
  void set_sourcefilepath(const char* value);
  void set_sourcefilepath(const char* value, size_t size);
  std::string* mutable_sourcefilepath();
  std::string* release_sourcefilepath();
  void set_allocated_sourcefilepath(std::string* sourcefilepath);
  private:
  const std::string& _internal_sourcefilepath() const;
  void _internal_set_sourcefilepath(const std::string& value);
  std::string* _internal_mutable_sourcefilepath();
  public:

  // string destinationFilePath = 4;
  void clear_destinationfilepath();
  const std::string& destinationfilepath() const;
  void set_destinationfilepath(const std::string& value);
  void set_destinationfilepath(std::string&& value);
  void set_destinationfilepath(const char* value);
  void set_destinationfilepath(const char* value, size_t size);
  std::string* mutable_destinationfilepath();
  std::string* release_destinationfilepath();
  void set_allocated_destinationfilepath(std::string* destinationfilepath);
  private:
  const std::string& _internal_destinationfilepath() const;
  void _internal_set_destinationfilepath(const std::string& value);
  std::string* _internal_mutable_destinationfilepath();
  public:

  // bool createDirectory = 1;
  void clear_createdirectory();
  bool createdirectory() const;
  void set_createdirectory(bool value);
  private:
  bool _internal_createdirectory() const;
  void _internal_set_createdirectory(bool value);
  public:

  // bool overwrite = 2;
  void clear_overwrite();
  bool overwrite() const;
  void set_overwrite(bool value);
  private:
  bool _internal_overwrite() const;
  void _internal_set_overwrite(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcefilepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destinationfilepath_;
  bool createdirectory_;
  bool overwrite_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// -------------------------------------------------------------------

class IFileServiceExistsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsResponse) */ {
 public:
  inline IFileServiceExistsResponse() : IFileServiceExistsResponse(nullptr) {}
  virtual ~IFileServiceExistsResponse();

  IFileServiceExistsResponse(const IFileServiceExistsResponse& from);
  IFileServiceExistsResponse(IFileServiceExistsResponse&& from) noexcept
    : IFileServiceExistsResponse() {
    *this = ::std::move(from);
  }

  inline IFileServiceExistsResponse& operator=(const IFileServiceExistsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceExistsResponse& operator=(IFileServiceExistsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceExistsResponse& default_instance();

  static inline const IFileServiceExistsResponse* internal_default_instance() {
    return reinterpret_cast<const IFileServiceExistsResponse*>(
               &_IFileServiceExistsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IFileServiceExistsResponse& a, IFileServiceExistsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceExistsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceExistsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceExistsResponse* New() const final {
    return CreateMaybeMessage<IFileServiceExistsResponse>(nullptr);
  }

  IFileServiceExistsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceExistsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceExistsResponse& from);
  void MergeFrom(const IFileServiceExistsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceExistsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsResponse";
  }
  protected:
  explicit IFileServiceExistsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// -------------------------------------------------------------------

class IFileServiceDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteResponse) */ {
 public:
  inline IFileServiceDeleteResponse() : IFileServiceDeleteResponse(nullptr) {}
  virtual ~IFileServiceDeleteResponse();

  IFileServiceDeleteResponse(const IFileServiceDeleteResponse& from);
  IFileServiceDeleteResponse(IFileServiceDeleteResponse&& from) noexcept
    : IFileServiceDeleteResponse() {
    *this = ::std::move(from);
  }

  inline IFileServiceDeleteResponse& operator=(const IFileServiceDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceDeleteResponse& operator=(IFileServiceDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceDeleteResponse& default_instance();

  static inline const IFileServiceDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const IFileServiceDeleteResponse*>(
               &_IFileServiceDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IFileServiceDeleteResponse& a, IFileServiceDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceDeleteResponse* New() const final {
    return CreateMaybeMessage<IFileServiceDeleteResponse>(nullptr);
  }

  IFileServiceDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceDeleteResponse& from);
  void MergeFrom(const IFileServiceDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteResponse";
  }
  protected:
  explicit IFileServiceDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// -------------------------------------------------------------------

class IFileServiceMoveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveResponse) */ {
 public:
  inline IFileServiceMoveResponse() : IFileServiceMoveResponse(nullptr) {}
  virtual ~IFileServiceMoveResponse();

  IFileServiceMoveResponse(const IFileServiceMoveResponse& from);
  IFileServiceMoveResponse(IFileServiceMoveResponse&& from) noexcept
    : IFileServiceMoveResponse() {
    *this = ::std::move(from);
  }

  inline IFileServiceMoveResponse& operator=(const IFileServiceMoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceMoveResponse& operator=(IFileServiceMoveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceMoveResponse& default_instance();

  static inline const IFileServiceMoveResponse* internal_default_instance() {
    return reinterpret_cast<const IFileServiceMoveResponse*>(
               &_IFileServiceMoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IFileServiceMoveResponse& a, IFileServiceMoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceMoveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceMoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceMoveResponse* New() const final {
    return CreateMaybeMessage<IFileServiceMoveResponse>(nullptr);
  }

  IFileServiceMoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceMoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceMoveResponse& from);
  void MergeFrom(const IFileServiceMoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceMoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveResponse";
  }
  protected:
  explicit IFileServiceMoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// -------------------------------------------------------------------

class IFileServiceCopyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyResponse) */ {
 public:
  inline IFileServiceCopyResponse() : IFileServiceCopyResponse(nullptr) {}
  virtual ~IFileServiceCopyResponse();

  IFileServiceCopyResponse(const IFileServiceCopyResponse& from);
  IFileServiceCopyResponse(IFileServiceCopyResponse&& from) noexcept
    : IFileServiceCopyResponse() {
    *this = ::std::move(from);
  }

  inline IFileServiceCopyResponse& operator=(const IFileServiceCopyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IFileServiceCopyResponse& operator=(IFileServiceCopyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IFileServiceCopyResponse& default_instance();

  static inline const IFileServiceCopyResponse* internal_default_instance() {
    return reinterpret_cast<const IFileServiceCopyResponse*>(
               &_IFileServiceCopyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IFileServiceCopyResponse& a, IFileServiceCopyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IFileServiceCopyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IFileServiceCopyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IFileServiceCopyResponse* New() const final {
    return CreateMaybeMessage<IFileServiceCopyResponse>(nullptr);
  }

  IFileServiceCopyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IFileServiceCopyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IFileServiceCopyResponse& from);
  void MergeFrom(const IFileServiceCopyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IFileServiceCopyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyResponse";
  }
  protected:
  explicit IFileServiceCopyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IFileService_2eproto);
    return ::descriptor_table_IFileService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IFileService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IFileServiceExistsRequest

// string path = 1;
inline void IFileServiceExistsRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& IFileServiceExistsRequest::path() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
  return _internal_path();
}
inline void IFileServiceExistsRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
}
inline std::string* IFileServiceExistsRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
  return _internal_mutable_path();
}
inline const std::string& IFileServiceExistsRequest::_internal_path() const {
  return path_.Get();
}
inline void IFileServiceExistsRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IFileServiceExistsRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
}
inline void IFileServiceExistsRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
}
inline void IFileServiceExistsRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
}
inline std::string* IFileServiceExistsRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IFileServiceExistsRequest::release_path() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IFileServiceExistsRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsRequest.path)
}

// -------------------------------------------------------------------

// IFileServiceDeleteRequest

// string filePath = 1;
inline void IFileServiceDeleteRequest::clear_filepath() {
  filepath_.ClearToEmpty();
}
inline const std::string& IFileServiceDeleteRequest::filepath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
  return _internal_filepath();
}
inline void IFileServiceDeleteRequest::set_filepath(const std::string& value) {
  _internal_set_filepath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
}
inline std::string* IFileServiceDeleteRequest::mutable_filepath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
  return _internal_mutable_filepath();
}
inline const std::string& IFileServiceDeleteRequest::_internal_filepath() const {
  return filepath_.Get();
}
inline void IFileServiceDeleteRequest::_internal_set_filepath(const std::string& value) {
  
  filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IFileServiceDeleteRequest::set_filepath(std::string&& value) {
  
  filepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
}
inline void IFileServiceDeleteRequest::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
}
inline void IFileServiceDeleteRequest::set_filepath(const char* value,
    size_t size) {
  
  filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
}
inline std::string* IFileServiceDeleteRequest::_internal_mutable_filepath() {
  
  return filepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IFileServiceDeleteRequest::release_filepath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
  return filepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IFileServiceDeleteRequest::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteRequest.filePath)
}

// -------------------------------------------------------------------

// IFileServiceMoveRequest

// bool createDirectory = 1;
inline void IFileServiceMoveRequest::clear_createdirectory() {
  createdirectory_ = false;
}
inline bool IFileServiceMoveRequest::_internal_createdirectory() const {
  return createdirectory_;
}
inline bool IFileServiceMoveRequest::createdirectory() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.createDirectory)
  return _internal_createdirectory();
}
inline void IFileServiceMoveRequest::_internal_set_createdirectory(bool value) {
  
  createdirectory_ = value;
}
inline void IFileServiceMoveRequest::set_createdirectory(bool value) {
  _internal_set_createdirectory(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.createDirectory)
}

// bool overwrite = 2;
inline void IFileServiceMoveRequest::clear_overwrite() {
  overwrite_ = false;
}
inline bool IFileServiceMoveRequest::_internal_overwrite() const {
  return overwrite_;
}
inline bool IFileServiceMoveRequest::overwrite() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.overwrite)
  return _internal_overwrite();
}
inline void IFileServiceMoveRequest::_internal_set_overwrite(bool value) {
  
  overwrite_ = value;
}
inline void IFileServiceMoveRequest::set_overwrite(bool value) {
  _internal_set_overwrite(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.overwrite)
}

// string sourceFilePath = 3;
inline void IFileServiceMoveRequest::clear_sourcefilepath() {
  sourcefilepath_.ClearToEmpty();
}
inline const std::string& IFileServiceMoveRequest::sourcefilepath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
  return _internal_sourcefilepath();
}
inline void IFileServiceMoveRequest::set_sourcefilepath(const std::string& value) {
  _internal_set_sourcefilepath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
}
inline std::string* IFileServiceMoveRequest::mutable_sourcefilepath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
  return _internal_mutable_sourcefilepath();
}
inline const std::string& IFileServiceMoveRequest::_internal_sourcefilepath() const {
  return sourcefilepath_.Get();
}
inline void IFileServiceMoveRequest::_internal_set_sourcefilepath(const std::string& value) {
  
  sourcefilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IFileServiceMoveRequest::set_sourcefilepath(std::string&& value) {
  
  sourcefilepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
}
inline void IFileServiceMoveRequest::set_sourcefilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcefilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
}
inline void IFileServiceMoveRequest::set_sourcefilepath(const char* value,
    size_t size) {
  
  sourcefilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
}
inline std::string* IFileServiceMoveRequest::_internal_mutable_sourcefilepath() {
  
  return sourcefilepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IFileServiceMoveRequest::release_sourcefilepath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
  return sourcefilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IFileServiceMoveRequest::set_allocated_sourcefilepath(std::string* sourcefilepath) {
  if (sourcefilepath != nullptr) {
    
  } else {
    
  }
  sourcefilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcefilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.sourceFilePath)
}

// string destinationFilePath = 4;
inline void IFileServiceMoveRequest::clear_destinationfilepath() {
  destinationfilepath_.ClearToEmpty();
}
inline const std::string& IFileServiceMoveRequest::destinationfilepath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
  return _internal_destinationfilepath();
}
inline void IFileServiceMoveRequest::set_destinationfilepath(const std::string& value) {
  _internal_set_destinationfilepath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
}
inline std::string* IFileServiceMoveRequest::mutable_destinationfilepath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
  return _internal_mutable_destinationfilepath();
}
inline const std::string& IFileServiceMoveRequest::_internal_destinationfilepath() const {
  return destinationfilepath_.Get();
}
inline void IFileServiceMoveRequest::_internal_set_destinationfilepath(const std::string& value) {
  
  destinationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IFileServiceMoveRequest::set_destinationfilepath(std::string&& value) {
  
  destinationfilepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
}
inline void IFileServiceMoveRequest::set_destinationfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destinationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
}
inline void IFileServiceMoveRequest::set_destinationfilepath(const char* value,
    size_t size) {
  
  destinationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
}
inline std::string* IFileServiceMoveRequest::_internal_mutable_destinationfilepath() {
  
  return destinationfilepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IFileServiceMoveRequest::release_destinationfilepath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
  return destinationfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IFileServiceMoveRequest::set_allocated_destinationfilepath(std::string* destinationfilepath) {
  if (destinationfilepath != nullptr) {
    
  } else {
    
  }
  destinationfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destinationfilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveRequest.destinationFilePath)
}

// -------------------------------------------------------------------

// IFileServiceCopyRequest

// bool createDirectory = 1;
inline void IFileServiceCopyRequest::clear_createdirectory() {
  createdirectory_ = false;
}
inline bool IFileServiceCopyRequest::_internal_createdirectory() const {
  return createdirectory_;
}
inline bool IFileServiceCopyRequest::createdirectory() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.createDirectory)
  return _internal_createdirectory();
}
inline void IFileServiceCopyRequest::_internal_set_createdirectory(bool value) {
  
  createdirectory_ = value;
}
inline void IFileServiceCopyRequest::set_createdirectory(bool value) {
  _internal_set_createdirectory(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.createDirectory)
}

// bool overwrite = 2;
inline void IFileServiceCopyRequest::clear_overwrite() {
  overwrite_ = false;
}
inline bool IFileServiceCopyRequest::_internal_overwrite() const {
  return overwrite_;
}
inline bool IFileServiceCopyRequest::overwrite() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.overwrite)
  return _internal_overwrite();
}
inline void IFileServiceCopyRequest::_internal_set_overwrite(bool value) {
  
  overwrite_ = value;
}
inline void IFileServiceCopyRequest::set_overwrite(bool value) {
  _internal_set_overwrite(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.overwrite)
}

// string sourceFilePath = 3;
inline void IFileServiceCopyRequest::clear_sourcefilepath() {
  sourcefilepath_.ClearToEmpty();
}
inline const std::string& IFileServiceCopyRequest::sourcefilepath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
  return _internal_sourcefilepath();
}
inline void IFileServiceCopyRequest::set_sourcefilepath(const std::string& value) {
  _internal_set_sourcefilepath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
}
inline std::string* IFileServiceCopyRequest::mutable_sourcefilepath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
  return _internal_mutable_sourcefilepath();
}
inline const std::string& IFileServiceCopyRequest::_internal_sourcefilepath() const {
  return sourcefilepath_.Get();
}
inline void IFileServiceCopyRequest::_internal_set_sourcefilepath(const std::string& value) {
  
  sourcefilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IFileServiceCopyRequest::set_sourcefilepath(std::string&& value) {
  
  sourcefilepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
}
inline void IFileServiceCopyRequest::set_sourcefilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcefilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
}
inline void IFileServiceCopyRequest::set_sourcefilepath(const char* value,
    size_t size) {
  
  sourcefilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
}
inline std::string* IFileServiceCopyRequest::_internal_mutable_sourcefilepath() {
  
  return sourcefilepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IFileServiceCopyRequest::release_sourcefilepath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
  return sourcefilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IFileServiceCopyRequest::set_allocated_sourcefilepath(std::string* sourcefilepath) {
  if (sourcefilepath != nullptr) {
    
  } else {
    
  }
  sourcefilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcefilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.sourceFilePath)
}

// string destinationFilePath = 4;
inline void IFileServiceCopyRequest::clear_destinationfilepath() {
  destinationfilepath_.ClearToEmpty();
}
inline const std::string& IFileServiceCopyRequest::destinationfilepath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
  return _internal_destinationfilepath();
}
inline void IFileServiceCopyRequest::set_destinationfilepath(const std::string& value) {
  _internal_set_destinationfilepath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
}
inline std::string* IFileServiceCopyRequest::mutable_destinationfilepath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
  return _internal_mutable_destinationfilepath();
}
inline const std::string& IFileServiceCopyRequest::_internal_destinationfilepath() const {
  return destinationfilepath_.Get();
}
inline void IFileServiceCopyRequest::_internal_set_destinationfilepath(const std::string& value) {
  
  destinationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IFileServiceCopyRequest::set_destinationfilepath(std::string&& value) {
  
  destinationfilepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
}
inline void IFileServiceCopyRequest::set_destinationfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destinationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
}
inline void IFileServiceCopyRequest::set_destinationfilepath(const char* value,
    size_t size) {
  
  destinationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
}
inline std::string* IFileServiceCopyRequest::_internal_mutable_destinationfilepath() {
  
  return destinationfilepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IFileServiceCopyRequest::release_destinationfilepath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
  return destinationfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IFileServiceCopyRequest::set_allocated_destinationfilepath(std::string* destinationfilepath) {
  if (destinationfilepath != nullptr) {
    
  } else {
    
  }
  destinationfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destinationfilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyRequest.destinationFilePath)
}

// -------------------------------------------------------------------

// IFileServiceExistsResponse

// bool _ReturnValue = 1;
inline void IFileServiceExistsResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool IFileServiceExistsResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool IFileServiceExistsResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IFileServiceExistsResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void IFileServiceExistsResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceExistsResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IFileServiceDeleteResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IFileServiceDeleteResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IFileServiceDeleteResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IFileServiceDeleteResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IFileServiceDeleteResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IFileServiceDeleteResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceDeleteResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IFileServiceMoveResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IFileServiceMoveResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IFileServiceMoveResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IFileServiceMoveResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IFileServiceMoveResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IFileServiceMoveResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceMoveResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IFileServiceCopyResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IFileServiceCopyResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IFileServiceCopyResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IFileServiceCopyResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IFileServiceCopyResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IFileServiceCopyResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IFileServiceCopyResponse._ReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IFileService_2eproto
