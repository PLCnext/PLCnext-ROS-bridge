// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IDirectoryService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_IDirectoryService_2eproto__INCLUDED
#define GRPC_IDirectoryService_2eproto__INCLUDED

#include "IDirectoryService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {

// *
// Provides common file directory operations.
// 
// <div>
// The path separator is always '/'.
// </div>
//
class IDirectoryService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Checks if the specified directory exists.
    // / </summary>
    // / <param name="path">The path of the directory to check.</param>
    // / <returns>
    // / <c>true</c> if  the directory exists, otherwise <c>false</c>.
    // / </returns>
    virtual ::grpc::Status Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>> AsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>>(AsyncExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>> PrepareAsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>>(PrepareAsyncExistsRaw(context, request, cq));
    }
    // / <summary>
    // / Creates the specified directory.
    // / </summary>
    // / <param name="path">The path of the directory to create.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // / <summary>
    // / Deletes the specified directory and its content.
    // / </summary>
    // / <param name="path">The path of the directory to delete.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // / <summary>
    // / Removes the content of the specified directory, but does not delete the specified directory itself.
    // / </summary>
    // / <param name="path">The path of the directory to clear.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>> AsyncClear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>>(AsyncClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>> PrepareAsyncClear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>>(PrepareAsyncClearRaw(context, request, cq));
    }
    // / <summary>
    // / Moves the specified directory and its content to the given new location.
    // / </summary>
    // / <param name="sourcePath">The source path of the directory to move.</param>
    // / <param name="destinationPath">The destination path of the directory to move all content to.</param>
    // / <param name="clear">If set to <c>true</c> the destination location is cleared first if it yet exists and the operation succeeds anyway
    // / while returning <c>true</c>.
    // / Otherwise, if the destination yet exists, the operations fails and returns <c>false</c>.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>> AsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    // / <summary>
    // / Copies the specified directory and its content to the given new location.
    // / </summary>
    // / <param name="sourcePath">The source path of the directory to copy.</param>
    // / <param name="destinationPath">The destination path of the directory to copy all content to.</param>
    // / <param name="clear">If set to <c>true</c> the destination location is cleared first if it yet exists and the operation succeeds anyway
    // / while returning <c>true</c>.
    // / Otherwise, if the destination yet exists, the operations fails and returns <c>false</c>.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>> AsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>>(AsyncCopyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>> PrepareAsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>>(PrepareAsyncCopyRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Checks if the specified directory exists.
      // / </summary>
      // / <param name="path">The path of the directory to check.</param>
      // / <returns>
      // / <c>true</c> if  the directory exists, otherwise <c>false</c>.
      // / </returns>
      virtual void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Creates the specified directory.
      // / </summary>
      // / <param name="path">The path of the directory to create.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Deletes the specified directory and its content.
      // / </summary>
      // / <param name="path">The path of the directory to delete.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Removes the content of the specified directory, but does not delete the specified directory itself.
      // / </summary>
      // / <param name="path">The path of the directory to clear.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Moves the specified directory and its content to the given new location.
      // / </summary>
      // / <param name="sourcePath">The source path of the directory to move.</param>
      // / <param name="destinationPath">The destination path of the directory to move all content to.</param>
      // / <param name="clear">If set to <c>true</c> the destination location is cleared first if it yet exists and the operation succeeds anyway
      // / while returning <c>true</c>.
      // / Otherwise, if the destination yet exists, the operations fails and returns <c>false</c>.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Copies the specified directory and its content to the given new location.
      // / </summary>
      // / <param name="sourcePath">The source path of the directory to copy.</param>
      // / <param name="destinationPath">The destination path of the directory to copy all content to.</param>
      // / <param name="clear">If set to <c>true</c> the destination location is cleared first if it yet exists and the operation succeeds anyway
      // / while returning <c>true</c>.
      // / Otherwise, if the destination yet exists, the operations fails and returns <c>false</c>.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* AsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* PrepareAsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* AsyncClearRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* AsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* PrepareAsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>> AsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>>(AsyncExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>> PrepareAsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>>(PrepareAsyncExistsRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>> AsyncClear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>>(AsyncClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>> PrepareAsyncClear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>>(PrepareAsyncClearRaw(context, request, cq));
    }
    ::grpc::Status Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>> AsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    ::grpc::Status Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>> AsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>>(AsyncCopyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>> PrepareAsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>>(PrepareAsyncCopyRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* AsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* PrepareAsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* AsyncClearRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* AsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* PrepareAsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Exists_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Clear_;
    const ::grpc::internal::RpcMethod rpcmethod_Move_;
    const ::grpc::internal::RpcMethod rpcmethod_Copy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Checks if the specified directory exists.
    // / </summary>
    // / <param name="path">The path of the directory to check.</param>
    // / <returns>
    // / <c>true</c> if  the directory exists, otherwise <c>false</c>.
    // / </returns>
    virtual ::grpc::Status Exists(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response);
    // / <summary>
    // / Creates the specified directory.
    // / </summary>
    // / <param name="path">The path of the directory to create.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response);
    // / <summary>
    // / Deletes the specified directory and its content.
    // / </summary>
    // / <param name="path">The path of the directory to delete.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response);
    // / <summary>
    // / Removes the content of the specified directory, but does not delete the specified directory itself.
    // / </summary>
    // / <param name="path">The path of the directory to clear.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Clear(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response);
    // / <summary>
    // / Moves the specified directory and its content to the given new location.
    // / </summary>
    // / <param name="sourcePath">The source path of the directory to move.</param>
    // / <param name="destinationPath">The destination path of the directory to move all content to.</param>
    // / <param name="clear">If set to <c>true</c> the destination location is cleared first if it yet exists and the operation succeeds anyway
    // / while returning <c>true</c>.
    // / Otherwise, if the destination yet exists, the operations fails and returns <c>false</c>.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Move(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response);
    // / <summary>
    // / Copies the specified directory and its content to the given new location.
    // / </summary>
    // / <param name="sourcePath">The source path of the directory to copy.</param>
    // / <param name="destinationPath">The destination path of the directory to copy all content to.</param>
    // / <param name="clear">If set to <c>true</c> the destination location is cleared first if it yet exists and the operation succeeds anyway
    // / while returning <c>true</c>.
    // / Otherwise, if the destination yet exists, the operations fails and returns <c>false</c>.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Copy(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Exists() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExists(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Clear() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClear(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Move() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Copy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopy(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Exists<WithAsyncMethod_Create<WithAsyncMethod_Delete<WithAsyncMethod_Clear<WithAsyncMethod_Move<WithAsyncMethod_Copy<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Exists() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response) { return this->Exists(context, request, response); }));}
    void SetMessageAllocatorFor_Exists(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Exists(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Exists(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Clear() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response) { return this->Clear(context, request, response); }));}
    void SetMessageAllocatorFor_Clear(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Clear(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Clear(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response) { return this->Move(context, request, response); }));}
    void SetMessageAllocatorFor_Move(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Copy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response) { return this->Copy(context, request, response); }));}
    void SetMessageAllocatorFor_Copy(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Copy(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Copy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Exists<ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Clear<ExperimentalWithCallbackMethod_Move<ExperimentalWithCallbackMethod_Copy<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Exists<ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Clear<ExperimentalWithCallbackMethod_Move<ExperimentalWithCallbackMethod_Copy<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Exists() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Clear() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Move() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Copy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Exists() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExists(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Clear() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Move() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Copy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Exists() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Exists(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Exists(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Exists(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Clear() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Clear(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Clear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Clear(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Move(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Copy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Copy(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Copy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Copy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Exists() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* streamer) {
                       return this->StreamedExists(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExists(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest,::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest,::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest,::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Clear() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* streamer) {
                       return this->StreamedClear(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Clear(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest,::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Move() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* streamer) {
                       return this->StreamedMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest,::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Copy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* streamer) {
                       return this->StreamedCopy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCopy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest,::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Exists<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Clear<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Copy<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Exists<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Clear<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Copy<Service > > > > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp


#endif  // GRPC_IDirectoryService_2eproto__INCLUDED
