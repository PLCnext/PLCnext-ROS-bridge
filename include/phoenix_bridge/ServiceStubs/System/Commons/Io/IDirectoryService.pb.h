// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IDirectoryService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IDirectoryService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IDirectoryService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "FileSystemError.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IDirectoryService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IDirectoryService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IDirectoryService_2eproto;
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {
class IDirectoryServiceClearRequest;
class IDirectoryServiceClearRequestDefaultTypeInternal;
extern IDirectoryServiceClearRequestDefaultTypeInternal _IDirectoryServiceClearRequest_default_instance_;
class IDirectoryServiceClearResponse;
class IDirectoryServiceClearResponseDefaultTypeInternal;
extern IDirectoryServiceClearResponseDefaultTypeInternal _IDirectoryServiceClearResponse_default_instance_;
class IDirectoryServiceCopyRequest;
class IDirectoryServiceCopyRequestDefaultTypeInternal;
extern IDirectoryServiceCopyRequestDefaultTypeInternal _IDirectoryServiceCopyRequest_default_instance_;
class IDirectoryServiceCopyResponse;
class IDirectoryServiceCopyResponseDefaultTypeInternal;
extern IDirectoryServiceCopyResponseDefaultTypeInternal _IDirectoryServiceCopyResponse_default_instance_;
class IDirectoryServiceCreateRequest;
class IDirectoryServiceCreateRequestDefaultTypeInternal;
extern IDirectoryServiceCreateRequestDefaultTypeInternal _IDirectoryServiceCreateRequest_default_instance_;
class IDirectoryServiceCreateResponse;
class IDirectoryServiceCreateResponseDefaultTypeInternal;
extern IDirectoryServiceCreateResponseDefaultTypeInternal _IDirectoryServiceCreateResponse_default_instance_;
class IDirectoryServiceDeleteRequest;
class IDirectoryServiceDeleteRequestDefaultTypeInternal;
extern IDirectoryServiceDeleteRequestDefaultTypeInternal _IDirectoryServiceDeleteRequest_default_instance_;
class IDirectoryServiceDeleteResponse;
class IDirectoryServiceDeleteResponseDefaultTypeInternal;
extern IDirectoryServiceDeleteResponseDefaultTypeInternal _IDirectoryServiceDeleteResponse_default_instance_;
class IDirectoryServiceExistsRequest;
class IDirectoryServiceExistsRequestDefaultTypeInternal;
extern IDirectoryServiceExistsRequestDefaultTypeInternal _IDirectoryServiceExistsRequest_default_instance_;
class IDirectoryServiceExistsResponse;
class IDirectoryServiceExistsResponseDefaultTypeInternal;
extern IDirectoryServiceExistsResponseDefaultTypeInternal _IDirectoryServiceExistsResponse_default_instance_;
class IDirectoryServiceMoveRequest;
class IDirectoryServiceMoveRequestDefaultTypeInternal;
extern IDirectoryServiceMoveRequestDefaultTypeInternal _IDirectoryServiceMoveRequest_default_instance_;
class IDirectoryServiceMoveResponse;
class IDirectoryServiceMoveResponseDefaultTypeInternal;
extern IDirectoryServiceMoveResponseDefaultTypeInternal _IDirectoryServiceMoveResponse_default_instance_;
}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest>(Arena*);
template<> ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* Arena::CreateMaybeMessage<::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {

// ===================================================================

class IDirectoryServiceExistsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest) */ {
 public:
  inline IDirectoryServiceExistsRequest() : IDirectoryServiceExistsRequest(nullptr) {}
  virtual ~IDirectoryServiceExistsRequest();

  IDirectoryServiceExistsRequest(const IDirectoryServiceExistsRequest& from);
  IDirectoryServiceExistsRequest(IDirectoryServiceExistsRequest&& from) noexcept
    : IDirectoryServiceExistsRequest() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceExistsRequest& operator=(const IDirectoryServiceExistsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceExistsRequest& operator=(IDirectoryServiceExistsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceExistsRequest& default_instance();

  static inline const IDirectoryServiceExistsRequest* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceExistsRequest*>(
               &_IDirectoryServiceExistsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IDirectoryServiceExistsRequest& a, IDirectoryServiceExistsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceExistsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceExistsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceExistsRequest* New() const final {
    return CreateMaybeMessage<IDirectoryServiceExistsRequest>(nullptr);
  }

  IDirectoryServiceExistsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceExistsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceExistsRequest& from);
  void MergeFrom(const IDirectoryServiceExistsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceExistsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest";
  }
  protected:
  explicit IDirectoryServiceExistsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceCreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest) */ {
 public:
  inline IDirectoryServiceCreateRequest() : IDirectoryServiceCreateRequest(nullptr) {}
  virtual ~IDirectoryServiceCreateRequest();

  IDirectoryServiceCreateRequest(const IDirectoryServiceCreateRequest& from);
  IDirectoryServiceCreateRequest(IDirectoryServiceCreateRequest&& from) noexcept
    : IDirectoryServiceCreateRequest() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceCreateRequest& operator=(const IDirectoryServiceCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceCreateRequest& operator=(IDirectoryServiceCreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceCreateRequest& default_instance();

  static inline const IDirectoryServiceCreateRequest* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceCreateRequest*>(
               &_IDirectoryServiceCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IDirectoryServiceCreateRequest& a, IDirectoryServiceCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceCreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceCreateRequest* New() const final {
    return CreateMaybeMessage<IDirectoryServiceCreateRequest>(nullptr);
  }

  IDirectoryServiceCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceCreateRequest& from);
  void MergeFrom(const IDirectoryServiceCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest";
  }
  protected:
  explicit IDirectoryServiceCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest) */ {
 public:
  inline IDirectoryServiceDeleteRequest() : IDirectoryServiceDeleteRequest(nullptr) {}
  virtual ~IDirectoryServiceDeleteRequest();

  IDirectoryServiceDeleteRequest(const IDirectoryServiceDeleteRequest& from);
  IDirectoryServiceDeleteRequest(IDirectoryServiceDeleteRequest&& from) noexcept
    : IDirectoryServiceDeleteRequest() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceDeleteRequest& operator=(const IDirectoryServiceDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceDeleteRequest& operator=(IDirectoryServiceDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceDeleteRequest& default_instance();

  static inline const IDirectoryServiceDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceDeleteRequest*>(
               &_IDirectoryServiceDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IDirectoryServiceDeleteRequest& a, IDirectoryServiceDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceDeleteRequest* New() const final {
    return CreateMaybeMessage<IDirectoryServiceDeleteRequest>(nullptr);
  }

  IDirectoryServiceDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceDeleteRequest& from);
  void MergeFrom(const IDirectoryServiceDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest";
  }
  protected:
  explicit IDirectoryServiceDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceClearRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest) */ {
 public:
  inline IDirectoryServiceClearRequest() : IDirectoryServiceClearRequest(nullptr) {}
  virtual ~IDirectoryServiceClearRequest();

  IDirectoryServiceClearRequest(const IDirectoryServiceClearRequest& from);
  IDirectoryServiceClearRequest(IDirectoryServiceClearRequest&& from) noexcept
    : IDirectoryServiceClearRequest() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceClearRequest& operator=(const IDirectoryServiceClearRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceClearRequest& operator=(IDirectoryServiceClearRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceClearRequest& default_instance();

  static inline const IDirectoryServiceClearRequest* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceClearRequest*>(
               &_IDirectoryServiceClearRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IDirectoryServiceClearRequest& a, IDirectoryServiceClearRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceClearRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceClearRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceClearRequest* New() const final {
    return CreateMaybeMessage<IDirectoryServiceClearRequest>(nullptr);
  }

  IDirectoryServiceClearRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceClearRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceClearRequest& from);
  void MergeFrom(const IDirectoryServiceClearRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceClearRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest";
  }
  protected:
  explicit IDirectoryServiceClearRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceMoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest) */ {
 public:
  inline IDirectoryServiceMoveRequest() : IDirectoryServiceMoveRequest(nullptr) {}
  virtual ~IDirectoryServiceMoveRequest();

  IDirectoryServiceMoveRequest(const IDirectoryServiceMoveRequest& from);
  IDirectoryServiceMoveRequest(IDirectoryServiceMoveRequest&& from) noexcept
    : IDirectoryServiceMoveRequest() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceMoveRequest& operator=(const IDirectoryServiceMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceMoveRequest& operator=(IDirectoryServiceMoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceMoveRequest& default_instance();

  static inline const IDirectoryServiceMoveRequest* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceMoveRequest*>(
               &_IDirectoryServiceMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IDirectoryServiceMoveRequest& a, IDirectoryServiceMoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceMoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceMoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceMoveRequest* New() const final {
    return CreateMaybeMessage<IDirectoryServiceMoveRequest>(nullptr);
  }

  IDirectoryServiceMoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceMoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceMoveRequest& from);
  void MergeFrom(const IDirectoryServiceMoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceMoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest";
  }
  protected:
  explicit IDirectoryServiceMoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePathFieldNumber = 1,
    kDestinationPathFieldNumber = 2,
    kClearFieldNumber = 3,
  };
  // string sourcePath = 1;
  void clear_sourcepath();
  const std::string& sourcepath() const;
  void set_sourcepath(const std::string& value);
  void set_sourcepath(std::string&& value);
  void set_sourcepath(const char* value);
  void set_sourcepath(const char* value, size_t size);
  std::string* mutable_sourcepath();
  std::string* release_sourcepath();
  void set_allocated_sourcepath(std::string* sourcepath);
  private:
  const std::string& _internal_sourcepath() const;
  void _internal_set_sourcepath(const std::string& value);
  std::string* _internal_mutable_sourcepath();
  public:

  // string destinationPath = 2;
  void clear_destinationpath();
  const std::string& destinationpath() const;
  void set_destinationpath(const std::string& value);
  void set_destinationpath(std::string&& value);
  void set_destinationpath(const char* value);
  void set_destinationpath(const char* value, size_t size);
  std::string* mutable_destinationpath();
  std::string* release_destinationpath();
  void set_allocated_destinationpath(std::string* destinationpath);
  private:
  const std::string& _internal_destinationpath() const;
  void _internal_set_destinationpath(const std::string& value);
  std::string* _internal_mutable_destinationpath();
  public:

  // bool clear = 3;
  void clear_clear();
  bool clear() const;
  void set_clear(bool value);
  private:
  bool _internal_clear() const;
  void _internal_set_clear(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destinationpath_;
  bool clear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceCopyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest) */ {
 public:
  inline IDirectoryServiceCopyRequest() : IDirectoryServiceCopyRequest(nullptr) {}
  virtual ~IDirectoryServiceCopyRequest();

  IDirectoryServiceCopyRequest(const IDirectoryServiceCopyRequest& from);
  IDirectoryServiceCopyRequest(IDirectoryServiceCopyRequest&& from) noexcept
    : IDirectoryServiceCopyRequest() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceCopyRequest& operator=(const IDirectoryServiceCopyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceCopyRequest& operator=(IDirectoryServiceCopyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceCopyRequest& default_instance();

  static inline const IDirectoryServiceCopyRequest* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceCopyRequest*>(
               &_IDirectoryServiceCopyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IDirectoryServiceCopyRequest& a, IDirectoryServiceCopyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceCopyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceCopyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceCopyRequest* New() const final {
    return CreateMaybeMessage<IDirectoryServiceCopyRequest>(nullptr);
  }

  IDirectoryServiceCopyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceCopyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceCopyRequest& from);
  void MergeFrom(const IDirectoryServiceCopyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceCopyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest";
  }
  protected:
  explicit IDirectoryServiceCopyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePathFieldNumber = 1,
    kDestinationPathFieldNumber = 2,
    kClearFieldNumber = 3,
  };
  // string sourcePath = 1;
  void clear_sourcepath();
  const std::string& sourcepath() const;
  void set_sourcepath(const std::string& value);
  void set_sourcepath(std::string&& value);
  void set_sourcepath(const char* value);
  void set_sourcepath(const char* value, size_t size);
  std::string* mutable_sourcepath();
  std::string* release_sourcepath();
  void set_allocated_sourcepath(std::string* sourcepath);
  private:
  const std::string& _internal_sourcepath() const;
  void _internal_set_sourcepath(const std::string& value);
  std::string* _internal_mutable_sourcepath();
  public:

  // string destinationPath = 2;
  void clear_destinationpath();
  const std::string& destinationpath() const;
  void set_destinationpath(const std::string& value);
  void set_destinationpath(std::string&& value);
  void set_destinationpath(const char* value);
  void set_destinationpath(const char* value, size_t size);
  std::string* mutable_destinationpath();
  std::string* release_destinationpath();
  void set_allocated_destinationpath(std::string* destinationpath);
  private:
  const std::string& _internal_destinationpath() const;
  void _internal_set_destinationpath(const std::string& value);
  std::string* _internal_mutable_destinationpath();
  public:

  // bool clear = 3;
  void clear_clear();
  bool clear() const;
  void set_clear(bool value);
  private:
  bool _internal_clear() const;
  void _internal_set_clear(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destinationpath_;
  bool clear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceExistsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsResponse) */ {
 public:
  inline IDirectoryServiceExistsResponse() : IDirectoryServiceExistsResponse(nullptr) {}
  virtual ~IDirectoryServiceExistsResponse();

  IDirectoryServiceExistsResponse(const IDirectoryServiceExistsResponse& from);
  IDirectoryServiceExistsResponse(IDirectoryServiceExistsResponse&& from) noexcept
    : IDirectoryServiceExistsResponse() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceExistsResponse& operator=(const IDirectoryServiceExistsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceExistsResponse& operator=(IDirectoryServiceExistsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceExistsResponse& default_instance();

  static inline const IDirectoryServiceExistsResponse* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceExistsResponse*>(
               &_IDirectoryServiceExistsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IDirectoryServiceExistsResponse& a, IDirectoryServiceExistsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceExistsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceExistsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceExistsResponse* New() const final {
    return CreateMaybeMessage<IDirectoryServiceExistsResponse>(nullptr);
  }

  IDirectoryServiceExistsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceExistsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceExistsResponse& from);
  void MergeFrom(const IDirectoryServiceExistsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceExistsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsResponse";
  }
  protected:
  explicit IDirectoryServiceExistsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceCreateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateResponse) */ {
 public:
  inline IDirectoryServiceCreateResponse() : IDirectoryServiceCreateResponse(nullptr) {}
  virtual ~IDirectoryServiceCreateResponse();

  IDirectoryServiceCreateResponse(const IDirectoryServiceCreateResponse& from);
  IDirectoryServiceCreateResponse(IDirectoryServiceCreateResponse&& from) noexcept
    : IDirectoryServiceCreateResponse() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceCreateResponse& operator=(const IDirectoryServiceCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceCreateResponse& operator=(IDirectoryServiceCreateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceCreateResponse& default_instance();

  static inline const IDirectoryServiceCreateResponse* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceCreateResponse*>(
               &_IDirectoryServiceCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IDirectoryServiceCreateResponse& a, IDirectoryServiceCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceCreateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceCreateResponse* New() const final {
    return CreateMaybeMessage<IDirectoryServiceCreateResponse>(nullptr);
  }

  IDirectoryServiceCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceCreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceCreateResponse& from);
  void MergeFrom(const IDirectoryServiceCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceCreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateResponse";
  }
  protected:
  explicit IDirectoryServiceCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteResponse) */ {
 public:
  inline IDirectoryServiceDeleteResponse() : IDirectoryServiceDeleteResponse(nullptr) {}
  virtual ~IDirectoryServiceDeleteResponse();

  IDirectoryServiceDeleteResponse(const IDirectoryServiceDeleteResponse& from);
  IDirectoryServiceDeleteResponse(IDirectoryServiceDeleteResponse&& from) noexcept
    : IDirectoryServiceDeleteResponse() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceDeleteResponse& operator=(const IDirectoryServiceDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceDeleteResponse& operator=(IDirectoryServiceDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceDeleteResponse& default_instance();

  static inline const IDirectoryServiceDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceDeleteResponse*>(
               &_IDirectoryServiceDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IDirectoryServiceDeleteResponse& a, IDirectoryServiceDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceDeleteResponse* New() const final {
    return CreateMaybeMessage<IDirectoryServiceDeleteResponse>(nullptr);
  }

  IDirectoryServiceDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceDeleteResponse& from);
  void MergeFrom(const IDirectoryServiceDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteResponse";
  }
  protected:
  explicit IDirectoryServiceDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceClearResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearResponse) */ {
 public:
  inline IDirectoryServiceClearResponse() : IDirectoryServiceClearResponse(nullptr) {}
  virtual ~IDirectoryServiceClearResponse();

  IDirectoryServiceClearResponse(const IDirectoryServiceClearResponse& from);
  IDirectoryServiceClearResponse(IDirectoryServiceClearResponse&& from) noexcept
    : IDirectoryServiceClearResponse() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceClearResponse& operator=(const IDirectoryServiceClearResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceClearResponse& operator=(IDirectoryServiceClearResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceClearResponse& default_instance();

  static inline const IDirectoryServiceClearResponse* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceClearResponse*>(
               &_IDirectoryServiceClearResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IDirectoryServiceClearResponse& a, IDirectoryServiceClearResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceClearResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceClearResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceClearResponse* New() const final {
    return CreateMaybeMessage<IDirectoryServiceClearResponse>(nullptr);
  }

  IDirectoryServiceClearResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceClearResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceClearResponse& from);
  void MergeFrom(const IDirectoryServiceClearResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceClearResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearResponse";
  }
  protected:
  explicit IDirectoryServiceClearResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceMoveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveResponse) */ {
 public:
  inline IDirectoryServiceMoveResponse() : IDirectoryServiceMoveResponse(nullptr) {}
  virtual ~IDirectoryServiceMoveResponse();

  IDirectoryServiceMoveResponse(const IDirectoryServiceMoveResponse& from);
  IDirectoryServiceMoveResponse(IDirectoryServiceMoveResponse&& from) noexcept
    : IDirectoryServiceMoveResponse() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceMoveResponse& operator=(const IDirectoryServiceMoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceMoveResponse& operator=(IDirectoryServiceMoveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceMoveResponse& default_instance();

  static inline const IDirectoryServiceMoveResponse* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceMoveResponse*>(
               &_IDirectoryServiceMoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IDirectoryServiceMoveResponse& a, IDirectoryServiceMoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceMoveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceMoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceMoveResponse* New() const final {
    return CreateMaybeMessage<IDirectoryServiceMoveResponse>(nullptr);
  }

  IDirectoryServiceMoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceMoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceMoveResponse& from);
  void MergeFrom(const IDirectoryServiceMoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceMoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveResponse";
  }
  protected:
  explicit IDirectoryServiceMoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// -------------------------------------------------------------------

class IDirectoryServiceCopyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyResponse) */ {
 public:
  inline IDirectoryServiceCopyResponse() : IDirectoryServiceCopyResponse(nullptr) {}
  virtual ~IDirectoryServiceCopyResponse();

  IDirectoryServiceCopyResponse(const IDirectoryServiceCopyResponse& from);
  IDirectoryServiceCopyResponse(IDirectoryServiceCopyResponse&& from) noexcept
    : IDirectoryServiceCopyResponse() {
    *this = ::std::move(from);
  }

  inline IDirectoryServiceCopyResponse& operator=(const IDirectoryServiceCopyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDirectoryServiceCopyResponse& operator=(IDirectoryServiceCopyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDirectoryServiceCopyResponse& default_instance();

  static inline const IDirectoryServiceCopyResponse* internal_default_instance() {
    return reinterpret_cast<const IDirectoryServiceCopyResponse*>(
               &_IDirectoryServiceCopyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IDirectoryServiceCopyResponse& a, IDirectoryServiceCopyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDirectoryServiceCopyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDirectoryServiceCopyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDirectoryServiceCopyResponse* New() const final {
    return CreateMaybeMessage<IDirectoryServiceCopyResponse>(nullptr);
  }

  IDirectoryServiceCopyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDirectoryServiceCopyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDirectoryServiceCopyResponse& from);
  void MergeFrom(const IDirectoryServiceCopyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDirectoryServiceCopyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyResponse";
  }
  protected:
  explicit IDirectoryServiceCopyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDirectoryService_2eproto);
    return ::descriptor_table_IDirectoryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _returnvalue() const;
  void set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  private:
  ::Arp::System::Commons::Services::Io::Grpc::FileSystemError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDirectoryService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IDirectoryServiceExistsRequest

// string path = 1;
inline void IDirectoryServiceExistsRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceExistsRequest::path() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
  return _internal_path();
}
inline void IDirectoryServiceExistsRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
}
inline std::string* IDirectoryServiceExistsRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
  return _internal_mutable_path();
}
inline const std::string& IDirectoryServiceExistsRequest::_internal_path() const {
  return path_.Get();
}
inline void IDirectoryServiceExistsRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceExistsRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
}
inline void IDirectoryServiceExistsRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
}
inline void IDirectoryServiceExistsRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
}
inline std::string* IDirectoryServiceExistsRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceExistsRequest::release_path() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceExistsRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsRequest.path)
}

// -------------------------------------------------------------------

// IDirectoryServiceCreateRequest

// string path = 1;
inline void IDirectoryServiceCreateRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceCreateRequest::path() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
  return _internal_path();
}
inline void IDirectoryServiceCreateRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
}
inline std::string* IDirectoryServiceCreateRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
  return _internal_mutable_path();
}
inline const std::string& IDirectoryServiceCreateRequest::_internal_path() const {
  return path_.Get();
}
inline void IDirectoryServiceCreateRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceCreateRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
}
inline void IDirectoryServiceCreateRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
}
inline void IDirectoryServiceCreateRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
}
inline std::string* IDirectoryServiceCreateRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceCreateRequest::release_path() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceCreateRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateRequest.path)
}

// -------------------------------------------------------------------

// IDirectoryServiceDeleteRequest

// string path = 1;
inline void IDirectoryServiceDeleteRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceDeleteRequest::path() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
  return _internal_path();
}
inline void IDirectoryServiceDeleteRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
}
inline std::string* IDirectoryServiceDeleteRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
  return _internal_mutable_path();
}
inline const std::string& IDirectoryServiceDeleteRequest::_internal_path() const {
  return path_.Get();
}
inline void IDirectoryServiceDeleteRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceDeleteRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
}
inline void IDirectoryServiceDeleteRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
}
inline void IDirectoryServiceDeleteRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
}
inline std::string* IDirectoryServiceDeleteRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceDeleteRequest::release_path() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceDeleteRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteRequest.path)
}

// -------------------------------------------------------------------

// IDirectoryServiceClearRequest

// string path = 1;
inline void IDirectoryServiceClearRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceClearRequest::path() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
  return _internal_path();
}
inline void IDirectoryServiceClearRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
}
inline std::string* IDirectoryServiceClearRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
  return _internal_mutable_path();
}
inline const std::string& IDirectoryServiceClearRequest::_internal_path() const {
  return path_.Get();
}
inline void IDirectoryServiceClearRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceClearRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
}
inline void IDirectoryServiceClearRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
}
inline void IDirectoryServiceClearRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
}
inline std::string* IDirectoryServiceClearRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceClearRequest::release_path() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceClearRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearRequest.path)
}

// -------------------------------------------------------------------

// IDirectoryServiceMoveRequest

// string sourcePath = 1;
inline void IDirectoryServiceMoveRequest::clear_sourcepath() {
  sourcepath_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceMoveRequest::sourcepath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
  return _internal_sourcepath();
}
inline void IDirectoryServiceMoveRequest::set_sourcepath(const std::string& value) {
  _internal_set_sourcepath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
}
inline std::string* IDirectoryServiceMoveRequest::mutable_sourcepath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
  return _internal_mutable_sourcepath();
}
inline const std::string& IDirectoryServiceMoveRequest::_internal_sourcepath() const {
  return sourcepath_.Get();
}
inline void IDirectoryServiceMoveRequest::_internal_set_sourcepath(const std::string& value) {
  
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceMoveRequest::set_sourcepath(std::string&& value) {
  
  sourcepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
}
inline void IDirectoryServiceMoveRequest::set_sourcepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
}
inline void IDirectoryServiceMoveRequest::set_sourcepath(const char* value,
    size_t size) {
  
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
}
inline std::string* IDirectoryServiceMoveRequest::_internal_mutable_sourcepath() {
  
  return sourcepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceMoveRequest::release_sourcepath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
  return sourcepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceMoveRequest::set_allocated_sourcepath(std::string* sourcepath) {
  if (sourcepath != nullptr) {
    
  } else {
    
  }
  sourcepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.sourcePath)
}

// string destinationPath = 2;
inline void IDirectoryServiceMoveRequest::clear_destinationpath() {
  destinationpath_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceMoveRequest::destinationpath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
  return _internal_destinationpath();
}
inline void IDirectoryServiceMoveRequest::set_destinationpath(const std::string& value) {
  _internal_set_destinationpath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
}
inline std::string* IDirectoryServiceMoveRequest::mutable_destinationpath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
  return _internal_mutable_destinationpath();
}
inline const std::string& IDirectoryServiceMoveRequest::_internal_destinationpath() const {
  return destinationpath_.Get();
}
inline void IDirectoryServiceMoveRequest::_internal_set_destinationpath(const std::string& value) {
  
  destinationpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceMoveRequest::set_destinationpath(std::string&& value) {
  
  destinationpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
}
inline void IDirectoryServiceMoveRequest::set_destinationpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destinationpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
}
inline void IDirectoryServiceMoveRequest::set_destinationpath(const char* value,
    size_t size) {
  
  destinationpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
}
inline std::string* IDirectoryServiceMoveRequest::_internal_mutable_destinationpath() {
  
  return destinationpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceMoveRequest::release_destinationpath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
  return destinationpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceMoveRequest::set_allocated_destinationpath(std::string* destinationpath) {
  if (destinationpath != nullptr) {
    
  } else {
    
  }
  destinationpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destinationpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.destinationPath)
}

// bool clear = 3;
inline void IDirectoryServiceMoveRequest::clear_clear() {
  clear_ = false;
}
inline bool IDirectoryServiceMoveRequest::_internal_clear() const {
  return clear_;
}
inline bool IDirectoryServiceMoveRequest::clear() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.clear)
  return _internal_clear();
}
inline void IDirectoryServiceMoveRequest::_internal_set_clear(bool value) {
  
  clear_ = value;
}
inline void IDirectoryServiceMoveRequest::set_clear(bool value) {
  _internal_set_clear(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveRequest.clear)
}

// -------------------------------------------------------------------

// IDirectoryServiceCopyRequest

// string sourcePath = 1;
inline void IDirectoryServiceCopyRequest::clear_sourcepath() {
  sourcepath_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceCopyRequest::sourcepath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
  return _internal_sourcepath();
}
inline void IDirectoryServiceCopyRequest::set_sourcepath(const std::string& value) {
  _internal_set_sourcepath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
}
inline std::string* IDirectoryServiceCopyRequest::mutable_sourcepath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
  return _internal_mutable_sourcepath();
}
inline const std::string& IDirectoryServiceCopyRequest::_internal_sourcepath() const {
  return sourcepath_.Get();
}
inline void IDirectoryServiceCopyRequest::_internal_set_sourcepath(const std::string& value) {
  
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceCopyRequest::set_sourcepath(std::string&& value) {
  
  sourcepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
}
inline void IDirectoryServiceCopyRequest::set_sourcepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
}
inline void IDirectoryServiceCopyRequest::set_sourcepath(const char* value,
    size_t size) {
  
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
}
inline std::string* IDirectoryServiceCopyRequest::_internal_mutable_sourcepath() {
  
  return sourcepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceCopyRequest::release_sourcepath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
  return sourcepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceCopyRequest::set_allocated_sourcepath(std::string* sourcepath) {
  if (sourcepath != nullptr) {
    
  } else {
    
  }
  sourcepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.sourcePath)
}

// string destinationPath = 2;
inline void IDirectoryServiceCopyRequest::clear_destinationpath() {
  destinationpath_.ClearToEmpty();
}
inline const std::string& IDirectoryServiceCopyRequest::destinationpath() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
  return _internal_destinationpath();
}
inline void IDirectoryServiceCopyRequest::set_destinationpath(const std::string& value) {
  _internal_set_destinationpath(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
}
inline std::string* IDirectoryServiceCopyRequest::mutable_destinationpath() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
  return _internal_mutable_destinationpath();
}
inline const std::string& IDirectoryServiceCopyRequest::_internal_destinationpath() const {
  return destinationpath_.Get();
}
inline void IDirectoryServiceCopyRequest::_internal_set_destinationpath(const std::string& value) {
  
  destinationpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDirectoryServiceCopyRequest::set_destinationpath(std::string&& value) {
  
  destinationpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
}
inline void IDirectoryServiceCopyRequest::set_destinationpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destinationpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
}
inline void IDirectoryServiceCopyRequest::set_destinationpath(const char* value,
    size_t size) {
  
  destinationpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
}
inline std::string* IDirectoryServiceCopyRequest::_internal_mutable_destinationpath() {
  
  return destinationpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDirectoryServiceCopyRequest::release_destinationpath() {
  // @@protoc_insertion_point(field_release:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
  return destinationpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDirectoryServiceCopyRequest::set_allocated_destinationpath(std::string* destinationpath) {
  if (destinationpath != nullptr) {
    
  } else {
    
  }
  destinationpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destinationpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.destinationPath)
}

// bool clear = 3;
inline void IDirectoryServiceCopyRequest::clear_clear() {
  clear_ = false;
}
inline bool IDirectoryServiceCopyRequest::_internal_clear() const {
  return clear_;
}
inline bool IDirectoryServiceCopyRequest::clear() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.clear)
  return _internal_clear();
}
inline void IDirectoryServiceCopyRequest::_internal_set_clear(bool value) {
  
  clear_ = value;
}
inline void IDirectoryServiceCopyRequest::set_clear(bool value) {
  _internal_set_clear(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyRequest.clear)
}

// -------------------------------------------------------------------

// IDirectoryServiceExistsResponse

// bool _ReturnValue = 1;
inline void IDirectoryServiceExistsResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool IDirectoryServiceExistsResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool IDirectoryServiceExistsResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDirectoryServiceExistsResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void IDirectoryServiceExistsResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceExistsResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDirectoryServiceCreateResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IDirectoryServiceCreateResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceCreateResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceCreateResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDirectoryServiceCreateResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IDirectoryServiceCreateResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCreateResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDirectoryServiceDeleteResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IDirectoryServiceDeleteResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceDeleteResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceDeleteResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDirectoryServiceDeleteResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IDirectoryServiceDeleteResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceDeleteResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDirectoryServiceClearResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IDirectoryServiceClearResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceClearResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceClearResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDirectoryServiceClearResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IDirectoryServiceClearResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceClearResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDirectoryServiceMoveResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IDirectoryServiceMoveResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceMoveResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceMoveResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDirectoryServiceMoveResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IDirectoryServiceMoveResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceMoveResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDirectoryServiceCopyResponse

// .Arp.System.Commons.Services.Io.Grpc.FileSystemError _ReturnValue = 1;
inline void IDirectoryServiceCopyResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceCopyResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::System::Commons::Services::Io::Grpc::FileSystemError >(_returnvalue_);
}
inline ::Arp::System::Commons::Services::Io::Grpc::FileSystemError IDirectoryServiceCopyResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDirectoryServiceCopyResponse::_internal_set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  
  _returnvalue_ = value;
}
inline void IDirectoryServiceCopyResponse::set__returnvalue(::Arp::System::Commons::Services::Io::Grpc::FileSystemError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Commons.Services.Io.Grpc.IDirectoryServiceCopyResponse._ReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IDirectoryService_2eproto
