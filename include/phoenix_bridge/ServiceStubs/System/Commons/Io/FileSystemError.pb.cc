// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileSystemError.proto

#include "FileSystemError.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {
}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_FileSystemError_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_FileSystemError_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FileSystemError_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FileSystemError_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_FileSystemError_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025FileSystemError.proto\022#Arp.System.Comm"
  "ons.Services.Io.Grpc*\230\001\n\017FileSystemError"
  "\022\014\n\010FSE_None\020\000\022\017\n\013FSE_Unknown\020\001\022\023\n\017FSE_I"
  "nvalidPath\020\002\022\020\n\014FSE_NotExist\020\003\022\025\n\021FSE_Al"
  "readyExists\020\004\022\024\n\020FSE_AccessDenied\020\005\022\022\n\016F"
  "SE_OutOfSpace\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FileSystemError_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_FileSystemError_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FileSystemError_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileSystemError_2eproto = {
  false, false, descriptor_table_protodef_FileSystemError_2eproto, "FileSystemError.proto", 223,
  &descriptor_table_FileSystemError_2eproto_once, descriptor_table_FileSystemError_2eproto_sccs, descriptor_table_FileSystemError_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_FileSystemError_2eproto::offsets,
  file_level_metadata_FileSystemError_2eproto, 0, file_level_enum_descriptors_FileSystemError_2eproto, file_level_service_descriptors_FileSystemError_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_FileSystemError_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_FileSystemError_2eproto)), true);
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileSystemError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FileSystemError_2eproto);
  return file_level_enum_descriptors_FileSystemError_2eproto[0];
}
bool FileSystemError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
