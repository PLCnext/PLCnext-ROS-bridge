// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IDirectoryService.proto

#include "IDirectoryService.pb.h"
#include "IDirectoryService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {

static const char* IDirectoryService_method_names[] = {
  "/Arp.System.Commons.Services.Io.Grpc.IDirectoryService/Exists",
  "/Arp.System.Commons.Services.Io.Grpc.IDirectoryService/Create",
  "/Arp.System.Commons.Services.Io.Grpc.IDirectoryService/Delete",
  "/Arp.System.Commons.Services.Io.Grpc.IDirectoryService/Clear",
  "/Arp.System.Commons.Services.Io.Grpc.IDirectoryService/Move",
  "/Arp.System.Commons.Services.Io.Grpc.IDirectoryService/Copy",
};

std::unique_ptr< IDirectoryService::Stub> IDirectoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IDirectoryService::Stub> stub(new IDirectoryService::Stub(channel));
  return stub;
}

IDirectoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Exists_(IDirectoryService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(IDirectoryService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(IDirectoryService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Clear_(IDirectoryService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Move_(IDirectoryService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Copy_(IDirectoryService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IDirectoryService::Stub::Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exists_, context, request, response);
}

void IDirectoryService::Stub::experimental_async::Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exists_, context, request, response, std::move(f));
}

void IDirectoryService::Stub::experimental_async::Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exists_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* IDirectoryService::Stub::PrepareAsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exists_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse>* IDirectoryService::Stub::AsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExistsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDirectoryService::Stub::Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void IDirectoryService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void IDirectoryService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* IDirectoryService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse>* IDirectoryService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDirectoryService::Stub::Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void IDirectoryService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void IDirectoryService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* IDirectoryService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse>* IDirectoryService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDirectoryService::Stub::Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Clear_, context, request, response);
}

void IDirectoryService::Stub::experimental_async::Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, std::move(f));
}

void IDirectoryService::Stub::experimental_async::Clear(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* IDirectoryService::Stub::PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse>* IDirectoryService::Stub::AsyncClearRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDirectoryService::Stub::Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Move_, context, request, response);
}

void IDirectoryService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void IDirectoryService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* IDirectoryService::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse>* IDirectoryService::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDirectoryService::Stub::Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Copy_, context, request, response);
}

void IDirectoryService::Stub::experimental_async::Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Copy_, context, request, response, std::move(f));
}

void IDirectoryService::Stub::experimental_async::Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Copy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* IDirectoryService::Stub::PrepareAsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Copy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse>* IDirectoryService::Stub::AsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCopyRaw(context, request, cq);
  result->StartCall();
  return result;
}

IDirectoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDirectoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDirectoryService::Service, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* resp) {
               return service->Exists(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDirectoryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDirectoryService::Service, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDirectoryService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDirectoryService::Service, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDirectoryService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDirectoryService::Service, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* resp) {
               return service->Clear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDirectoryService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDirectoryService::Service, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* resp) {
               return service->Move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDirectoryService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDirectoryService::Service, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* resp) {
               return service->Copy(ctx, req, resp);
             }, this)));
}

IDirectoryService::Service::~Service() {
}

::grpc::Status IDirectoryService::Service::Exists(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceExistsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDirectoryService::Service::Create(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDirectoryService::Service::Delete(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDirectoryService::Service::Clear(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceClearResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDirectoryService::Service::Move(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDirectoryService::Service::Copy(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IDirectoryServiceCopyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arp
}  // namespace System
}  // namespace Commons
}  // namespace Services
}  // namespace Io
}  // namespace Grpc

