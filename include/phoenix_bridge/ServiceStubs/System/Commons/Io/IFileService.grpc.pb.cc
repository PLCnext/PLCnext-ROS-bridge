// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IFileService.proto

#include "IFileService.pb.h"
#include "IFileService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {

static const char* IFileService_method_names[] = {
  "/Arp.System.Commons.Services.Io.Grpc.IFileService/Exists",
  "/Arp.System.Commons.Services.Io.Grpc.IFileService/Delete",
  "/Arp.System.Commons.Services.Io.Grpc.IFileService/Move",
  "/Arp.System.Commons.Services.Io.Grpc.IFileService/Copy",
};

std::unique_ptr< IFileService::Stub> IFileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IFileService::Stub> stub(new IFileService::Stub(channel));
  return stub;
}

IFileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Exists_(IFileService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(IFileService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Move_(IFileService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Copy_(IFileService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IFileService::Stub::Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exists_, context, request, response);
}

void IFileService::Stub::experimental_async::Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exists_, context, request, response, std::move(f));
}

void IFileService::Stub::experimental_async::Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exists_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* IFileService::Stub::PrepareAsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exists_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* IFileService::Stub::AsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExistsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IFileService::Stub::Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void IFileService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void IFileService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* IFileService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* IFileService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IFileService::Stub::Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Move_, context, request, response);
}

void IFileService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void IFileService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* IFileService::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* IFileService::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IFileService::Stub::Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Copy_, context, request, response);
}

void IFileService::Stub::experimental_async::Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Copy_, context, request, response, std::move(f));
}

void IFileService::Stub::experimental_async::Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Copy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* IFileService::Stub::PrepareAsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Copy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* IFileService::Stub::AsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCopyRaw(context, request, cq);
  result->StartCall();
  return result;
}

IFileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IFileService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IFileService::Service, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IFileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* resp) {
               return service->Exists(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IFileService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IFileService::Service, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IFileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IFileService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IFileService::Service, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IFileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* resp) {
               return service->Move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IFileService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IFileService::Service, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IFileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* req,
             ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* resp) {
               return service->Copy(ctx, req, resp);
             }, this)));
}

IFileService::Service::~Service() {
}

::grpc::Status IFileService::Service::Exists(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IFileService::Service::Delete(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IFileService::Service::Move(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IFileService::Service::Copy(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arp
}  // namespace System
}  // namespace Commons
}  // namespace Services
}  // namespace Io
}  // namespace Grpc

