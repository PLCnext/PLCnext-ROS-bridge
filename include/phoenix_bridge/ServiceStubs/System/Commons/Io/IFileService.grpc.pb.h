// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IFileService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_IFileService_2eproto__INCLUDED
#define GRPC_IFileService_2eproto__INCLUDED

#include "IFileService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {

// *
// Provides common file operations for reading and writing files
// as well as deleting/moving/copying files on the device.
// 
// <div>
// The path separator is always '/'.
// </div>
//
class IFileService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Checks if the specified file exists.
    // / </summary>
    // / <param name="path">Path of the file to check.</param>
    // / <returns>
    // / <c>true</c> if the file exists, otherwise <c>false</c>.
    // / </returns>
    virtual ::grpc::Status Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>> AsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>>(AsyncExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>> PrepareAsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>>(PrepareAsyncExistsRaw(context, request, cq));
    }
    // / <summary>
    // / Deletes the specified file.
    // / </summary>
    // / <param name="filePath">The pathe of the file to delete.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // / <summary>
    // / Moves the specified file.
    // / </summary>
    // / <param name="createDirectory">if set to <c>true</c> the directory of the file is created (recursively), if it does not exists yet.</param>
    // / <param name="overwrite">if set to <c>true</c> the destination file is overwritten, if it yet exists, otherwise an error is returned.</param>
    // / <param name="sourceFilePath">The source path of the file to move.</param>
    // / <param name="destinationFilePath">The destination path of the file to move.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>> AsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    // / <summary>
    // / Copies the specified files.
    // / </summary>
    // / <param name="createDirectory">if set to <c>true</c> the directory of the file is created (recursively), if it does not exists yet.</param>
    // / <param name="overwrite">if set to <c>true</c> the destination file is overwritten, if it yet exists, otherwise an error is returned.</param>
    // / <param name="sourceFilePath">The source path of the file to copy.</param>
    // / <param name="destinationFilePath">The destination path of the file to copy.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>> AsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>>(AsyncCopyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>> PrepareAsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>>(PrepareAsyncCopyRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Checks if the specified file exists.
      // / </summary>
      // / <param name="path">Path of the file to check.</param>
      // / <returns>
      // / <c>true</c> if the file exists, otherwise <c>false</c>.
      // / </returns>
      virtual void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Deletes the specified file.
      // / </summary>
      // / <param name="filePath">The pathe of the file to delete.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Moves the specified file.
      // / </summary>
      // / <param name="createDirectory">if set to <c>true</c> the directory of the file is created (recursively), if it does not exists yet.</param>
      // / <param name="overwrite">if set to <c>true</c> the destination file is overwritten, if it yet exists, otherwise an error is returned.</param>
      // / <param name="sourceFilePath">The source path of the file to move.</param>
      // / <param name="destinationFilePath">The destination path of the file to move.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Copies the specified files.
      // / </summary>
      // / <param name="createDirectory">if set to <c>true</c> the directory of the file is created (recursively), if it does not exists yet.</param>
      // / <param name="overwrite">if set to <c>true</c> the destination file is overwritten, if it yet exists, otherwise an error is returned.</param>
      // / <param name="sourceFilePath">The source path of the file to copy.</param>
      // / <param name="destinationFilePath">The destination path of the file to copy.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* AsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* PrepareAsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* AsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* PrepareAsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>> AsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>>(AsyncExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>> PrepareAsyncExists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>>(PrepareAsyncExistsRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>> AsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    ::grpc::Status Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>> AsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>>(AsyncCopyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>> PrepareAsyncCopy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>>(PrepareAsyncCopyRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Exists(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Move(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Copy(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* AsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* PrepareAsyncExistsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* AsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* PrepareAsyncCopyRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Exists_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Move_;
    const ::grpc::internal::RpcMethod rpcmethod_Copy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Checks if the specified file exists.
    // / </summary>
    // / <param name="path">Path of the file to check.</param>
    // / <returns>
    // / <c>true</c> if the file exists, otherwise <c>false</c>.
    // / </returns>
    virtual ::grpc::Status Exists(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response);
    // / <summary>
    // / Deletes the specified file.
    // / </summary>
    // / <param name="filePath">The pathe of the file to delete.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response);
    // / <summary>
    // / Moves the specified file.
    // / </summary>
    // / <param name="createDirectory">if set to <c>true</c> the directory of the file is created (recursively), if it does not exists yet.</param>
    // / <param name="overwrite">if set to <c>true</c> the destination file is overwritten, if it yet exists, otherwise an error is returned.</param>
    // / <param name="sourceFilePath">The source path of the file to move.</param>
    // / <param name="destinationFilePath">The destination path of the file to move.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Move(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response);
    // / <summary>
    // / Copies the specified files.
    // / </summary>
    // / <param name="createDirectory">if set to <c>true</c> the directory of the file is created (recursively), if it does not exists yet.</param>
    // / <param name="overwrite">if set to <c>true</c> the destination file is overwritten, if it yet exists, otherwise an error is returned.</param>
    // / <param name="sourceFilePath">The source path of the file to copy.</param>
    // / <param name="destinationFilePath">The destination path of the file to copy.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status Copy(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Exists() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExists(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Move() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Copy() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopy(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Exists<WithAsyncMethod_Delete<WithAsyncMethod_Move<WithAsyncMethod_Copy<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Exists() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* response) { return this->Exists(context, request, response); }));}
    void SetMessageAllocatorFor_Exists(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Exists(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Exists(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* response) { return this->Move(context, request, response); }));}
    void SetMessageAllocatorFor_Move(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Copy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* response) { return this->Copy(context, request, response); }));}
    void SetMessageAllocatorFor_Copy(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Copy(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Copy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Exists<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Move<ExperimentalWithCallbackMethod_Copy<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Exists<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Move<ExperimentalWithCallbackMethod_Copy<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Exists() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Move() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Copy() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Exists() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExists(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Move() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Copy() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Exists() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Exists(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Exists(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Exists(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Move(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Copy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Copy(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Copy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Copy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Exists() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* streamer) {
                       return this->StreamedExists(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Exists(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExists(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsRequest,::Arp::System::Commons::Services::Io::Grpc::IFileServiceExistsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteRequest,::Arp::System::Commons::Services::Io::Grpc::IFileServiceDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Move() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* streamer) {
                       return this->StreamedMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveRequest,::Arp::System::Commons::Services::Io::Grpc::IFileServiceMoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Copy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Copy() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* streamer) {
                       return this->StreamedCopy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Copy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Copy(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCopy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyRequest,::Arp::System::Commons::Services::Io::Grpc::IFileServiceCopyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Exists<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Copy<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Exists<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Copy<Service > > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp


#endif  // GRPC_IFileService_2eproto__INCLUDED
