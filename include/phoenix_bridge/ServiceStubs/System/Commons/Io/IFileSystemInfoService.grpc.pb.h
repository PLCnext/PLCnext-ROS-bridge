// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IFileSystemInfoService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_IFileSystemInfoService_2eproto__INCLUDED
#define GRPC_IFileSystemInfoService_2eproto__INCLUDED

#include "IFileSystemInfoService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace System {
namespace Commons {
namespace Services {
namespace Io {
namespace Grpc {

// *
// A generic service to retrieve file system infos.
// 
// <div>
// The path separator is always '/'.
// </div>
//
class IFileSystemInfoService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.System.Commons.Services.Io.Grpc.IFileSystemInfoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Gets the supported traits.
    // / </summary>
    // / <returns>The supported traits as bitset.</returns>
    virtual ::grpc::Status GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>> AsyncGetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>>(AsyncGetSupportedTraitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>> PrepareAsyncGetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>>(PrepareAsyncGetSupportedTraitsRaw(context, request, cq));
    }
    // / <summary>
    // / Gets the permissions of the specified path.
    // / </summary>
    // / <param name="path">The path to get the permissions from.</param>
    // / <param name="permissions">The permissions of the specified path.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>> AsyncGetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    // / <summary>
    // / Adds the permissions to the specified path.
    // / </summary>
    // / <param name="path">The path to add the permissions from.</param>
    // / <param name="permissions">The  permissions to add.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>> AsyncAddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>>(AsyncAddPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>> PrepareAsyncAddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>>(PrepareAsyncAddPermissionsRaw(context, request, cq));
    }
    // / <summary>
    // / Removes the permissions of the specified path.
    // / </summary>
    // / <param name="path">The path to remove the permissions from.</param>
    // / <param name="permissions">The permissions to remove.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>> AsyncRemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>>(AsyncRemovePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>> PrepareAsyncRemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>>(PrepareAsyncRemovePermissionsRaw(context, request, cq));
    }
    // / <summary>
    // / Gets the file system traits entry of the specified path.
    // / </summary>
    // / <param name="traits">The selection of traits to get.</param>
    // / <param name="path">The path to get the file system traits entry from.</param>
    // / <param name="fileSystemTraitsEntry">The file system traits entry of the specified path</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>> AsyncGetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>>(AsyncGetFileSystemTraitsEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>> PrepareAsyncGetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>>(PrepareAsyncGetFileSystemTraitsEntryRaw(context, request, cq));
    }
    // / <summary>
    // / Gets the space information of the specified path.
    // / </summary>
    // / <param name="path">The path to get the space information from.</param>
    // / <param name="spaceInfo">The space information of the specified path.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>> AsyncGetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>>(AsyncGetSpaceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>> PrepareAsyncGetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>>(PrepareAsyncGetSpaceInfoRaw(context, request, cq));
    }
    // / <summary>
    // / Gets a list of all root directories supported by the target.
    // / </summary>
    // / <returns>
    // / A list of list of all root directories.
    // / </returns>
    virtual ::grpc::Status GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>> AsyncGetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>>(AsyncGetRootDirectoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>> PrepareAsyncGetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>>(PrepareAsyncGetRootDirectoriesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Gets the supported traits.
      // / </summary>
      // / <returns>The supported traits as bitset.</returns>
      virtual void GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Gets the permissions of the specified path.
      // / </summary>
      // / <param name="path">The path to get the permissions from.</param>
      // / <param name="permissions">The permissions of the specified path.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Adds the permissions to the specified path.
      // / </summary>
      // / <param name="path">The path to add the permissions from.</param>
      // / <param name="permissions">The  permissions to add.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Removes the permissions of the specified path.
      // / </summary>
      // / <param name="path">The path to remove the permissions from.</param>
      // / <param name="permissions">The permissions to remove.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Gets the file system traits entry of the specified path.
      // / </summary>
      // / <param name="traits">The selection of traits to get.</param>
      // / <param name="path">The path to get the file system traits entry from.</param>
      // / <param name="fileSystemTraitsEntry">The file system traits entry of the specified path</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Gets the space information of the specified path.
      // / </summary>
      // / <param name="path">The path to get the space information from.</param>
      // / <param name="spaceInfo">The space information of the specified path.</param>
      // / <returns>
      // / Result of the action.
      // / </returns>
      virtual void GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Gets a list of all root directories supported by the target.
      // / </summary>
      // / <returns>
      // / A list of list of all root directories.
      // / </returns>
      virtual void GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* AsyncGetSupportedTraitsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* PrepareAsyncGetSupportedTraitsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* AsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* PrepareAsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* AsyncRemovePermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* PrepareAsyncRemovePermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* AsyncGetFileSystemTraitsEntryRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* PrepareAsyncGetFileSystemTraitsEntryRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* AsyncGetSpaceInfoRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* PrepareAsyncGetSpaceInfoRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* AsyncGetRootDirectoriesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* PrepareAsyncGetRootDirectoriesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>> AsyncGetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>>(AsyncGetSupportedTraitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>> PrepareAsyncGetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>>(PrepareAsyncGetSupportedTraitsRaw(context, request, cq));
    }
    ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>> AsyncGetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    ::grpc::Status AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>> AsyncAddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>>(AsyncAddPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>> PrepareAsyncAddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>>(PrepareAsyncAddPermissionsRaw(context, request, cq));
    }
    ::grpc::Status RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>> AsyncRemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>>(AsyncRemovePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>> PrepareAsyncRemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>>(PrepareAsyncRemovePermissionsRaw(context, request, cq));
    }
    ::grpc::Status GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>> AsyncGetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>>(AsyncGetFileSystemTraitsEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>> PrepareAsyncGetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>>(PrepareAsyncGetFileSystemTraitsEntryRaw(context, request, cq));
    }
    ::grpc::Status GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>> AsyncGetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>>(AsyncGetSpaceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>> PrepareAsyncGetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>>(PrepareAsyncGetSpaceInfoRaw(context, request, cq));
    }
    ::grpc::Status GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>> AsyncGetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>>(AsyncGetRootDirectoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>> PrepareAsyncGetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>>(PrepareAsyncGetRootDirectoriesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSupportedTraits(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddPermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemovePermissions(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFileSystemTraitsEntry(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSpaceInfo(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRootDirectories(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* AsyncGetSupportedTraitsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* PrepareAsyncGetSupportedTraitsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* AsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* PrepareAsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* AsyncRemovePermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* PrepareAsyncRemovePermissionsRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* AsyncGetFileSystemTraitsEntryRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* PrepareAsyncGetFileSystemTraitsEntryRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* AsyncGetSpaceInfoRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* PrepareAsyncGetSpaceInfoRaw(::grpc::ClientContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* AsyncGetRootDirectoriesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* PrepareAsyncGetRootDirectoriesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSupportedTraits_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_RemovePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileSystemTraitsEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpaceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRootDirectories_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Gets the supported traits.
    // / </summary>
    // / <returns>The supported traits as bitset.</returns>
    virtual ::grpc::Status GetSupportedTraits(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response);
    // / <summary>
    // / Gets the permissions of the specified path.
    // / </summary>
    // / <param name="path">The path to get the permissions from.</param>
    // / <param name="permissions">The permissions of the specified path.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status GetPermissions(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response);
    // / <summary>
    // / Adds the permissions to the specified path.
    // / </summary>
    // / <param name="path">The path to add the permissions from.</param>
    // / <param name="permissions">The  permissions to add.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status AddPermissions(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response);
    // / <summary>
    // / Removes the permissions of the specified path.
    // / </summary>
    // / <param name="path">The path to remove the permissions from.</param>
    // / <param name="permissions">The permissions to remove.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status RemovePermissions(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response);
    // / <summary>
    // / Gets the file system traits entry of the specified path.
    // / </summary>
    // / <param name="traits">The selection of traits to get.</param>
    // / <param name="path">The path to get the file system traits entry from.</param>
    // / <param name="fileSystemTraitsEntry">The file system traits entry of the specified path</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status GetFileSystemTraitsEntry(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response);
    // / <summary>
    // / Gets the space information of the specified path.
    // / </summary>
    // / <param name="path">The path to get the space information from.</param>
    // / <param name="spaceInfo">The space information of the specified path.</param>
    // / <returns>
    // / Result of the action.
    // / </returns>
    virtual ::grpc::Status GetSpaceInfo(::grpc::ServerContext* context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response);
    // / <summary>
    // / Gets a list of all root directories supported by the target.
    // / </summary>
    // / <returns>
    // / A list of list of all root directories.
    // / </returns>
    virtual ::grpc::Status GetRootDirectories(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSupportedTraits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSupportedTraits() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSupportedTraits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSupportedTraits(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSupportedTraits(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermissions() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPermissions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPermissions(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemovePermissions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemovePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePermissions(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileSystemTraitsEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFileSystemTraitsEntry() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetFileSystemTraitsEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSystemTraitsEntry(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSystemTraitsEntry(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpaceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpaceInfo() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetSpaceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceInfo(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpaceInfo(::grpc::ServerContext* context, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRootDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRootDirectories() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetRootDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootDirectories(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRootDirectories(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSupportedTraits<WithAsyncMethod_GetPermissions<WithAsyncMethod_AddPermissions<WithAsyncMethod_RemovePermissions<WithAsyncMethod_GetFileSystemTraitsEntry<WithAsyncMethod_GetSpaceInfo<WithAsyncMethod_GetRootDirectories<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSupportedTraits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSupportedTraits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* response) { return this->GetSupportedTraits(context, request, response); }));}
    void SetMessageAllocatorFor_GetSupportedTraits(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSupportedTraits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSupportedTraits(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSupportedTraits(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSupportedTraits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* response) { return this->GetPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_GetPermissions(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* response) { return this->AddPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_AddPermissions(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemovePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemovePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* response) { return this->RemovePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_RemovePermissions(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemovePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFileSystemTraitsEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFileSystemTraitsEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* response) { return this->GetFileSystemTraitsEntry(context, request, response); }));}
    void SetMessageAllocatorFor_GetFileSystemTraitsEntry(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFileSystemTraitsEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSystemTraitsEntry(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFileSystemTraitsEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFileSystemTraitsEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSpaceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSpaceInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* response) { return this->GetSpaceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpaceInfo(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSpaceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceInfo(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSpaceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSpaceInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRootDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRootDirectories() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* response) { return this->GetRootDirectories(context, request, response); }));}
    void SetMessageAllocatorFor_GetRootDirectories(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRootDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootDirectories(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRootDirectories(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRootDirectories(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetSupportedTraits<ExperimentalWithCallbackMethod_GetPermissions<ExperimentalWithCallbackMethod_AddPermissions<ExperimentalWithCallbackMethod_RemovePermissions<ExperimentalWithCallbackMethod_GetFileSystemTraitsEntry<ExperimentalWithCallbackMethod_GetSpaceInfo<ExperimentalWithCallbackMethod_GetRootDirectories<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetSupportedTraits<ExperimentalWithCallbackMethod_GetPermissions<ExperimentalWithCallbackMethod_AddPermissions<ExperimentalWithCallbackMethod_RemovePermissions<ExperimentalWithCallbackMethod_GetFileSystemTraitsEntry<ExperimentalWithCallbackMethod_GetSpaceInfo<ExperimentalWithCallbackMethod_GetRootDirectories<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSupportedTraits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSupportedTraits() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSupportedTraits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSupportedTraits(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermissions() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPermissions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemovePermissions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemovePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileSystemTraitsEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFileSystemTraitsEntry() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetFileSystemTraitsEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSystemTraitsEntry(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpaceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpaceInfo() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetSpaceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceInfo(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRootDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRootDirectories() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetRootDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootDirectories(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSupportedTraits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSupportedTraits() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSupportedTraits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSupportedTraits(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSupportedTraits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermissions() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPermissions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemovePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemovePermissions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemovePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileSystemTraitsEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFileSystemTraitsEntry() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetFileSystemTraitsEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSystemTraitsEntry(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSystemTraitsEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpaceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpaceInfo() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetSpaceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceInfo(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpaceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRootDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRootDirectories() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetRootDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootDirectories(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRootDirectories(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSupportedTraits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSupportedTraits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSupportedTraits(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSupportedTraits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSupportedTraits(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSupportedTraits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSupportedTraits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemovePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemovePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemovePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemovePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFileSystemTraitsEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFileSystemTraitsEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFileSystemTraitsEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFileSystemTraitsEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSystemTraitsEntry(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFileSystemTraitsEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFileSystemTraitsEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSpaceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSpaceInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpaceInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSpaceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceInfo(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSpaceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSpaceInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRootDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRootDirectories() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRootDirectories(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRootDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootDirectories(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRootDirectories(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRootDirectories(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSupportedTraits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSupportedTraits() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* streamer) {
                       return this->StreamedGetSupportedTraits(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSupportedTraits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSupportedTraits(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSupportedTraits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSupportedTraitsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermissions() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* streamer) {
                       return this->StreamedGetPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsRequest,::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetPermissionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPermissions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* streamer) {
                       return this->StreamedAddPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsRequest,::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceAddPermissionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemovePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemovePermissions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* streamer) {
                       return this->StreamedRemovePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemovePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemovePermissions(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemovePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsRequest,::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceRemovePermissionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileSystemTraitsEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFileSystemTraitsEntry() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* streamer) {
                       return this->StreamedGetFileSystemTraitsEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFileSystemTraitsEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileSystemTraitsEntry(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileSystemTraitsEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryRequest,::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetFileSystemTraitsEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpaceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpaceInfo() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* streamer) {
                       return this->StreamedGetSpaceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpaceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpaceInfo(::grpc::ServerContext* /*context*/, const ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpaceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoRequest,::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetSpaceInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRootDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRootDirectories() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* streamer) {
                       return this->StreamedGetRootDirectories(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRootDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRootDirectories(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRootDirectories(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Arp::System::Commons::Services::Io::Grpc::IFileSystemInfoServiceGetRootDirectoriesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSupportedTraits<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_AddPermissions<WithStreamedUnaryMethod_RemovePermissions<WithStreamedUnaryMethod_GetFileSystemTraitsEntry<WithStreamedUnaryMethod_GetSpaceInfo<WithStreamedUnaryMethod_GetRootDirectories<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSupportedTraits<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_AddPermissions<WithStreamedUnaryMethod_RemovePermissions<WithStreamedUnaryMethod_GetFileSystemTraitsEntry<WithStreamedUnaryMethod_GetSpaceInfo<WithStreamedUnaryMethod_GetRootDirectories<Service > > > > > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Io
}  // namespace Services
}  // namespace Commons
}  // namespace System
}  // namespace Arp


#endif  // GRPC_IFileSystemInfoService_2eproto__INCLUDED
