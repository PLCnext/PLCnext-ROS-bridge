// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelInformation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChannelInformation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChannelInformation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChannelInformation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChannelInformation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChannelInformation_2eproto;
namespace Arp {
namespace System {
namespace Um {
namespace Services {
namespace Grpc {
class ChannelInformation;
class ChannelInformationDefaultTypeInternal;
extern ChannelInformationDefaultTypeInternal _ChannelInformation_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Um
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::System::Um::Services::Grpc::ChannelInformation* Arena::CreateMaybeMessage<::Arp::System::Um::Services::Grpc::ChannelInformation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace System {
namespace Um {
namespace Services {
namespace Grpc {

// ===================================================================

class ChannelInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Um.Services.Grpc.ChannelInformation) */ {
 public:
  inline ChannelInformation() : ChannelInformation(nullptr) {}
  virtual ~ChannelInformation();

  ChannelInformation(const ChannelInformation& from);
  ChannelInformation(ChannelInformation&& from) noexcept
    : ChannelInformation() {
    *this = ::std::move(from);
  }

  inline ChannelInformation& operator=(const ChannelInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelInformation& operator=(ChannelInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelInformation& default_instance();

  static inline const ChannelInformation* internal_default_instance() {
    return reinterpret_cast<const ChannelInformation*>(
               &_ChannelInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChannelInformation& a, ChannelInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelInformation* New() const final {
    return CreateMaybeMessage<ChannelInformation>(nullptr);
  }

  ChannelInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelInformation& from);
  void MergeFrom(const ChannelInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Um.Services.Grpc.ChannelInformation";
  }
  protected:
  explicit ChannelInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChannelInformation_2eproto);
    return ::descriptor_table_ChannelInformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolObjectNameFieldNumber = 2,
    kGatewayIDFieldNumber = 1,
  };
  // string ProtocolObjectName = 2;
  void clear_protocolobjectname();
  const std::string& protocolobjectname() const;
  void set_protocolobjectname(const std::string& value);
  void set_protocolobjectname(std::string&& value);
  void set_protocolobjectname(const char* value);
  void set_protocolobjectname(const char* value, size_t size);
  std::string* mutable_protocolobjectname();
  std::string* release_protocolobjectname();
  void set_allocated_protocolobjectname(std::string* protocolobjectname);
  private:
  const std::string& _internal_protocolobjectname() const;
  void _internal_set_protocolobjectname(const std::string& value);
  std::string* _internal_mutable_protocolobjectname();
  public:

  // uint32 GatewayID = 1;
  void clear_gatewayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gatewayid() const;
  void set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gatewayid() const;
  void _internal_set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Um.Services.Grpc.ChannelInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocolobjectname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gatewayid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChannelInformation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelInformation

// uint32 GatewayID = 1;
inline void ChannelInformation::clear_gatewayid() {
  gatewayid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelInformation::_internal_gatewayid() const {
  return gatewayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelInformation::gatewayid() const {
  // @@protoc_insertion_point(field_get:Arp.System.Um.Services.Grpc.ChannelInformation.GatewayID)
  return _internal_gatewayid();
}
inline void ChannelInformation::_internal_set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gatewayid_ = value;
}
inline void ChannelInformation::set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gatewayid(value);
  // @@protoc_insertion_point(field_set:Arp.System.Um.Services.Grpc.ChannelInformation.GatewayID)
}

// string ProtocolObjectName = 2;
inline void ChannelInformation::clear_protocolobjectname() {
  protocolobjectname_.ClearToEmpty();
}
inline const std::string& ChannelInformation::protocolobjectname() const {
  // @@protoc_insertion_point(field_get:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
  return _internal_protocolobjectname();
}
inline void ChannelInformation::set_protocolobjectname(const std::string& value) {
  _internal_set_protocolobjectname(value);
  // @@protoc_insertion_point(field_set:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
}
inline std::string* ChannelInformation::mutable_protocolobjectname() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
  return _internal_mutable_protocolobjectname();
}
inline const std::string& ChannelInformation::_internal_protocolobjectname() const {
  return protocolobjectname_.Get();
}
inline void ChannelInformation::_internal_set_protocolobjectname(const std::string& value) {
  
  protocolobjectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelInformation::set_protocolobjectname(std::string&& value) {
  
  protocolobjectname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
}
inline void ChannelInformation::set_protocolobjectname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocolobjectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
}
inline void ChannelInformation::set_protocolobjectname(const char* value,
    size_t size) {
  
  protocolobjectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
}
inline std::string* ChannelInformation::_internal_mutable_protocolobjectname() {
  
  return protocolobjectname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelInformation::release_protocolobjectname() {
  // @@protoc_insertion_point(field_release:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
  return protocolobjectname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelInformation::set_allocated_protocolobjectname(std::string* protocolobjectname) {
  if (protocolobjectname != nullptr) {
    
  } else {
    
  }
  protocolobjectname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocolobjectname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Um.Services.Grpc.ChannelInformation.ProtocolObjectName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace Um
}  // namespace System
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChannelInformation_2eproto
