// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IAuthorizationInfoService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IAuthorizationInfoService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IAuthorizationInfoService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SecurityToken.pb.h"
#include "Operation.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IAuthorizationInfoService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IAuthorizationInfoService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IAuthorizationInfoService_2eproto;
namespace Arp {
namespace System {
namespace Um {
namespace Services {
namespace Grpc {
class IAuthorizationInfoServiceHasPermissionForRequest;
class IAuthorizationInfoServiceHasPermissionForRequestDefaultTypeInternal;
extern IAuthorizationInfoServiceHasPermissionForRequestDefaultTypeInternal _IAuthorizationInfoServiceHasPermissionForRequest_default_instance_;
class IAuthorizationInfoServiceHasPermissionForResponse;
class IAuthorizationInfoServiceHasPermissionForResponseDefaultTypeInternal;
extern IAuthorizationInfoServiceHasPermissionForResponseDefaultTypeInternal _IAuthorizationInfoServiceHasPermissionForResponse_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Um
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::System::Um::Services::Grpc::IAuthorizationInfoServiceHasPermissionForRequest* Arena::CreateMaybeMessage<::Arp::System::Um::Services::Grpc::IAuthorizationInfoServiceHasPermissionForRequest>(Arena*);
template<> ::Arp::System::Um::Services::Grpc::IAuthorizationInfoServiceHasPermissionForResponse* Arena::CreateMaybeMessage<::Arp::System::Um::Services::Grpc::IAuthorizationInfoServiceHasPermissionForResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace System {
namespace Um {
namespace Services {
namespace Grpc {

// ===================================================================

class IAuthorizationInfoServiceHasPermissionForRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest) */ {
 public:
  inline IAuthorizationInfoServiceHasPermissionForRequest() : IAuthorizationInfoServiceHasPermissionForRequest(nullptr) {}
  virtual ~IAuthorizationInfoServiceHasPermissionForRequest();

  IAuthorizationInfoServiceHasPermissionForRequest(const IAuthorizationInfoServiceHasPermissionForRequest& from);
  IAuthorizationInfoServiceHasPermissionForRequest(IAuthorizationInfoServiceHasPermissionForRequest&& from) noexcept
    : IAuthorizationInfoServiceHasPermissionForRequest() {
    *this = ::std::move(from);
  }

  inline IAuthorizationInfoServiceHasPermissionForRequest& operator=(const IAuthorizationInfoServiceHasPermissionForRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IAuthorizationInfoServiceHasPermissionForRequest& operator=(IAuthorizationInfoServiceHasPermissionForRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IAuthorizationInfoServiceHasPermissionForRequest& default_instance();

  static inline const IAuthorizationInfoServiceHasPermissionForRequest* internal_default_instance() {
    return reinterpret_cast<const IAuthorizationInfoServiceHasPermissionForRequest*>(
               &_IAuthorizationInfoServiceHasPermissionForRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IAuthorizationInfoServiceHasPermissionForRequest& a, IAuthorizationInfoServiceHasPermissionForRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IAuthorizationInfoServiceHasPermissionForRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IAuthorizationInfoServiceHasPermissionForRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IAuthorizationInfoServiceHasPermissionForRequest* New() const final {
    return CreateMaybeMessage<IAuthorizationInfoServiceHasPermissionForRequest>(nullptr);
  }

  IAuthorizationInfoServiceHasPermissionForRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IAuthorizationInfoServiceHasPermissionForRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IAuthorizationInfoServiceHasPermissionForRequest& from);
  void MergeFrom(const IAuthorizationInfoServiceHasPermissionForRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IAuthorizationInfoServiceHasPermissionForRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest";
  }
  protected:
  explicit IAuthorizationInfoServiceHasPermissionForRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IAuthorizationInfoService_2eproto);
    return ::descriptor_table_IAuthorizationInfoService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 1,
    kSecurityTokenFieldNumber = 3,
    kOperationFieldNumber = 2,
  };
  // string entity = 1;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // .Arp.System.Security.Grpc.SecurityToken securityToken = 3;
  bool has_securitytoken() const;
  private:
  bool _internal_has_securitytoken() const;
  public:
  void clear_securitytoken();
  const ::Arp::System::Security::Grpc::SecurityToken& securitytoken() const;
  ::Arp::System::Security::Grpc::SecurityToken* release_securitytoken();
  ::Arp::System::Security::Grpc::SecurityToken* mutable_securitytoken();
  void set_allocated_securitytoken(::Arp::System::Security::Grpc::SecurityToken* securitytoken);
  private:
  const ::Arp::System::Security::Grpc::SecurityToken& _internal_securitytoken() const;
  ::Arp::System::Security::Grpc::SecurityToken* _internal_mutable_securitytoken();
  public:
  void unsafe_arena_set_allocated_securitytoken(
      ::Arp::System::Security::Grpc::SecurityToken* securitytoken);
  ::Arp::System::Security::Grpc::SecurityToken* unsafe_arena_release_securitytoken();

  // .Arp.System.Um.Commons.Grpc.Operation operation = 2;
  void clear_operation();
  ::Arp::System::Um::Commons::Grpc::Operation operation() const;
  void set_operation(::Arp::System::Um::Commons::Grpc::Operation value);
  private:
  ::Arp::System::Um::Commons::Grpc::Operation _internal_operation() const;
  void _internal_set_operation(::Arp::System::Um::Commons::Grpc::Operation value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::Arp::System::Security::Grpc::SecurityToken* securitytoken_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IAuthorizationInfoService_2eproto;
};
// -------------------------------------------------------------------

class IAuthorizationInfoServiceHasPermissionForResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForResponse) */ {
 public:
  inline IAuthorizationInfoServiceHasPermissionForResponse() : IAuthorizationInfoServiceHasPermissionForResponse(nullptr) {}
  virtual ~IAuthorizationInfoServiceHasPermissionForResponse();

  IAuthorizationInfoServiceHasPermissionForResponse(const IAuthorizationInfoServiceHasPermissionForResponse& from);
  IAuthorizationInfoServiceHasPermissionForResponse(IAuthorizationInfoServiceHasPermissionForResponse&& from) noexcept
    : IAuthorizationInfoServiceHasPermissionForResponse() {
    *this = ::std::move(from);
  }

  inline IAuthorizationInfoServiceHasPermissionForResponse& operator=(const IAuthorizationInfoServiceHasPermissionForResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IAuthorizationInfoServiceHasPermissionForResponse& operator=(IAuthorizationInfoServiceHasPermissionForResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IAuthorizationInfoServiceHasPermissionForResponse& default_instance();

  static inline const IAuthorizationInfoServiceHasPermissionForResponse* internal_default_instance() {
    return reinterpret_cast<const IAuthorizationInfoServiceHasPermissionForResponse*>(
               &_IAuthorizationInfoServiceHasPermissionForResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IAuthorizationInfoServiceHasPermissionForResponse& a, IAuthorizationInfoServiceHasPermissionForResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IAuthorizationInfoServiceHasPermissionForResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IAuthorizationInfoServiceHasPermissionForResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IAuthorizationInfoServiceHasPermissionForResponse* New() const final {
    return CreateMaybeMessage<IAuthorizationInfoServiceHasPermissionForResponse>(nullptr);
  }

  IAuthorizationInfoServiceHasPermissionForResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IAuthorizationInfoServiceHasPermissionForResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IAuthorizationInfoServiceHasPermissionForResponse& from);
  void MergeFrom(const IAuthorizationInfoServiceHasPermissionForResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IAuthorizationInfoServiceHasPermissionForResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForResponse";
  }
  protected:
  explicit IAuthorizationInfoServiceHasPermissionForResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IAuthorizationInfoService_2eproto);
    return ::descriptor_table_IAuthorizationInfoService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IAuthorizationInfoService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IAuthorizationInfoServiceHasPermissionForRequest

// string entity = 1;
inline void IAuthorizationInfoServiceHasPermissionForRequest::clear_entity() {
  entity_.ClearToEmpty();
}
inline const std::string& IAuthorizationInfoServiceHasPermissionForRequest::entity() const {
  // @@protoc_insertion_point(field_get:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
  return _internal_entity();
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
}
inline std::string* IAuthorizationInfoServiceHasPermissionForRequest::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
  return _internal_mutable_entity();
}
inline const std::string& IAuthorizationInfoServiceHasPermissionForRequest::_internal_entity() const {
  return entity_.Get();
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::_internal_set_entity(const std::string& value) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::set_entity(std::string&& value) {
  
  entity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::set_entity(const char* value,
    size_t size) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
}
inline std::string* IAuthorizationInfoServiceHasPermissionForRequest::_internal_mutable_entity() {
  
  return entity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IAuthorizationInfoServiceHasPermissionForRequest::release_entity() {
  // @@protoc_insertion_point(field_release:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
  return entity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.entity)
}

// .Arp.System.Um.Commons.Grpc.Operation operation = 2;
inline void IAuthorizationInfoServiceHasPermissionForRequest::clear_operation() {
  operation_ = 0;
}
inline ::Arp::System::Um::Commons::Grpc::Operation IAuthorizationInfoServiceHasPermissionForRequest::_internal_operation() const {
  return static_cast< ::Arp::System::Um::Commons::Grpc::Operation >(operation_);
}
inline ::Arp::System::Um::Commons::Grpc::Operation IAuthorizationInfoServiceHasPermissionForRequest::operation() const {
  // @@protoc_insertion_point(field_get:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.operation)
  return _internal_operation();
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::_internal_set_operation(::Arp::System::Um::Commons::Grpc::Operation value) {
  
  operation_ = value;
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::set_operation(::Arp::System::Um::Commons::Grpc::Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.operation)
}

// .Arp.System.Security.Grpc.SecurityToken securityToken = 3;
inline bool IAuthorizationInfoServiceHasPermissionForRequest::_internal_has_securitytoken() const {
  return this != internal_default_instance() && securitytoken_ != nullptr;
}
inline bool IAuthorizationInfoServiceHasPermissionForRequest::has_securitytoken() const {
  return _internal_has_securitytoken();
}
inline const ::Arp::System::Security::Grpc::SecurityToken& IAuthorizationInfoServiceHasPermissionForRequest::_internal_securitytoken() const {
  const ::Arp::System::Security::Grpc::SecurityToken* p = securitytoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::System::Security::Grpc::SecurityToken&>(
      ::Arp::System::Security::Grpc::_SecurityToken_default_instance_);
}
inline const ::Arp::System::Security::Grpc::SecurityToken& IAuthorizationInfoServiceHasPermissionForRequest::securitytoken() const {
  // @@protoc_insertion_point(field_get:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.securityToken)
  return _internal_securitytoken();
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::unsafe_arena_set_allocated_securitytoken(
    ::Arp::System::Security::Grpc::SecurityToken* securitytoken) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitytoken_);
  }
  securitytoken_ = securitytoken;
  if (securitytoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.securityToken)
}
inline ::Arp::System::Security::Grpc::SecurityToken* IAuthorizationInfoServiceHasPermissionForRequest::release_securitytoken() {
  
  ::Arp::System::Security::Grpc::SecurityToken* temp = securitytoken_;
  securitytoken_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::System::Security::Grpc::SecurityToken* IAuthorizationInfoServiceHasPermissionForRequest::unsafe_arena_release_securitytoken() {
  // @@protoc_insertion_point(field_release:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.securityToken)
  
  ::Arp::System::Security::Grpc::SecurityToken* temp = securitytoken_;
  securitytoken_ = nullptr;
  return temp;
}
inline ::Arp::System::Security::Grpc::SecurityToken* IAuthorizationInfoServiceHasPermissionForRequest::_internal_mutable_securitytoken() {
  
  if (securitytoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::System::Security::Grpc::SecurityToken>(GetArena());
    securitytoken_ = p;
  }
  return securitytoken_;
}
inline ::Arp::System::Security::Grpc::SecurityToken* IAuthorizationInfoServiceHasPermissionForRequest::mutable_securitytoken() {
  // @@protoc_insertion_point(field_mutable:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.securityToken)
  return _internal_mutable_securitytoken();
}
inline void IAuthorizationInfoServiceHasPermissionForRequest::set_allocated_securitytoken(::Arp::System::Security::Grpc::SecurityToken* securitytoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitytoken_);
  }
  if (securitytoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitytoken)->GetArena();
    if (message_arena != submessage_arena) {
      securitytoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securitytoken, submessage_arena);
    }
    
  } else {
    
  }
  securitytoken_ = securitytoken;
  // @@protoc_insertion_point(field_set_allocated:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForRequest.securityToken)
}

// -------------------------------------------------------------------

// IAuthorizationInfoServiceHasPermissionForResponse

// bool _ReturnValue = 1;
inline void IAuthorizationInfoServiceHasPermissionForResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool IAuthorizationInfoServiceHasPermissionForResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool IAuthorizationInfoServiceHasPermissionForResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IAuthorizationInfoServiceHasPermissionForResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void IAuthorizationInfoServiceHasPermissionForResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Um.Services.Grpc.IAuthorizationInfoServiceHasPermissionForResponse._ReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace Um
}  // namespace System
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IAuthorizationInfoService_2eproto
