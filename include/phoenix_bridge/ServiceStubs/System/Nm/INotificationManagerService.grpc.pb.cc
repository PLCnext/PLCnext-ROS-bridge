// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: INotificationManagerService.proto

#include "INotificationManagerService.pb.h"
#include "INotificationManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arp {
namespace System {
namespace Nm {
namespace Services {
namespace Grpc {

static const char* INotificationManagerService_method_names[] = {
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/RegisterNotification",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/UnregisterNotification",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/SendNotification",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetNotificationName",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetNotificationNameId",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetNotificationNameIdsByStatus",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetAllKnownNotificationNameIds",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetNotificationRegistration",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetPayloadTypeId",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetPayloadTypeName",
  "/Arp.System.Nm.Services.Grpc.INotificationManagerService/GetNumberOfSubmittedNotifications",
};

std::unique_ptr< INotificationManagerService::Stub> INotificationManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< INotificationManagerService::Stub> stub(new INotificationManagerService::Stub(channel));
  return stub;
}

INotificationManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterNotification_(INotificationManagerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterNotification_(INotificationManagerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendNotification_(INotificationManagerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNotificationName_(INotificationManagerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNotificationNameId_(INotificationManagerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNotificationNameIdsByStatus_(INotificationManagerService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllKnownNotificationNameIds_(INotificationManagerService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNotificationRegistration_(INotificationManagerService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPayloadTypeId_(INotificationManagerService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPayloadTypeName_(INotificationManagerService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNumberOfSubmittedNotifications_(INotificationManagerService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status INotificationManagerService::Stub::RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterNotification_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterNotification_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* INotificationManagerService::Stub::PrepareAsyncRegisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterNotification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* INotificationManagerService::Stub::AsyncRegisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterNotificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnregisterNotification_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterNotification_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* INotificationManagerService::Stub::PrepareAsyncUnregisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnregisterNotification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* INotificationManagerService::Stub::AsyncUnregisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnregisterNotificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNotification_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNotification_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* INotificationManagerService::Stub::PrepareAsyncSendNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNotification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* INotificationManagerService::Stub::AsyncSendNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNotificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNotificationName_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationName_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* INotificationManagerService::Stub::PrepareAsyncGetNotificationNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNotificationName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* INotificationManagerService::Stub::AsyncGetNotificationNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNotificationNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNotificationNameId_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationNameId_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationNameId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* INotificationManagerService::Stub::PrepareAsyncGetNotificationNameIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNotificationNameId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* INotificationManagerService::Stub::AsyncGetNotificationNameIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNotificationNameIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNotificationNameIdsByStatus_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationNameIdsByStatus_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationNameIdsByStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* INotificationManagerService::Stub::PrepareAsyncGetNotificationNameIdsByStatusRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNotificationNameIdsByStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* INotificationManagerService::Stub::AsyncGetNotificationNameIdsByStatusRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNotificationNameIdsByStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllKnownNotificationNameIds_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllKnownNotificationNameIds_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllKnownNotificationNameIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* INotificationManagerService::Stub::PrepareAsyncGetAllKnownNotificationNameIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllKnownNotificationNameIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* INotificationManagerService::Stub::AsyncGetAllKnownNotificationNameIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllKnownNotificationNameIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNotificationRegistration_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationRegistration_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotificationRegistration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* INotificationManagerService::Stub::PrepareAsyncGetNotificationRegistrationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNotificationRegistration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* INotificationManagerService::Stub::AsyncGetNotificationRegistrationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNotificationRegistrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPayloadTypeId_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPayloadTypeId_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPayloadTypeId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* INotificationManagerService::Stub::PrepareAsyncGetPayloadTypeIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPayloadTypeId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* INotificationManagerService::Stub::AsyncGetPayloadTypeIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPayloadTypeIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPayloadTypeName_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPayloadTypeName_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPayloadTypeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* INotificationManagerService::Stub::PrepareAsyncGetPayloadTypeNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPayloadTypeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* INotificationManagerService::Stub::AsyncGetPayloadTypeNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPayloadTypeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status INotificationManagerService::Stub::GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNumberOfSubmittedNotifications_, context, request, response);
}

void INotificationManagerService::Stub::experimental_async::GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberOfSubmittedNotifications_, context, request, response, std::move(f));
}

void INotificationManagerService::Stub::experimental_async::GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberOfSubmittedNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* INotificationManagerService::Stub::PrepareAsyncGetNumberOfSubmittedNotificationsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNumberOfSubmittedNotifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* INotificationManagerService::Stub::AsyncGetNumberOfSubmittedNotificationsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNumberOfSubmittedNotificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

INotificationManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* resp) {
               return service->RegisterNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnregisterNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* resp) {
               return service->SendNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* resp) {
               return service->GetNotificationName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* resp) {
               return service->GetNotificationNameId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* resp) {
               return service->GetNotificationNameIdsByStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* resp) {
               return service->GetAllKnownNotificationNameIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* resp) {
               return service->GetNotificationRegistration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* resp) {
               return service->GetPayloadTypeId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* resp) {
               return service->GetPayloadTypeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      INotificationManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< INotificationManagerService::Service, ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](INotificationManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* resp) {
               return service->GetNumberOfSubmittedNotifications(ctx, req, resp);
             }, this)));
}

INotificationManagerService::Service::~Service() {
}

::grpc::Status INotificationManagerService::Service::RegisterNotification(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::UnregisterNotification(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::SendNotification(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetNotificationName(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetNotificationNameId(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetNotificationNameIdsByStatus(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetAllKnownNotificationNameIds(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetNotificationRegistration(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetPayloadTypeId(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetPayloadTypeName(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status INotificationManagerService::Service::GetNumberOfSubmittedNotifications(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arp
}  // namespace System
}  // namespace Nm
}  // namespace Services
}  // namespace Grpc

