// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NotificationRegistrationInfo.proto

#include "NotificationRegistrationInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Arp {
namespace System {
namespace Nm {
namespace Services {
namespace Grpc {
class NotificationRegistrationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotificationRegistrationInfo> _instance;
} _NotificationRegistrationInfo_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Nm
}  // namespace System
}  // namespace Arp
static void InitDefaultsscc_info_NotificationRegistrationInfo_NotificationRegistrationInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Arp::System::Nm::Services::Grpc::_NotificationRegistrationInfo_default_instance_;
    new (ptr) ::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotificationRegistrationInfo_NotificationRegistrationInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NotificationRegistrationInfo_NotificationRegistrationInfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NotificationRegistrationInfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NotificationRegistrationInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NotificationRegistrationInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NotificationRegistrationInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo, notificationnameid_),
  PROTOBUF_FIELD_OFFSET(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo, notificationname_),
  PROTOBUF_FIELD_OFFSET(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo, sendername_),
  PROTOBUF_FIELD_OFFSET(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo, severity_),
  PROTOBUF_FIELD_OFFSET(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo, payloadtypeid_),
  PROTOBUF_FIELD_OFFSET(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Arp::System::Nm::Services::Grpc::_NotificationRegistrationInfo_default_instance_),
};

const char descriptor_table_protodef_NotificationRegistrationInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"NotificationRegistrationInfo.proto\022\033Ar"
  "p.System.Nm.Services.Grpc\032$NotificationR"
  "egistrationStatus.proto\032\016Severity.proto\""
  "\205\002\n\034NotificationRegistrationInfo\022\032\n\022Noti"
  "ficationNameId\030\001 \001(\r\022\030\n\020NotificationName"
  "\030\002 \001(\t\022\022\n\nSenderName\030\003 \001(\t\0227\n\010Severity\030\004"
  " \001(\0162%.Arp.System.Nm.Services.Grpc.Sever"
  "ity\022\025\n\rPayloadTypeId\030\005 \001(\005\022K\n\006Status\030\006 \001"
  "(\0162;.Arp.System.Nm.Services.Grpc.Notific"
  "ationRegistrationStatusb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NotificationRegistrationInfo_2eproto_deps[2] = {
  &::descriptor_table_NotificationRegistrationStatus_2eproto,
  &::descriptor_table_Severity_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NotificationRegistrationInfo_2eproto_sccs[1] = {
  &scc_info_NotificationRegistrationInfo_NotificationRegistrationInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NotificationRegistrationInfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NotificationRegistrationInfo_2eproto = {
  false, false, descriptor_table_protodef_NotificationRegistrationInfo_2eproto, "NotificationRegistrationInfo.proto", 391,
  &descriptor_table_NotificationRegistrationInfo_2eproto_once, descriptor_table_NotificationRegistrationInfo_2eproto_sccs, descriptor_table_NotificationRegistrationInfo_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_NotificationRegistrationInfo_2eproto::offsets,
  file_level_metadata_NotificationRegistrationInfo_2eproto, 1, file_level_enum_descriptors_NotificationRegistrationInfo_2eproto, file_level_service_descriptors_NotificationRegistrationInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NotificationRegistrationInfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NotificationRegistrationInfo_2eproto)), true);
namespace Arp {
namespace System {
namespace Nm {
namespace Services {
namespace Grpc {

// ===================================================================

class NotificationRegistrationInfo::_Internal {
 public:
};

NotificationRegistrationInfo::NotificationRegistrationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
}
NotificationRegistrationInfo::NotificationRegistrationInfo(const NotificationRegistrationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notificationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notificationname().empty()) {
    notificationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notificationname(), 
      GetArena());
  }
  sendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendername().empty()) {
    sendername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sendername(), 
      GetArena());
  }
  ::memcpy(&notificationnameid_, &from.notificationnameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&notificationnameid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
}

void NotificationRegistrationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotificationRegistrationInfo_NotificationRegistrationInfo_2eproto.base);
  notificationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&notificationnameid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&notificationnameid_)) + sizeof(status_));
}

NotificationRegistrationInfo::~NotificationRegistrationInfo() {
  // @@protoc_insertion_point(destructor:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotificationRegistrationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notificationname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotificationRegistrationInfo::ArenaDtor(void* object) {
  NotificationRegistrationInfo* _this = reinterpret_cast< NotificationRegistrationInfo* >(object);
  (void)_this;
}
void NotificationRegistrationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationRegistrationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotificationRegistrationInfo& NotificationRegistrationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotificationRegistrationInfo_NotificationRegistrationInfo_2eproto.base);
  return *internal_default_instance();
}


void NotificationRegistrationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notificationname_.ClearToEmpty();
  sendername_.ClearToEmpty();
  ::memset(&notificationnameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&notificationnameid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationRegistrationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 NotificationNameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          notificationnameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string NotificationName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_notificationname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo.NotificationName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SenderName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sendername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo.SenderName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Arp.System.Nm.Services.Grpc.Severity Severity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::Arp::System::Nm::Services::Grpc::Severity>(val));
        } else goto handle_unusual;
        continue;
      // int32 PayloadTypeId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          payloadtypeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Arp.System.Nm.Services.Grpc.NotificationRegistrationStatus Status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::Arp::System::Nm::Services::Grpc::NotificationRegistrationStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotificationRegistrationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 NotificationNameId = 1;
  if (this->notificationnameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_notificationnameid(), target);
  }

  // string NotificationName = 2;
  if (this->notificationname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notificationname().data(), static_cast<int>(this->_internal_notificationname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo.NotificationName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notificationname(), target);
  }

  // string SenderName = 3;
  if (this->sendername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendername().data(), static_cast<int>(this->_internal_sendername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo.SenderName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sendername(), target);
  }

  // .Arp.System.Nm.Services.Grpc.Severity Severity = 4;
  if (this->severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_severity(), target);
  }

  // int32 PayloadTypeId = 5;
  if (this->payloadtypeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_payloadtypeid(), target);
  }

  // .Arp.System.Nm.Services.Grpc.NotificationRegistrationStatus Status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  return target;
}

size_t NotificationRegistrationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NotificationName = 2;
  if (this->notificationname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notificationname());
  }

  // string SenderName = 3;
  if (this->sendername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendername());
  }

  // uint32 NotificationNameId = 1;
  if (this->notificationnameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_notificationnameid());
  }

  // .Arp.System.Nm.Services.Grpc.Severity Severity = 4;
  if (this->severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // int32 PayloadTypeId = 5;
  if (this->payloadtypeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_payloadtypeid());
  }

  // .Arp.System.Nm.Services.Grpc.NotificationRegistrationStatus Status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationRegistrationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationRegistrationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotificationRegistrationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
    MergeFrom(*source);
  }
}

void NotificationRegistrationInfo::MergeFrom(const NotificationRegistrationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notificationname().size() > 0) {
    _internal_set_notificationname(from._internal_notificationname());
  }
  if (from.sendername().size() > 0) {
    _internal_set_sendername(from._internal_sendername());
  }
  if (from.notificationnameid() != 0) {
    _internal_set_notificationnameid(from._internal_notificationnameid());
  }
  if (from.severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  if (from.payloadtypeid() != 0) {
    _internal_set_payloadtypeid(from._internal_payloadtypeid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void NotificationRegistrationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationRegistrationInfo::CopyFrom(const NotificationRegistrationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Arp.System.Nm.Services.Grpc.NotificationRegistrationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationRegistrationInfo::IsInitialized() const {
  return true;
}

void NotificationRegistrationInfo::InternalSwap(NotificationRegistrationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notificationname_.Swap(&other->notificationname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sendername_.Swap(&other->sendername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationRegistrationInfo, status_)
      + sizeof(NotificationRegistrationInfo::status_)
      - PROTOBUF_FIELD_OFFSET(NotificationRegistrationInfo, notificationnameid_)>(
          reinterpret_cast<char*>(&notificationnameid_),
          reinterpret_cast<char*>(&other->notificationnameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationRegistrationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Grpc
}  // namespace Services
}  // namespace Nm
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo* Arena::CreateMaybeMessage< ::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Arp::System::Nm::Services::Grpc::NotificationRegistrationInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
