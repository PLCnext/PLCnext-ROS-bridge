// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: INotificationManagerService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_INotificationManagerService_2eproto__INCLUDED
#define GRPC_INotificationManagerService_2eproto__INCLUDED

#include "INotificationManagerService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace System {
namespace Nm {
namespace Services {
namespace Grpc {

// *
// Service to send Notifications and query information about the NotificationManager
//
class INotificationManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.System.Nm.Services.Grpc.INotificationManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Registers a new Notification
    // / </summary>
    // / <param name="notificationName">name of the notification (e.g. Arp.System.Nm.SomethingInterestingHappened)</param>
    // / <param name="senderName">name of the sender of the notification</param>
    // / <param name="severity">severity of the notification</param>
    // / <param name="payloadTypeName">name of the payload type</param>
    // / <returns>NotificationNameId, necessary for sending and unregistering</returns>
    virtual ::grpc::Status RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>> AsyncRegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>>(AsyncRegisterNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>> PrepareAsyncRegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>>(PrepareAsyncRegisterNotificationRaw(context, request, cq));
    }
    // / <summary>
    // / Unregisters a Nototification
    // / </summary>
    // / <param name="notificationNameId">id of the NotificationName to unregister</param>
    virtual ::grpc::Status UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUnregisterNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUnregisterNotificationRaw(context, request, cq));
    }
    // / <summary>
    // / Sends a notification
    // / </summary>
    // / <param name="notificationNameId">id of the NotificationName to send</param>
    // / <param name="timestamp">Current timestamp</param>
    // / <param name="payload">payload to send</param>
    // / <returns>NotificationId</returns>
    virtual ::grpc::Status SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>> AsyncSendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>>(AsyncSendNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>> PrepareAsyncSendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>>(PrepareAsyncSendNotificationRaw(context, request, cq));
    }
    // / <summary>
    // / Queries the NotifictionName
    // / </summary>
    // / <param name="notificationNameId">NotificationNameId</param>
    // / <returns>NotificationName</returns>
    virtual ::grpc::Status GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>> AsyncGetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>>(AsyncGetNotificationNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>> PrepareAsyncGetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>>(PrepareAsyncGetNotificationNameRaw(context, request, cq));
    }
    // / <summary>
    // / Queries the id of an NotificationName
    // / </summary>
    // / <param name="notificationName">NotificationName</param>
    // / <returns>NotificationNameId</returns>
    virtual ::grpc::Status GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>> AsyncGetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>>(AsyncGetNotificationNameIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>> PrepareAsyncGetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>>(PrepareAsyncGetNotificationNameIdRaw(context, request, cq));
    }
    // / <summary>
    // / Queries the ids of Notifications with a given NotificationRegistrationStatus
    // / </summary>
    // / <param name="status">status of the queried Notifications</param>
    // / <returns>collection of matching NotificationNameIds</returns>
    virtual ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>> AsyncGetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>>(AsyncGetNotificationNameIdsByStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>> PrepareAsyncGetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>>(PrepareAsyncGetNotificationNameIdsByStatusRaw(context, request, cq));
    }
    // / <summary>
    // / Queries of all known NotificationNameIds
    // / </summary>
    // / <returns>collection of all known NotificationNameIds</returns>
    virtual ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>> AsyncGetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>>(AsyncGetAllKnownNotificationNameIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>> PrepareAsyncGetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>>(PrepareAsyncGetAllKnownNotificationNameIdsRaw(context, request, cq));
    }
    // / <summary>
    // / Queries information about an Notification
    // / </summary>
    // / <param name="notificationNameId">NotificationNameId</param>
    // / <returns>data structure to describe the Notification</returns>
    virtual ::grpc::Status GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>> AsyncGetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>>(AsyncGetNotificationRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>> PrepareAsyncGetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>>(PrepareAsyncGetNotificationRegistrationRaw(context, request, cq));
    }
    // / <summary>
    // / Query an id for a given PayloadType
    // / </summary>
    // / <param name="payloadTypeName">Name fo the payload type</param>
    // / <returns>id of the payload type</returns>
    virtual ::grpc::Status GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>> AsyncGetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>>(AsyncGetPayloadTypeIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>> PrepareAsyncGetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>>(PrepareAsyncGetPayloadTypeIdRaw(context, request, cq));
    }
    // / <summary>
    // / Query the payload type name of a given id
    // / </summary>
    // / <param name="payloadTypeId">id of the payload type</param>
    // / <returns>name of the payload type</returns>
    virtual ::grpc::Status GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>> AsyncGetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>>(AsyncGetPayloadTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>> PrepareAsyncGetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>>(PrepareAsyncGetPayloadTypeNameRaw(context, request, cq));
    }
    // / <summary>
    // / Returns the number of Notifications submitted since startup of the controller
    // / </summary>
    // / <returns>number of submitted notifications</returns>
    virtual ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>> AsyncGetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>>(AsyncGetNumberOfSubmittedNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>> PrepareAsyncGetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>>(PrepareAsyncGetNumberOfSubmittedNotificationsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Registers a new Notification
      // / </summary>
      // / <param name="notificationName">name of the notification (e.g. Arp.System.Nm.SomethingInterestingHappened)</param>
      // / <param name="senderName">name of the sender of the notification</param>
      // / <param name="severity">severity of the notification</param>
      // / <param name="payloadTypeName">name of the payload type</param>
      // / <returns>NotificationNameId, necessary for sending and unregistering</returns>
      virtual void RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Unregisters a Nototification
      // / </summary>
      // / <param name="notificationNameId">id of the NotificationName to unregister</param>
      virtual void UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Sends a notification
      // / </summary>
      // / <param name="notificationNameId">id of the NotificationName to send</param>
      // / <param name="timestamp">Current timestamp</param>
      // / <param name="payload">payload to send</param>
      // / <returns>NotificationId</returns>
      virtual void SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Queries the NotifictionName
      // / </summary>
      // / <param name="notificationNameId">NotificationNameId</param>
      // / <returns>NotificationName</returns>
      virtual void GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Queries the id of an NotificationName
      // / </summary>
      // / <param name="notificationName">NotificationName</param>
      // / <returns>NotificationNameId</returns>
      virtual void GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Queries the ids of Notifications with a given NotificationRegistrationStatus
      // / </summary>
      // / <param name="status">status of the queried Notifications</param>
      // / <returns>collection of matching NotificationNameIds</returns>
      virtual void GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Queries of all known NotificationNameIds
      // / </summary>
      // / <returns>collection of all known NotificationNameIds</returns>
      virtual void GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Queries information about an Notification
      // / </summary>
      // / <param name="notificationNameId">NotificationNameId</param>
      // / <returns>data structure to describe the Notification</returns>
      virtual void GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Query an id for a given PayloadType
      // / </summary>
      // / <param name="payloadTypeName">Name fo the payload type</param>
      // / <returns>id of the payload type</returns>
      virtual void GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Query the payload type name of a given id
      // / </summary>
      // / <param name="payloadTypeId">id of the payload type</param>
      // / <returns>name of the payload type</returns>
      virtual void GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Returns the number of Notifications submitted since startup of the controller
      // / </summary>
      // / <returns>number of submitted notifications</returns>
      virtual void GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* AsyncRegisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* PrepareAsyncRegisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUnregisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUnregisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* AsyncSendNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* PrepareAsyncSendNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* AsyncGetNotificationNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* PrepareAsyncGetNotificationNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* AsyncGetNotificationNameIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* PrepareAsyncGetNotificationNameIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* AsyncGetNotificationNameIdsByStatusRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* PrepareAsyncGetNotificationNameIdsByStatusRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* AsyncGetAllKnownNotificationNameIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* PrepareAsyncGetAllKnownNotificationNameIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* AsyncGetNotificationRegistrationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* PrepareAsyncGetNotificationRegistrationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* AsyncGetPayloadTypeIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* PrepareAsyncGetPayloadTypeIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* AsyncGetPayloadTypeNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* PrepareAsyncGetPayloadTypeNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* AsyncGetNumberOfSubmittedNotificationsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* PrepareAsyncGetNumberOfSubmittedNotificationsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>> AsyncRegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>>(AsyncRegisterNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>> PrepareAsyncRegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>>(PrepareAsyncRegisterNotificationRaw(context, request, cq));
    }
    ::grpc::Status UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUnregisterNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUnregisterNotificationRaw(context, request, cq));
    }
    ::grpc::Status SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>> AsyncSendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>>(AsyncSendNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>> PrepareAsyncSendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>>(PrepareAsyncSendNotificationRaw(context, request, cq));
    }
    ::grpc::Status GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>> AsyncGetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>>(AsyncGetNotificationNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>> PrepareAsyncGetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>>(PrepareAsyncGetNotificationNameRaw(context, request, cq));
    }
    ::grpc::Status GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>> AsyncGetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>>(AsyncGetNotificationNameIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>> PrepareAsyncGetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>>(PrepareAsyncGetNotificationNameIdRaw(context, request, cq));
    }
    ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>> AsyncGetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>>(AsyncGetNotificationNameIdsByStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>> PrepareAsyncGetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>>(PrepareAsyncGetNotificationNameIdsByStatusRaw(context, request, cq));
    }
    ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>> AsyncGetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>>(AsyncGetAllKnownNotificationNameIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>> PrepareAsyncGetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>>(PrepareAsyncGetAllKnownNotificationNameIdsRaw(context, request, cq));
    }
    ::grpc::Status GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>> AsyncGetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>>(AsyncGetNotificationRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>> PrepareAsyncGetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>>(PrepareAsyncGetNotificationRegistrationRaw(context, request, cq));
    }
    ::grpc::Status GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>> AsyncGetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>>(AsyncGetPayloadTypeIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>> PrepareAsyncGetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>>(PrepareAsyncGetPayloadTypeIdRaw(context, request, cq));
    }
    ::grpc::Status GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>> AsyncGetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>>(AsyncGetPayloadTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>> PrepareAsyncGetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>>(PrepareAsyncGetPayloadTypeNameRaw(context, request, cq));
    }
    ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>> AsyncGetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>>(AsyncGetNumberOfSubmittedNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>> PrepareAsyncGetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>>(PrepareAsyncGetNumberOfSubmittedNotificationsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnregisterNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendNotification(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNotificationName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNotificationNameId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNotificationNameIdsByStatus(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllKnownNotificationNameIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNotificationRegistration(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPayloadTypeId(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPayloadTypeName(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNumberOfSubmittedNotifications(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* AsyncRegisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* PrepareAsyncRegisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUnregisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUnregisterNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* AsyncSendNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* PrepareAsyncSendNotificationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* AsyncGetNotificationNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* PrepareAsyncGetNotificationNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* AsyncGetNotificationNameIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* PrepareAsyncGetNotificationNameIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* AsyncGetNotificationNameIdsByStatusRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* PrepareAsyncGetNotificationNameIdsByStatusRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* AsyncGetAllKnownNotificationNameIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* PrepareAsyncGetAllKnownNotificationNameIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* AsyncGetNotificationRegistrationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* PrepareAsyncGetNotificationRegistrationRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* AsyncGetPayloadTypeIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* PrepareAsyncGetPayloadTypeIdRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* AsyncGetPayloadTypeNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* PrepareAsyncGetPayloadTypeNameRaw(::grpc::ClientContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* AsyncGetNumberOfSubmittedNotificationsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* PrepareAsyncGetNumberOfSubmittedNotificationsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterNotification_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterNotification_;
    const ::grpc::internal::RpcMethod rpcmethod_SendNotification_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNotificationName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNotificationNameId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNotificationNameIdsByStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllKnownNotificationNameIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNotificationRegistration_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPayloadTypeId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPayloadTypeName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNumberOfSubmittedNotifications_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Registers a new Notification
    // / </summary>
    // / <param name="notificationName">name of the notification (e.g. Arp.System.Nm.SomethingInterestingHappened)</param>
    // / <param name="senderName">name of the sender of the notification</param>
    // / <param name="severity">severity of the notification</param>
    // / <param name="payloadTypeName">name of the payload type</param>
    // / <returns>NotificationNameId, necessary for sending and unregistering</returns>
    virtual ::grpc::Status RegisterNotification(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response);
    // / <summary>
    // / Unregisters a Nototification
    // / </summary>
    // / <param name="notificationNameId">id of the NotificationName to unregister</param>
    virtual ::grpc::Status UnregisterNotification(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response);
    // / <summary>
    // / Sends a notification
    // / </summary>
    // / <param name="notificationNameId">id of the NotificationName to send</param>
    // / <param name="timestamp">Current timestamp</param>
    // / <param name="payload">payload to send</param>
    // / <returns>NotificationId</returns>
    virtual ::grpc::Status SendNotification(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response);
    // / <summary>
    // / Queries the NotifictionName
    // / </summary>
    // / <param name="notificationNameId">NotificationNameId</param>
    // / <returns>NotificationName</returns>
    virtual ::grpc::Status GetNotificationName(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response);
    // / <summary>
    // / Queries the id of an NotificationName
    // / </summary>
    // / <param name="notificationName">NotificationName</param>
    // / <returns>NotificationNameId</returns>
    virtual ::grpc::Status GetNotificationNameId(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response);
    // / <summary>
    // / Queries the ids of Notifications with a given NotificationRegistrationStatus
    // / </summary>
    // / <param name="status">status of the queried Notifications</param>
    // / <returns>collection of matching NotificationNameIds</returns>
    virtual ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response);
    // / <summary>
    // / Queries of all known NotificationNameIds
    // / </summary>
    // / <returns>collection of all known NotificationNameIds</returns>
    virtual ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response);
    // / <summary>
    // / Queries information about an Notification
    // / </summary>
    // / <param name="notificationNameId">NotificationNameId</param>
    // / <returns>data structure to describe the Notification</returns>
    virtual ::grpc::Status GetNotificationRegistration(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response);
    // / <summary>
    // / Query an id for a given PayloadType
    // / </summary>
    // / <param name="payloadTypeName">Name fo the payload type</param>
    // / <returns>id of the payload type</returns>
    virtual ::grpc::Status GetPayloadTypeId(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response);
    // / <summary>
    // / Query the payload type name of a given id
    // / </summary>
    // / <param name="payloadTypeId">id of the payload type</param>
    // / <returns>name of the payload type</returns>
    virtual ::grpc::Status GetPayloadTypeName(::grpc::ServerContext* context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response);
    // / <summary>
    // / Returns the number of Notifications submitted since startup of the controller
    // / </summary>
    // / <returns>number of submitted notifications</returns>
    virtual ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterNotification() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterNotification(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnregisterNotification() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UnregisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterNotification(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendNotification() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNotification(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNotificationName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNotificationName() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNotificationName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationName(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNotificationNameId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNotificationNameId() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetNotificationNameId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationNameId(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNotificationNameIdsByStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNotificationNameIdsByStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetNotificationNameIdsByStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationNameIdsByStatus(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllKnownNotificationNameIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllKnownNotificationNameIds() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetAllKnownNotificationNameIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllKnownNotificationNameIds(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNotificationRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNotificationRegistration() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetNotificationRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationRegistration(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationRegistration(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPayloadTypeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPayloadTypeId() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetPayloadTypeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayloadTypeId(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPayloadTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPayloadTypeName() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetPayloadTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayloadTypeName(::grpc::ServerContext* context, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNumberOfSubmittedNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNumberOfSubmittedNotifications() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetNumberOfSubmittedNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberOfSubmittedNotifications(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterNotification<WithAsyncMethod_UnregisterNotification<WithAsyncMethod_SendNotification<WithAsyncMethod_GetNotificationName<WithAsyncMethod_GetNotificationNameId<WithAsyncMethod_GetNotificationNameIdsByStatus<WithAsyncMethod_GetAllKnownNotificationNameIds<WithAsyncMethod_GetNotificationRegistration<WithAsyncMethod_GetPayloadTypeId<WithAsyncMethod_GetPayloadTypeName<WithAsyncMethod_GetNumberOfSubmittedNotifications<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterNotification() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* response) { return this->RegisterNotification(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterNotification(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterNotification(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UnregisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UnregisterNotification() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* request, ::google::protobuf::Empty* response) { return this->UnregisterNotification(context, request, response); }));}
    void SetMessageAllocatorFor_UnregisterNotification(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UnregisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnregisterNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnregisterNotification(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendNotification() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* response) { return this->SendNotification(context, request, response); }));}
    void SetMessageAllocatorFor_SendNotification(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendNotification(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNotificationName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNotificationName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* response) { return this->GetNotificationName(context, request, response); }));}
    void SetMessageAllocatorFor_GetNotificationName(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNotificationName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationName(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNotificationNameId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNotificationNameId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* response) { return this->GetNotificationNameId(context, request, response); }));}
    void SetMessageAllocatorFor_GetNotificationNameId(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNotificationNameId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationNameId(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationNameId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNotificationNameIdsByStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNotificationNameIdsByStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* response) { return this->GetNotificationNameIdsByStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetNotificationNameIdsByStatus(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNotificationNameIdsByStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationNameIdsByStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationNameIdsByStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllKnownNotificationNameIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllKnownNotificationNameIds() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* response) { return this->GetAllKnownNotificationNameIds(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllKnownNotificationNameIds(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllKnownNotificationNameIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllKnownNotificationNameIds(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllKnownNotificationNameIds(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNotificationRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNotificationRegistration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* response) { return this->GetNotificationRegistration(context, request, response); }));}
    void SetMessageAllocatorFor_GetNotificationRegistration(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNotificationRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationRegistration(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationRegistration(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationRegistration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPayloadTypeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPayloadTypeId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* response) { return this->GetPayloadTypeId(context, request, response); }));}
    void SetMessageAllocatorFor_GetPayloadTypeId(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPayloadTypeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPayloadTypeId(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPayloadTypeId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPayloadTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPayloadTypeName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* response) { return this->GetPayloadTypeName(context, request, response); }));}
    void SetMessageAllocatorFor_GetPayloadTypeName(
        ::grpc::experimental::MessageAllocator< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPayloadTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPayloadTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPayloadTypeName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNumberOfSubmittedNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNumberOfSubmittedNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* response) { return this->GetNumberOfSubmittedNotifications(context, request, response); }));}
    void SetMessageAllocatorFor_GetNumberOfSubmittedNotifications(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNumberOfSubmittedNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNumberOfSubmittedNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNumberOfSubmittedNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterNotification<ExperimentalWithCallbackMethod_UnregisterNotification<ExperimentalWithCallbackMethod_SendNotification<ExperimentalWithCallbackMethod_GetNotificationName<ExperimentalWithCallbackMethod_GetNotificationNameId<ExperimentalWithCallbackMethod_GetNotificationNameIdsByStatus<ExperimentalWithCallbackMethod_GetAllKnownNotificationNameIds<ExperimentalWithCallbackMethod_GetNotificationRegistration<ExperimentalWithCallbackMethod_GetPayloadTypeId<ExperimentalWithCallbackMethod_GetPayloadTypeName<ExperimentalWithCallbackMethod_GetNumberOfSubmittedNotifications<Service > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterNotification<ExperimentalWithCallbackMethod_UnregisterNotification<ExperimentalWithCallbackMethod_SendNotification<ExperimentalWithCallbackMethod_GetNotificationName<ExperimentalWithCallbackMethod_GetNotificationNameId<ExperimentalWithCallbackMethod_GetNotificationNameIdsByStatus<ExperimentalWithCallbackMethod_GetAllKnownNotificationNameIds<ExperimentalWithCallbackMethod_GetNotificationRegistration<ExperimentalWithCallbackMethod_GetPayloadTypeId<ExperimentalWithCallbackMethod_GetPayloadTypeName<ExperimentalWithCallbackMethod_GetNumberOfSubmittedNotifications<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterNotification() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnregisterNotification() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UnregisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendNotification() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNotificationName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNotificationName() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNotificationName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNotificationNameId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNotificationNameId() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetNotificationNameId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNotificationNameIdsByStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNotificationNameIdsByStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetNotificationNameIdsByStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllKnownNotificationNameIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllKnownNotificationNameIds() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetAllKnownNotificationNameIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNotificationRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNotificationRegistration() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetNotificationRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationRegistration(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPayloadTypeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPayloadTypeId() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetPayloadTypeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPayloadTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPayloadTypeName() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetPayloadTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNumberOfSubmittedNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNumberOfSubmittedNotifications() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetNumberOfSubmittedNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterNotification() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterNotification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnregisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnregisterNotification() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UnregisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterNotification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendNotification() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNotification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNotificationName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNotificationName() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNotificationName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNotificationNameId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNotificationNameId() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetNotificationNameId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationNameId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNotificationNameIdsByStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNotificationNameIdsByStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetNotificationNameIdsByStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationNameIdsByStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllKnownNotificationNameIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllKnownNotificationNameIds() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetAllKnownNotificationNameIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllKnownNotificationNameIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNotificationRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNotificationRegistration() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetNotificationRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationRegistration(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationRegistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPayloadTypeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPayloadTypeId() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetPayloadTypeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayloadTypeId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPayloadTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPayloadTypeName() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetPayloadTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayloadTypeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNumberOfSubmittedNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNumberOfSubmittedNotifications() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetNumberOfSubmittedNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberOfSubmittedNotifications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterNotification() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterNotification(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterNotification(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UnregisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UnregisterNotification() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnregisterNotification(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UnregisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnregisterNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnregisterNotification(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendNotification() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendNotification(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendNotification(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNotificationName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNotificationName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNotificationName(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNotificationName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNotificationNameId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNotificationNameId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNotificationNameId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNotificationNameId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationNameId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationNameId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNotificationNameIdsByStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNotificationNameIdsByStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNotificationNameIdsByStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNotificationNameIdsByStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationNameIdsByStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationNameIdsByStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllKnownNotificationNameIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllKnownNotificationNameIds() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllKnownNotificationNameIds(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllKnownNotificationNameIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllKnownNotificationNameIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllKnownNotificationNameIds(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNotificationRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNotificationRegistration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNotificationRegistration(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNotificationRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationRegistration(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNotificationRegistration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNotificationRegistration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPayloadTypeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPayloadTypeId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPayloadTypeId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPayloadTypeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPayloadTypeId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPayloadTypeId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPayloadTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPayloadTypeName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPayloadTypeName(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPayloadTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadTypeName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPayloadTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPayloadTypeName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNumberOfSubmittedNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNumberOfSubmittedNotifications() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNumberOfSubmittedNotifications(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNumberOfSubmittedNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNumberOfSubmittedNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNumberOfSubmittedNotifications(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterNotification() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* streamer) {
                       return this->StreamedRegisterNotification(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterNotification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceRegisterNotificationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnregisterNotification() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUnregisterNotification(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnregisterNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterNotification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceUnregisterNotificationRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendNotification() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* streamer) {
                       return this->StreamedSendNotification(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendNotification(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendNotification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceSendNotificationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNotificationName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNotificationName() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* streamer) {
                       return this->StreamedGetNotificationName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNotificationName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNotificationName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNotificationName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNotificationNameId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNotificationNameId() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* streamer) {
                       return this->StreamedGetNotificationNameId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNotificationNameId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNotificationNameId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNotificationNameId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNotificationNameIdsByStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNotificationNameIdsByStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* streamer) {
                       return this->StreamedGetNotificationNameIdsByStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNotificationNameIdsByStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNotificationNameIdsByStatus(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNotificationNameIdsByStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationNameIdsByStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllKnownNotificationNameIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllKnownNotificationNameIds() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* streamer) {
                       return this->StreamedGetAllKnownNotificationNameIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllKnownNotificationNameIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllKnownNotificationNameIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllKnownNotificationNameIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetAllKnownNotificationNameIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNotificationRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNotificationRegistration() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* streamer) {
                       return this->StreamedGetNotificationRegistration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNotificationRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNotificationRegistration(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNotificationRegistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNotificationRegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPayloadTypeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPayloadTypeId() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* streamer) {
                       return this->StreamedGetPayloadTypeId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPayloadTypeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPayloadTypeId(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPayloadTypeId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPayloadTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPayloadTypeName() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* streamer) {
                       return this->StreamedGetPayloadTypeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPayloadTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPayloadTypeName(::grpc::ServerContext* /*context*/, const ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPayloadTypeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameRequest,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetPayloadTypeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNumberOfSubmittedNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNumberOfSubmittedNotifications() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* streamer) {
                       return this->StreamedGetNumberOfSubmittedNotifications(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNumberOfSubmittedNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNumberOfSubmittedNotifications(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNumberOfSubmittedNotifications(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Arp::System::Nm::Services::Grpc::INotificationManagerServiceGetNumberOfSubmittedNotificationsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterNotification<WithStreamedUnaryMethod_UnregisterNotification<WithStreamedUnaryMethod_SendNotification<WithStreamedUnaryMethod_GetNotificationName<WithStreamedUnaryMethod_GetNotificationNameId<WithStreamedUnaryMethod_GetNotificationNameIdsByStatus<WithStreamedUnaryMethod_GetAllKnownNotificationNameIds<WithStreamedUnaryMethod_GetNotificationRegistration<WithStreamedUnaryMethod_GetPayloadTypeId<WithStreamedUnaryMethod_GetPayloadTypeName<WithStreamedUnaryMethod_GetNumberOfSubmittedNotifications<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterNotification<WithStreamedUnaryMethod_UnregisterNotification<WithStreamedUnaryMethod_SendNotification<WithStreamedUnaryMethod_GetNotificationName<WithStreamedUnaryMethod_GetNotificationNameId<WithStreamedUnaryMethod_GetNotificationNameIdsByStatus<WithStreamedUnaryMethod_GetAllKnownNotificationNameIds<WithStreamedUnaryMethod_GetNotificationRegistration<WithStreamedUnaryMethod_GetPayloadTypeId<WithStreamedUnaryMethod_GetPayloadTypeName<WithStreamedUnaryMethod_GetNumberOfSubmittedNotifications<Service > > > > > > > > > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Services
}  // namespace Nm
}  // namespace System
}  // namespace Arp


#endif  // GRPC_INotificationManagerService_2eproto__INCLUDED
