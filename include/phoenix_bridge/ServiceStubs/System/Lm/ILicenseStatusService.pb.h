// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ILicenseStatusService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ILicenseStatusService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ILicenseStatusService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ILicenseStatusService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ILicenseStatusService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ILicenseStatusService_2eproto;
namespace Arp {
namespace System {
namespace Lm {
namespace Services {
namespace Grpc {
class ILicenseStatusServiceGetLicenseStatusRequest;
class ILicenseStatusServiceGetLicenseStatusRequestDefaultTypeInternal;
extern ILicenseStatusServiceGetLicenseStatusRequestDefaultTypeInternal _ILicenseStatusServiceGetLicenseStatusRequest_default_instance_;
class ILicenseStatusServiceGetLicenseStatusResponse;
class ILicenseStatusServiceGetLicenseStatusResponseDefaultTypeInternal;
extern ILicenseStatusServiceGetLicenseStatusResponseDefaultTypeInternal _ILicenseStatusServiceGetLicenseStatusResponse_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Lm
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest* Arena::CreateMaybeMessage<::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest>(Arena*);
template<> ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse* Arena::CreateMaybeMessage<::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace System {
namespace Lm {
namespace Services {
namespace Grpc {

// ===================================================================

class ILicenseStatusServiceGetLicenseStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest) */ {
 public:
  inline ILicenseStatusServiceGetLicenseStatusRequest() : ILicenseStatusServiceGetLicenseStatusRequest(nullptr) {}
  virtual ~ILicenseStatusServiceGetLicenseStatusRequest();

  ILicenseStatusServiceGetLicenseStatusRequest(const ILicenseStatusServiceGetLicenseStatusRequest& from);
  ILicenseStatusServiceGetLicenseStatusRequest(ILicenseStatusServiceGetLicenseStatusRequest&& from) noexcept
    : ILicenseStatusServiceGetLicenseStatusRequest() {
    *this = ::std::move(from);
  }

  inline ILicenseStatusServiceGetLicenseStatusRequest& operator=(const ILicenseStatusServiceGetLicenseStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ILicenseStatusServiceGetLicenseStatusRequest& operator=(ILicenseStatusServiceGetLicenseStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ILicenseStatusServiceGetLicenseStatusRequest& default_instance();

  static inline const ILicenseStatusServiceGetLicenseStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ILicenseStatusServiceGetLicenseStatusRequest*>(
               &_ILicenseStatusServiceGetLicenseStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ILicenseStatusServiceGetLicenseStatusRequest& a, ILicenseStatusServiceGetLicenseStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ILicenseStatusServiceGetLicenseStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ILicenseStatusServiceGetLicenseStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ILicenseStatusServiceGetLicenseStatusRequest* New() const final {
    return CreateMaybeMessage<ILicenseStatusServiceGetLicenseStatusRequest>(nullptr);
  }

  ILicenseStatusServiceGetLicenseStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ILicenseStatusServiceGetLicenseStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ILicenseStatusServiceGetLicenseStatusRequest& from);
  void MergeFrom(const ILicenseStatusServiceGetLicenseStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ILicenseStatusServiceGetLicenseStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest";
  }
  protected:
  explicit ILicenseStatusServiceGetLicenseStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ILicenseStatusService_2eproto);
    return ::descriptor_table_ILicenseStatusService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmCodeFieldNumber = 1,
    kProductCodeFieldNumber = 2,
    kFeatureCodeFieldNumber = 3,
  };
  // uint32 firmCode = 1;
  void clear_firmcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 firmcode() const;
  void set_firmcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_firmcode() const;
  void _internal_set_firmcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 productCode = 2;
  void clear_productcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 productcode() const;
  void set_productcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_productcode() const;
  void _internal_set_productcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 featureCode = 3;
  void clear_featurecode();
  ::PROTOBUF_NAMESPACE_ID::uint32 featurecode() const;
  void set_featurecode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_featurecode() const;
  void _internal_set_featurecode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 firmcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 productcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 featurecode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ILicenseStatusService_2eproto;
};
// -------------------------------------------------------------------

class ILicenseStatusServiceGetLicenseStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse) */ {
 public:
  inline ILicenseStatusServiceGetLicenseStatusResponse() : ILicenseStatusServiceGetLicenseStatusResponse(nullptr) {}
  virtual ~ILicenseStatusServiceGetLicenseStatusResponse();

  ILicenseStatusServiceGetLicenseStatusResponse(const ILicenseStatusServiceGetLicenseStatusResponse& from);
  ILicenseStatusServiceGetLicenseStatusResponse(ILicenseStatusServiceGetLicenseStatusResponse&& from) noexcept
    : ILicenseStatusServiceGetLicenseStatusResponse() {
    *this = ::std::move(from);
  }

  inline ILicenseStatusServiceGetLicenseStatusResponse& operator=(const ILicenseStatusServiceGetLicenseStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ILicenseStatusServiceGetLicenseStatusResponse& operator=(ILicenseStatusServiceGetLicenseStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ILicenseStatusServiceGetLicenseStatusResponse& default_instance();

  static inline const ILicenseStatusServiceGetLicenseStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ILicenseStatusServiceGetLicenseStatusResponse*>(
               &_ILicenseStatusServiceGetLicenseStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ILicenseStatusServiceGetLicenseStatusResponse& a, ILicenseStatusServiceGetLicenseStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ILicenseStatusServiceGetLicenseStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ILicenseStatusServiceGetLicenseStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ILicenseStatusServiceGetLicenseStatusResponse* New() const final {
    return CreateMaybeMessage<ILicenseStatusServiceGetLicenseStatusResponse>(nullptr);
  }

  ILicenseStatusServiceGetLicenseStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ILicenseStatusServiceGetLicenseStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ILicenseStatusServiceGetLicenseStatusResponse& from);
  void MergeFrom(const ILicenseStatusServiceGetLicenseStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ILicenseStatusServiceGetLicenseStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse";
  }
  protected:
  explicit ILicenseStatusServiceGetLicenseStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ILicenseStatusService_2eproto);
    return ::descriptor_table_ILicenseStatusService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // bool _ReturnValue = 1;
  void clear__returnvalue();
  bool _returnvalue() const;
  void set__returnvalue(bool value);
  private:
  bool _internal__returnvalue() const;
  void _internal_set__returnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ILicenseStatusService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ILicenseStatusServiceGetLicenseStatusRequest

// uint32 firmCode = 1;
inline void ILicenseStatusServiceGetLicenseStatusRequest::clear_firmcode() {
  firmcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ILicenseStatusServiceGetLicenseStatusRequest::_internal_firmcode() const {
  return firmcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ILicenseStatusServiceGetLicenseStatusRequest::firmcode() const {
  // @@protoc_insertion_point(field_get:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest.firmCode)
  return _internal_firmcode();
}
inline void ILicenseStatusServiceGetLicenseStatusRequest::_internal_set_firmcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  firmcode_ = value;
}
inline void ILicenseStatusServiceGetLicenseStatusRequest::set_firmcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_firmcode(value);
  // @@protoc_insertion_point(field_set:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest.firmCode)
}

// uint32 productCode = 2;
inline void ILicenseStatusServiceGetLicenseStatusRequest::clear_productcode() {
  productcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ILicenseStatusServiceGetLicenseStatusRequest::_internal_productcode() const {
  return productcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ILicenseStatusServiceGetLicenseStatusRequest::productcode() const {
  // @@protoc_insertion_point(field_get:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest.productCode)
  return _internal_productcode();
}
inline void ILicenseStatusServiceGetLicenseStatusRequest::_internal_set_productcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  productcode_ = value;
}
inline void ILicenseStatusServiceGetLicenseStatusRequest::set_productcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_productcode(value);
  // @@protoc_insertion_point(field_set:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest.productCode)
}

// uint32 featureCode = 3;
inline void ILicenseStatusServiceGetLicenseStatusRequest::clear_featurecode() {
  featurecode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ILicenseStatusServiceGetLicenseStatusRequest::_internal_featurecode() const {
  return featurecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ILicenseStatusServiceGetLicenseStatusRequest::featurecode() const {
  // @@protoc_insertion_point(field_get:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest.featureCode)
  return _internal_featurecode();
}
inline void ILicenseStatusServiceGetLicenseStatusRequest::_internal_set_featurecode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  featurecode_ = value;
}
inline void ILicenseStatusServiceGetLicenseStatusRequest::set_featurecode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_featurecode(value);
  // @@protoc_insertion_point(field_set:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest.featureCode)
}

// -------------------------------------------------------------------

// ILicenseStatusServiceGetLicenseStatusResponse

// bool _ReturnValue = 1;
inline void ILicenseStatusServiceGetLicenseStatusResponse::clear__returnvalue() {
  _returnvalue_ = false;
}
inline bool ILicenseStatusServiceGetLicenseStatusResponse::_internal__returnvalue() const {
  return _returnvalue_;
}
inline bool ILicenseStatusServiceGetLicenseStatusResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void ILicenseStatusServiceGetLicenseStatusResponse::_internal_set__returnvalue(bool value) {
  
  _returnvalue_ = value;
}
inline void ILicenseStatusServiceGetLicenseStatusResponse::set__returnvalue(bool value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse._ReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace Lm
}  // namespace System
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ILicenseStatusService_2eproto
