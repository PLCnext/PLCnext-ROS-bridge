// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ILicenseStatusService.proto

#include "ILicenseStatusService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Arp {
namespace System {
namespace Lm {
namespace Services {
namespace Grpc {
class ILicenseStatusServiceGetLicenseStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ILicenseStatusServiceGetLicenseStatusRequest> _instance;
} _ILicenseStatusServiceGetLicenseStatusRequest_default_instance_;
class ILicenseStatusServiceGetLicenseStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ILicenseStatusServiceGetLicenseStatusResponse> _instance;
} _ILicenseStatusServiceGetLicenseStatusResponse_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Lm
}  // namespace System
}  // namespace Arp
static void InitDefaultsscc_info_ILicenseStatusServiceGetLicenseStatusRequest_ILicenseStatusService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Arp::System::Lm::Services::Grpc::_ILicenseStatusServiceGetLicenseStatusRequest_default_instance_;
    new (ptr) ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ILicenseStatusServiceGetLicenseStatusRequest_ILicenseStatusService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ILicenseStatusServiceGetLicenseStatusRequest_ILicenseStatusService_2eproto}, {}};

static void InitDefaultsscc_info_ILicenseStatusServiceGetLicenseStatusResponse_ILicenseStatusService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Arp::System::Lm::Services::Grpc::_ILicenseStatusServiceGetLicenseStatusResponse_default_instance_;
    new (ptr) ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ILicenseStatusServiceGetLicenseStatusResponse_ILicenseStatusService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ILicenseStatusServiceGetLicenseStatusResponse_ILicenseStatusService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ILicenseStatusService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ILicenseStatusService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ILicenseStatusService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ILicenseStatusService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest, firmcode_),
  PROTOBUF_FIELD_OFFSET(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest, productcode_),
  PROTOBUF_FIELD_OFFSET(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest, featurecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse, _returnvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest)},
  { 8, -1, sizeof(::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Arp::System::Lm::Services::Grpc::_ILicenseStatusServiceGetLicenseStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Arp::System::Lm::Services::Grpc::_ILicenseStatusServiceGetLicenseStatusResponse_default_instance_),
};

const char descriptor_table_protodef_ILicenseStatusService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033ILicenseStatusService.proto\022\033Arp.Syste"
  "m.Lm.Services.Grpc\"j\n,ILicenseStatusServ"
  "iceGetLicenseStatusRequest\022\020\n\010firmCode\030\001"
  " \001(\r\022\023\n\013productCode\030\002 \001(\r\022\023\n\013featureCode"
  "\030\003 \001(\r\"E\n-ILicenseStatusServiceGetLicens"
  "eStatusResponse\022\024\n\014_ReturnValue\030\001 \001(\0102\305\001"
  "\n\025ILicenseStatusService\022\253\001\n\020GetLicenseSt"
  "atus\022I.Arp.System.Lm.Services.Grpc.ILice"
  "nseStatusServiceGetLicenseStatusRequest\032"
  "J.Arp.System.Lm.Services.Grpc.ILicenseSt"
  "atusServiceGetLicenseStatusResponse\"\000b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ILicenseStatusService_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ILicenseStatusService_2eproto_sccs[2] = {
  &scc_info_ILicenseStatusServiceGetLicenseStatusRequest_ILicenseStatusService_2eproto.base,
  &scc_info_ILicenseStatusServiceGetLicenseStatusResponse_ILicenseStatusService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ILicenseStatusService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ILicenseStatusService_2eproto = {
  false, false, descriptor_table_protodef_ILicenseStatusService_2eproto, "ILicenseStatusService.proto", 445,
  &descriptor_table_ILicenseStatusService_2eproto_once, descriptor_table_ILicenseStatusService_2eproto_sccs, descriptor_table_ILicenseStatusService_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ILicenseStatusService_2eproto::offsets,
  file_level_metadata_ILicenseStatusService_2eproto, 2, file_level_enum_descriptors_ILicenseStatusService_2eproto, file_level_service_descriptors_ILicenseStatusService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ILicenseStatusService_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ILicenseStatusService_2eproto)), true);
namespace Arp {
namespace System {
namespace Lm {
namespace Services {
namespace Grpc {

// ===================================================================

class ILicenseStatusServiceGetLicenseStatusRequest::_Internal {
 public:
};

ILicenseStatusServiceGetLicenseStatusRequest::ILicenseStatusServiceGetLicenseStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
}
ILicenseStatusServiceGetLicenseStatusRequest::ILicenseStatusServiceGetLicenseStatusRequest(const ILicenseStatusServiceGetLicenseStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&firmcode_, &from.firmcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&featurecode_) -
    reinterpret_cast<char*>(&firmcode_)) + sizeof(featurecode_));
  // @@protoc_insertion_point(copy_constructor:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
}

void ILicenseStatusServiceGetLicenseStatusRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&firmcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&featurecode_) -
      reinterpret_cast<char*>(&firmcode_)) + sizeof(featurecode_));
}

ILicenseStatusServiceGetLicenseStatusRequest::~ILicenseStatusServiceGetLicenseStatusRequest() {
  // @@protoc_insertion_point(destructor:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ILicenseStatusServiceGetLicenseStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ILicenseStatusServiceGetLicenseStatusRequest::ArenaDtor(void* object) {
  ILicenseStatusServiceGetLicenseStatusRequest* _this = reinterpret_cast< ILicenseStatusServiceGetLicenseStatusRequest* >(object);
  (void)_this;
}
void ILicenseStatusServiceGetLicenseStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ILicenseStatusServiceGetLicenseStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ILicenseStatusServiceGetLicenseStatusRequest& ILicenseStatusServiceGetLicenseStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ILicenseStatusServiceGetLicenseStatusRequest_ILicenseStatusService_2eproto.base);
  return *internal_default_instance();
}


void ILicenseStatusServiceGetLicenseStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&firmcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&featurecode_) -
      reinterpret_cast<char*>(&firmcode_)) + sizeof(featurecode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ILicenseStatusServiceGetLicenseStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 firmCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          firmcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 productCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          productcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 featureCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          featurecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ILicenseStatusServiceGetLicenseStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 firmCode = 1;
  if (this->firmcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_firmcode(), target);
  }

  // uint32 productCode = 2;
  if (this->productcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_productcode(), target);
  }

  // uint32 featureCode = 3;
  if (this->featurecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_featurecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  return target;
}

size_t ILicenseStatusServiceGetLicenseStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 firmCode = 1;
  if (this->firmcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firmcode());
  }

  // uint32 productCode = 2;
  if (this->productcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_productcode());
  }

  // uint32 featureCode = 3;
  if (this->featurecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_featurecode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ILicenseStatusServiceGetLicenseStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ILicenseStatusServiceGetLicenseStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ILicenseStatusServiceGetLicenseStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
    MergeFrom(*source);
  }
}

void ILicenseStatusServiceGetLicenseStatusRequest::MergeFrom(const ILicenseStatusServiceGetLicenseStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmcode() != 0) {
    _internal_set_firmcode(from._internal_firmcode());
  }
  if (from.productcode() != 0) {
    _internal_set_productcode(from._internal_productcode());
  }
  if (from.featurecode() != 0) {
    _internal_set_featurecode(from._internal_featurecode());
  }
}

void ILicenseStatusServiceGetLicenseStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ILicenseStatusServiceGetLicenseStatusRequest::CopyFrom(const ILicenseStatusServiceGetLicenseStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ILicenseStatusServiceGetLicenseStatusRequest::IsInitialized() const {
  return true;
}

void ILicenseStatusServiceGetLicenseStatusRequest::InternalSwap(ILicenseStatusServiceGetLicenseStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ILicenseStatusServiceGetLicenseStatusRequest, featurecode_)
      + sizeof(ILicenseStatusServiceGetLicenseStatusRequest::featurecode_)
      - PROTOBUF_FIELD_OFFSET(ILicenseStatusServiceGetLicenseStatusRequest, firmcode_)>(
          reinterpret_cast<char*>(&firmcode_),
          reinterpret_cast<char*>(&other->firmcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ILicenseStatusServiceGetLicenseStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ILicenseStatusServiceGetLicenseStatusResponse::_Internal {
 public:
};

ILicenseStatusServiceGetLicenseStatusResponse::ILicenseStatusServiceGetLicenseStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
}
ILicenseStatusServiceGetLicenseStatusResponse::ILicenseStatusServiceGetLicenseStatusResponse(const ILicenseStatusServiceGetLicenseStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _returnvalue_ = from._returnvalue_;
  // @@protoc_insertion_point(copy_constructor:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
}

void ILicenseStatusServiceGetLicenseStatusResponse::SharedCtor() {
  _returnvalue_ = false;
}

ILicenseStatusServiceGetLicenseStatusResponse::~ILicenseStatusServiceGetLicenseStatusResponse() {
  // @@protoc_insertion_point(destructor:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ILicenseStatusServiceGetLicenseStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ILicenseStatusServiceGetLicenseStatusResponse::ArenaDtor(void* object) {
  ILicenseStatusServiceGetLicenseStatusResponse* _this = reinterpret_cast< ILicenseStatusServiceGetLicenseStatusResponse* >(object);
  (void)_this;
}
void ILicenseStatusServiceGetLicenseStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ILicenseStatusServiceGetLicenseStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ILicenseStatusServiceGetLicenseStatusResponse& ILicenseStatusServiceGetLicenseStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ILicenseStatusServiceGetLicenseStatusResponse_ILicenseStatusService_2eproto.base);
  return *internal_default_instance();
}


void ILicenseStatusServiceGetLicenseStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _returnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ILicenseStatusServiceGetLicenseStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool _ReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _returnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ILicenseStatusServiceGetLicenseStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool _ReturnValue = 1;
  if (this->_returnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal__returnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  return target;
}

size_t ILicenseStatusServiceGetLicenseStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool _ReturnValue = 1;
  if (this->_returnvalue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ILicenseStatusServiceGetLicenseStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ILicenseStatusServiceGetLicenseStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ILicenseStatusServiceGetLicenseStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
    MergeFrom(*source);
  }
}

void ILicenseStatusServiceGetLicenseStatusResponse::MergeFrom(const ILicenseStatusServiceGetLicenseStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._returnvalue() != 0) {
    _internal_set__returnvalue(from._internal__returnvalue());
  }
}

void ILicenseStatusServiceGetLicenseStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ILicenseStatusServiceGetLicenseStatusResponse::CopyFrom(const ILicenseStatusServiceGetLicenseStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Arp.System.Lm.Services.Grpc.ILicenseStatusServiceGetLicenseStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ILicenseStatusServiceGetLicenseStatusResponse::IsInitialized() const {
  return true;
}

void ILicenseStatusServiceGetLicenseStatusResponse::InternalSwap(ILicenseStatusServiceGetLicenseStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_returnvalue_, other->_returnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ILicenseStatusServiceGetLicenseStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Grpc
}  // namespace Services
}  // namespace Lm
}  // namespace System
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest* Arena::CreateMaybeMessage< ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse* Arena::CreateMaybeMessage< ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Arp::System::Lm::Services::Grpc::ILicenseStatusServiceGetLicenseStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
