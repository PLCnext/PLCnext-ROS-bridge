// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DateStructure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DateStructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DateStructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DateStructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DateStructure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DateStructure_2eproto;
namespace Arp {
namespace Grpc {
class DateStructure;
class DateStructureDefaultTypeInternal;
extern DateStructureDefaultTypeInternal _DateStructure_default_instance_;
}  // namespace Grpc
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Grpc::DateStructure* Arena::CreateMaybeMessage<::Arp::Grpc::DateStructure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Grpc {

// ===================================================================

class DateStructure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Grpc.DateStructure) */ {
 public:
  inline DateStructure() : DateStructure(nullptr) {}
  virtual ~DateStructure();

  DateStructure(const DateStructure& from);
  DateStructure(DateStructure&& from) noexcept
    : DateStructure() {
    *this = ::std::move(from);
  }

  inline DateStructure& operator=(const DateStructure& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateStructure& operator=(DateStructure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateStructure& default_instance();

  static inline const DateStructure* internal_default_instance() {
    return reinterpret_cast<const DateStructure*>(
               &_DateStructure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DateStructure& a, DateStructure& b) {
    a.Swap(&b);
  }
  inline void Swap(DateStructure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateStructure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateStructure* New() const final {
    return CreateMaybeMessage<DateStructure>(nullptr);
  }

  DateStructure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateStructure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateStructure& from);
  void MergeFrom(const DateStructure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateStructure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Grpc.DateStructure";
  }
  protected:
  explicit DateStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DateStructure_2eproto);
    return ::descriptor_table_DateStructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHourFieldNumber = 4,
    kMinuteFieldNumber = 5,
    kSecondFieldNumber = 6,
    kMillisecondFieldNumber = 7,
    kMicrosecondFieldNumber = 8,
  };
  // sint32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 hour = 4;
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 minute = 5;
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 second = 6;
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 millisecond = 7;
  void clear_millisecond();
  ::PROTOBUF_NAMESPACE_ID::int32 millisecond() const;
  void set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_millisecond() const;
  void _internal_set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 microsecond = 8;
  void clear_microsecond();
  ::PROTOBUF_NAMESPACE_ID::int32 microsecond() const;
  void set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_microsecond() const;
  void _internal_set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Grpc.DateStructure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 minute_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  ::PROTOBUF_NAMESPACE_ID::int32 millisecond_;
  ::PROTOBUF_NAMESPACE_ID::int32 microsecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DateStructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DateStructure

// sint32 year = 1;
inline void DateStructure::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::year() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.year)
  return _internal_year();
}
inline void DateStructure::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
}
inline void DateStructure::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.year)
}

// sint32 month = 2;
inline void DateStructure::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::month() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.month)
  return _internal_month();
}
inline void DateStructure::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_ = value;
}
inline void DateStructure::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.month)
}

// sint32 day = 3;
inline void DateStructure::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::day() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.day)
  return _internal_day();
}
inline void DateStructure::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
}
inline void DateStructure::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.day)
}

// sint32 hour = 4;
inline void DateStructure::clear_hour() {
  hour_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::hour() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.hour)
  return _internal_hour();
}
inline void DateStructure::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_ = value;
}
inline void DateStructure::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.hour)
}

// sint32 minute = 5;
inline void DateStructure::clear_minute() {
  minute_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::minute() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.minute)
  return _internal_minute();
}
inline void DateStructure::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minute_ = value;
}
inline void DateStructure::set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.minute)
}

// sint32 second = 6;
inline void DateStructure::clear_second() {
  second_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::second() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.second)
  return _internal_second();
}
inline void DateStructure::_internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  second_ = value;
}
inline void DateStructure::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.second)
}

// sint32 millisecond = 7;
inline void DateStructure::clear_millisecond() {
  millisecond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_millisecond() const {
  return millisecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::millisecond() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.millisecond)
  return _internal_millisecond();
}
inline void DateStructure::_internal_set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  millisecond_ = value;
}
inline void DateStructure::set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_millisecond(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.millisecond)
}

// sint32 microsecond = 8;
inline void DateStructure::clear_microsecond() {
  microsecond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::_internal_microsecond() const {
  return microsecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateStructure::microsecond() const {
  // @@protoc_insertion_point(field_get:Arp.Grpc.DateStructure.microsecond)
  return _internal_microsecond();
}
inline void DateStructure::_internal_set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  microsecond_ = value;
}
inline void DateStructure::set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_microsecond(value);
  // @@protoc_insertion_point(field_set:Arp.Grpc.DateStructure.microsecond)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DateStructure_2eproto
