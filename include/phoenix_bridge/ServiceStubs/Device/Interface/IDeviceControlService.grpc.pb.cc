// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IDeviceControlService.proto

#include "IDeviceControlService.pb.h"
#include "IDeviceControlService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arp {
namespace Device {
namespace Interface {
namespace Services {
namespace Grpc {

static const char* IDeviceControlService_method_names[] = {
  "/Arp.Device.Interface.Services.Grpc.IDeviceControlService/RestartDevice",
  "/Arp.Device.Interface.Services.Grpc.IDeviceControlService/ResetToFactoryDefaults",
  "/Arp.Device.Interface.Services.Grpc.IDeviceControlService/StartFirmwareUpdate",
};

std::unique_ptr< IDeviceControlService::Stub> IDeviceControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IDeviceControlService::Stub> stub(new IDeviceControlService::Stub(channel));
  return stub;
}

IDeviceControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RestartDevice_(IDeviceControlService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetToFactoryDefaults_(IDeviceControlService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartFirmwareUpdate_(IDeviceControlService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IDeviceControlService::Stub::RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RestartDevice_, context, request, response);
}

void IDeviceControlService::Stub::experimental_async::RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestartDevice_, context, request, response, std::move(f));
}

void IDeviceControlService::Stub::experimental_async::RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestartDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* IDeviceControlService::Stub::PrepareAsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RestartDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* IDeviceControlService::Stub::AsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRestartDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDeviceControlService::Stub::ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetToFactoryDefaults_, context, request, response);
}

void IDeviceControlService::Stub::experimental_async::ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetToFactoryDefaults_, context, request, response, std::move(f));
}

void IDeviceControlService::Stub::experimental_async::ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetToFactoryDefaults_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* IDeviceControlService::Stub::PrepareAsyncResetToFactoryDefaultsRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetToFactoryDefaults_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* IDeviceControlService::Stub::AsyncResetToFactoryDefaultsRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetToFactoryDefaultsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IDeviceControlService::Stub::StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartFirmwareUpdate_, context, request, response);
}

void IDeviceControlService::Stub::experimental_async::StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartFirmwareUpdate_, context, request, response, std::move(f));
}

void IDeviceControlService::Stub::experimental_async::StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartFirmwareUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* IDeviceControlService::Stub::PrepareAsyncStartFirmwareUpdateRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartFirmwareUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* IDeviceControlService::Stub::AsyncStartFirmwareUpdateRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartFirmwareUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

IDeviceControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDeviceControlService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDeviceControlService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->RestartDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDeviceControlService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDeviceControlService::Service, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* req,
             ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* resp) {
               return service->ResetToFactoryDefaults(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IDeviceControlService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IDeviceControlService::Service, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IDeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* req,
             ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* resp) {
               return service->StartFirmwareUpdate(ctx, req, resp);
             }, this)));
}

IDeviceControlService::Service::~Service() {
}

::grpc::Status IDeviceControlService::Service::RestartDevice(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDeviceControlService::Service::ResetToFactoryDefaults(::grpc::ServerContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IDeviceControlService::Service::StartFirmwareUpdate(::grpc::ServerContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arp
}  // namespace Device
}  // namespace Interface
}  // namespace Services
}  // namespace Grpc

