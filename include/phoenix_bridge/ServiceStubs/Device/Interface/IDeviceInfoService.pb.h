// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IDeviceInfoService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IDeviceInfoService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IDeviceInfoService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ArpTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IDeviceInfoService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IDeviceInfoService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IDeviceInfoService_2eproto;
namespace Arp {
namespace Device {
namespace Interface {
namespace Services {
namespace Grpc {
class IDeviceInfoServiceGetItemRequest;
class IDeviceInfoServiceGetItemRequestDefaultTypeInternal;
extern IDeviceInfoServiceGetItemRequestDefaultTypeInternal _IDeviceInfoServiceGetItemRequest_default_instance_;
class IDeviceInfoServiceGetItemResponse;
class IDeviceInfoServiceGetItemResponseDefaultTypeInternal;
extern IDeviceInfoServiceGetItemResponseDefaultTypeInternal _IDeviceInfoServiceGetItemResponse_default_instance_;
class IDeviceInfoServiceGetItemsRequest;
class IDeviceInfoServiceGetItemsRequestDefaultTypeInternal;
extern IDeviceInfoServiceGetItemsRequestDefaultTypeInternal _IDeviceInfoServiceGetItemsRequest_default_instance_;
class IDeviceInfoServiceGetItemsResponse;
class IDeviceInfoServiceGetItemsResponseDefaultTypeInternal;
extern IDeviceInfoServiceGetItemsResponseDefaultTypeInternal _IDeviceInfoServiceGetItemsResponse_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Interface
}  // namespace Device
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemRequest* Arena::CreateMaybeMessage<::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemRequest>(Arena*);
template<> ::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemResponse* Arena::CreateMaybeMessage<::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemResponse>(Arena*);
template<> ::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemsRequest* Arena::CreateMaybeMessage<::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemsRequest>(Arena*);
template<> ::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemsResponse* Arena::CreateMaybeMessage<::Arp::Device::Interface::Services::Grpc::IDeviceInfoServiceGetItemsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Device {
namespace Interface {
namespace Services {
namespace Grpc {

// ===================================================================

class IDeviceInfoServiceGetItemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest) */ {
 public:
  inline IDeviceInfoServiceGetItemRequest() : IDeviceInfoServiceGetItemRequest(nullptr) {}
  virtual ~IDeviceInfoServiceGetItemRequest();

  IDeviceInfoServiceGetItemRequest(const IDeviceInfoServiceGetItemRequest& from);
  IDeviceInfoServiceGetItemRequest(IDeviceInfoServiceGetItemRequest&& from) noexcept
    : IDeviceInfoServiceGetItemRequest() {
    *this = ::std::move(from);
  }

  inline IDeviceInfoServiceGetItemRequest& operator=(const IDeviceInfoServiceGetItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDeviceInfoServiceGetItemRequest& operator=(IDeviceInfoServiceGetItemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDeviceInfoServiceGetItemRequest& default_instance();

  static inline const IDeviceInfoServiceGetItemRequest* internal_default_instance() {
    return reinterpret_cast<const IDeviceInfoServiceGetItemRequest*>(
               &_IDeviceInfoServiceGetItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IDeviceInfoServiceGetItemRequest& a, IDeviceInfoServiceGetItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDeviceInfoServiceGetItemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDeviceInfoServiceGetItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDeviceInfoServiceGetItemRequest* New() const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemRequest>(nullptr);
  }

  IDeviceInfoServiceGetItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDeviceInfoServiceGetItemRequest& from);
  void MergeFrom(const IDeviceInfoServiceGetItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDeviceInfoServiceGetItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest";
  }
  protected:
  explicit IDeviceInfoServiceGetItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDeviceInfoService_2eproto);
    return ::descriptor_table_IDeviceInfoService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
  };
  // string identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDeviceInfoService_2eproto;
};
// -------------------------------------------------------------------

class IDeviceInfoServiceGetItemsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest) */ {
 public:
  inline IDeviceInfoServiceGetItemsRequest() : IDeviceInfoServiceGetItemsRequest(nullptr) {}
  virtual ~IDeviceInfoServiceGetItemsRequest();

  IDeviceInfoServiceGetItemsRequest(const IDeviceInfoServiceGetItemsRequest& from);
  IDeviceInfoServiceGetItemsRequest(IDeviceInfoServiceGetItemsRequest&& from) noexcept
    : IDeviceInfoServiceGetItemsRequest() {
    *this = ::std::move(from);
  }

  inline IDeviceInfoServiceGetItemsRequest& operator=(const IDeviceInfoServiceGetItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDeviceInfoServiceGetItemsRequest& operator=(IDeviceInfoServiceGetItemsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDeviceInfoServiceGetItemsRequest& default_instance();

  static inline const IDeviceInfoServiceGetItemsRequest* internal_default_instance() {
    return reinterpret_cast<const IDeviceInfoServiceGetItemsRequest*>(
               &_IDeviceInfoServiceGetItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IDeviceInfoServiceGetItemsRequest& a, IDeviceInfoServiceGetItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDeviceInfoServiceGetItemsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDeviceInfoServiceGetItemsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDeviceInfoServiceGetItemsRequest* New() const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemsRequest>(nullptr);
  }

  IDeviceInfoServiceGetItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDeviceInfoServiceGetItemsRequest& from);
  void MergeFrom(const IDeviceInfoServiceGetItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDeviceInfoServiceGetItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest";
  }
  protected:
  explicit IDeviceInfoServiceGetItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDeviceInfoService_2eproto);
    return ::descriptor_table_IDeviceInfoService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiersFieldNumber = 1,
  };
  // repeated string identifiers = 1;
  int identifiers_size() const;
  private:
  int _internal_identifiers_size() const;
  public:
  void clear_identifiers();
  const std::string& identifiers(int index) const;
  std::string* mutable_identifiers(int index);
  void set_identifiers(int index, const std::string& value);
  void set_identifiers(int index, std::string&& value);
  void set_identifiers(int index, const char* value);
  void set_identifiers(int index, const char* value, size_t size);
  std::string* add_identifiers();
  void add_identifiers(const std::string& value);
  void add_identifiers(std::string&& value);
  void add_identifiers(const char* value);
  void add_identifiers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& identifiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_identifiers();
  private:
  const std::string& _internal_identifiers(int index) const;
  std::string* _internal_add_identifiers();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> identifiers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDeviceInfoService_2eproto;
};
// -------------------------------------------------------------------

class IDeviceInfoServiceGetItemResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse) */ {
 public:
  inline IDeviceInfoServiceGetItemResponse() : IDeviceInfoServiceGetItemResponse(nullptr) {}
  virtual ~IDeviceInfoServiceGetItemResponse();

  IDeviceInfoServiceGetItemResponse(const IDeviceInfoServiceGetItemResponse& from);
  IDeviceInfoServiceGetItemResponse(IDeviceInfoServiceGetItemResponse&& from) noexcept
    : IDeviceInfoServiceGetItemResponse() {
    *this = ::std::move(from);
  }

  inline IDeviceInfoServiceGetItemResponse& operator=(const IDeviceInfoServiceGetItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDeviceInfoServiceGetItemResponse& operator=(IDeviceInfoServiceGetItemResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDeviceInfoServiceGetItemResponse& default_instance();

  static inline const IDeviceInfoServiceGetItemResponse* internal_default_instance() {
    return reinterpret_cast<const IDeviceInfoServiceGetItemResponse*>(
               &_IDeviceInfoServiceGetItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IDeviceInfoServiceGetItemResponse& a, IDeviceInfoServiceGetItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDeviceInfoServiceGetItemResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDeviceInfoServiceGetItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDeviceInfoServiceGetItemResponse* New() const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemResponse>(nullptr);
  }

  IDeviceInfoServiceGetItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDeviceInfoServiceGetItemResponse& from);
  void MergeFrom(const IDeviceInfoServiceGetItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDeviceInfoServiceGetItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse";
  }
  protected:
  explicit IDeviceInfoServiceGetItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDeviceInfoService_2eproto);
    return ::descriptor_table_IDeviceInfoService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Type.Grpc.ObjectType _ReturnValue = 1;
  bool has__returnvalue() const;
  private:
  bool _internal_has__returnvalue() const;
  public:
  void clear__returnvalue();
  const ::Arp::Type::Grpc::ObjectType& _returnvalue() const;
  ::Arp::Type::Grpc::ObjectType* release__returnvalue();
  ::Arp::Type::Grpc::ObjectType* mutable__returnvalue();
  void set_allocated__returnvalue(::Arp::Type::Grpc::ObjectType* _returnvalue);
  private:
  const ::Arp::Type::Grpc::ObjectType& _internal__returnvalue() const;
  ::Arp::Type::Grpc::ObjectType* _internal_mutable__returnvalue();
  public:
  void unsafe_arena_set_allocated__returnvalue(
      ::Arp::Type::Grpc::ObjectType* _returnvalue);
  ::Arp::Type::Grpc::ObjectType* unsafe_arena_release__returnvalue();

  // @@protoc_insertion_point(class_scope:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Arp::Type::Grpc::ObjectType* _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDeviceInfoService_2eproto;
};
// -------------------------------------------------------------------

class IDeviceInfoServiceGetItemsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse) */ {
 public:
  inline IDeviceInfoServiceGetItemsResponse() : IDeviceInfoServiceGetItemsResponse(nullptr) {}
  virtual ~IDeviceInfoServiceGetItemsResponse();

  IDeviceInfoServiceGetItemsResponse(const IDeviceInfoServiceGetItemsResponse& from);
  IDeviceInfoServiceGetItemsResponse(IDeviceInfoServiceGetItemsResponse&& from) noexcept
    : IDeviceInfoServiceGetItemsResponse() {
    *this = ::std::move(from);
  }

  inline IDeviceInfoServiceGetItemsResponse& operator=(const IDeviceInfoServiceGetItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDeviceInfoServiceGetItemsResponse& operator=(IDeviceInfoServiceGetItemsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDeviceInfoServiceGetItemsResponse& default_instance();

  static inline const IDeviceInfoServiceGetItemsResponse* internal_default_instance() {
    return reinterpret_cast<const IDeviceInfoServiceGetItemsResponse*>(
               &_IDeviceInfoServiceGetItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IDeviceInfoServiceGetItemsResponse& a, IDeviceInfoServiceGetItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDeviceInfoServiceGetItemsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDeviceInfoServiceGetItemsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDeviceInfoServiceGetItemsResponse* New() const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemsResponse>(nullptr);
  }

  IDeviceInfoServiceGetItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDeviceInfoServiceGetItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDeviceInfoServiceGetItemsResponse& from);
  void MergeFrom(const IDeviceInfoServiceGetItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDeviceInfoServiceGetItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse";
  }
  protected:
  explicit IDeviceInfoServiceGetItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDeviceInfoService_2eproto);
    return ::descriptor_table_IDeviceInfoService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Type.Grpc.ObjectType _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  ::Arp::Type::Grpc::ObjectType* mutable__returnvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >*
      mutable__returnvalue();
  private:
  const ::Arp::Type::Grpc::ObjectType& _internal__returnvalue(int index) const;
  ::Arp::Type::Grpc::ObjectType* _internal_add__returnvalue();
  public:
  const ::Arp::Type::Grpc::ObjectType& _returnvalue(int index) const;
  ::Arp::Type::Grpc::ObjectType* add__returnvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >&
      _returnvalue() const;

  // @@protoc_insertion_point(class_scope:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType > _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDeviceInfoService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IDeviceInfoServiceGetItemRequest

// string identifier = 1;
inline void IDeviceInfoServiceGetItemRequest::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& IDeviceInfoServiceGetItemRequest::identifier() const {
  // @@protoc_insertion_point(field_get:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
  return _internal_identifier();
}
inline void IDeviceInfoServiceGetItemRequest::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
}
inline std::string* IDeviceInfoServiceGetItemRequest::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& IDeviceInfoServiceGetItemRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void IDeviceInfoServiceGetItemRequest::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDeviceInfoServiceGetItemRequest::set_identifier(std::string&& value) {
  
  identifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
}
inline void IDeviceInfoServiceGetItemRequest::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
}
inline void IDeviceInfoServiceGetItemRequest::set_identifier(const char* value,
    size_t size) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
}
inline std::string* IDeviceInfoServiceGetItemRequest::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDeviceInfoServiceGetItemRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDeviceInfoServiceGetItemRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemRequest.identifier)
}

// -------------------------------------------------------------------

// IDeviceInfoServiceGetItemsRequest

// repeated string identifiers = 1;
inline int IDeviceInfoServiceGetItemsRequest::_internal_identifiers_size() const {
  return identifiers_.size();
}
inline int IDeviceInfoServiceGetItemsRequest::identifiers_size() const {
  return _internal_identifiers_size();
}
inline void IDeviceInfoServiceGetItemsRequest::clear_identifiers() {
  identifiers_.Clear();
}
inline std::string* IDeviceInfoServiceGetItemsRequest::add_identifiers() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
  return _internal_add_identifiers();
}
inline const std::string& IDeviceInfoServiceGetItemsRequest::_internal_identifiers(int index) const {
  return identifiers_.Get(index);
}
inline const std::string& IDeviceInfoServiceGetItemsRequest::identifiers(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
  return _internal_identifiers(index);
}
inline std::string* IDeviceInfoServiceGetItemsRequest::mutable_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
  return identifiers_.Mutable(index);
}
inline void IDeviceInfoServiceGetItemsRequest::set_identifiers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
  identifiers_.Mutable(index)->assign(value);
}
inline void IDeviceInfoServiceGetItemsRequest::set_identifiers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
  identifiers_.Mutable(index)->assign(std::move(value));
}
inline void IDeviceInfoServiceGetItemsRequest::set_identifiers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identifiers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
}
inline void IDeviceInfoServiceGetItemsRequest::set_identifiers(int index, const char* value, size_t size) {
  identifiers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
}
inline std::string* IDeviceInfoServiceGetItemsRequest::_internal_add_identifiers() {
  return identifiers_.Add();
}
inline void IDeviceInfoServiceGetItemsRequest::add_identifiers(const std::string& value) {
  identifiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
}
inline void IDeviceInfoServiceGetItemsRequest::add_identifiers(std::string&& value) {
  identifiers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
}
inline void IDeviceInfoServiceGetItemsRequest::add_identifiers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identifiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
}
inline void IDeviceInfoServiceGetItemsRequest::add_identifiers(const char* value, size_t size) {
  identifiers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDeviceInfoServiceGetItemsRequest::identifiers() const {
  // @@protoc_insertion_point(field_list:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
  return identifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDeviceInfoServiceGetItemsRequest::mutable_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsRequest.identifiers)
  return &identifiers_;
}

// -------------------------------------------------------------------

// IDeviceInfoServiceGetItemResponse

// .Arp.Type.Grpc.ObjectType _ReturnValue = 1;
inline bool IDeviceInfoServiceGetItemResponse::_internal_has__returnvalue() const {
  return this != internal_default_instance() && _returnvalue_ != nullptr;
}
inline bool IDeviceInfoServiceGetItemResponse::has__returnvalue() const {
  return _internal_has__returnvalue();
}
inline const ::Arp::Type::Grpc::ObjectType& IDeviceInfoServiceGetItemResponse::_internal__returnvalue() const {
  const ::Arp::Type::Grpc::ObjectType* p = _returnvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Type::Grpc::ObjectType&>(
      ::Arp::Type::Grpc::_ObjectType_default_instance_);
}
inline const ::Arp::Type::Grpc::ObjectType& IDeviceInfoServiceGetItemResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDeviceInfoServiceGetItemResponse::unsafe_arena_set_allocated__returnvalue(
    ::Arp::Type::Grpc::ObjectType* _returnvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_returnvalue_);
  }
  _returnvalue_ = _returnvalue;
  if (_returnvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse._ReturnValue)
}
inline ::Arp::Type::Grpc::ObjectType* IDeviceInfoServiceGetItemResponse::release__returnvalue() {
  
  ::Arp::Type::Grpc::ObjectType* temp = _returnvalue_;
  _returnvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Type::Grpc::ObjectType* IDeviceInfoServiceGetItemResponse::unsafe_arena_release__returnvalue() {
  // @@protoc_insertion_point(field_release:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse._ReturnValue)
  
  ::Arp::Type::Grpc::ObjectType* temp = _returnvalue_;
  _returnvalue_ = nullptr;
  return temp;
}
inline ::Arp::Type::Grpc::ObjectType* IDeviceInfoServiceGetItemResponse::_internal_mutable__returnvalue() {
  
  if (_returnvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Type::Grpc::ObjectType>(GetArena());
    _returnvalue_ = p;
  }
  return _returnvalue_;
}
inline ::Arp::Type::Grpc::ObjectType* IDeviceInfoServiceGetItemResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse._ReturnValue)
  return _internal_mutable__returnvalue();
}
inline void IDeviceInfoServiceGetItemResponse::set_allocated__returnvalue(::Arp::Type::Grpc::ObjectType* _returnvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_returnvalue_);
  }
  if (_returnvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_returnvalue)->GetArena();
    if (message_arena != submessage_arena) {
      _returnvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _returnvalue, submessage_arena);
    }
    
  } else {
    
  }
  _returnvalue_ = _returnvalue;
  // @@protoc_insertion_point(field_set_allocated:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDeviceInfoServiceGetItemsResponse

// repeated .Arp.Type.Grpc.ObjectType _ReturnValue = 1;
inline int IDeviceInfoServiceGetItemsResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int IDeviceInfoServiceGetItemsResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline ::Arp::Type::Grpc::ObjectType* IDeviceInfoServiceGetItemsResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >*
IDeviceInfoServiceGetItemsResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse._ReturnValue)
  return &_returnvalue_;
}
inline const ::Arp::Type::Grpc::ObjectType& IDeviceInfoServiceGetItemsResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const ::Arp::Type::Grpc::ObjectType& IDeviceInfoServiceGetItemsResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline ::Arp::Type::Grpc::ObjectType* IDeviceInfoServiceGetItemsResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline ::Arp::Type::Grpc::ObjectType* IDeviceInfoServiceGetItemsResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Type::Grpc::ObjectType >&
IDeviceInfoServiceGetItemsResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Device.Interface.Services.Grpc.IDeviceInfoServiceGetItemsResponse._ReturnValue)
  return _returnvalue_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace Interface
}  // namespace Device
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IDeviceInfoService_2eproto
