// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IDeviceControlService.proto
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#ifndef GRPC_IDeviceControlService_2eproto__INCLUDED
#define GRPC_IDeviceControlService_2eproto__INCLUDED

#include "IDeviceControlService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Arp {
namespace Device {
namespace Interface {
namespace Services {
namespace Grpc {

// *
// Use this service to control the device.
//
class IDeviceControlService final {
 public:
  static constexpr char const* service_full_name() {
    return "Arp.Device.Interface.Services.Grpc.IDeviceControlService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / <summary>
    // / Reboot the device
    // / </summary>
    virtual ::grpc::Status RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRestartDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRestartDeviceRaw(context, request, cq));
    }
    // / <summary>
    // / Reset device configuration
    // / </summary>
    // / <param name="resetType">
    // / <c>1</c> Reset device configuration to factory default, <c>2</c> Downgrade FW to factory version and reset configuration</param>
    // / <returns>Result of start execute <see cref="Arp.Device.Interface.Services.AccessErrorCode" /></returns>
    // / <remarks>
    // / After successfull start the PLC will stop and than reboot. While the reboot the requested defaults will be set.
    // / </remarks>
    virtual ::grpc::Status ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>> AsyncResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>>(AsyncResetToFactoryDefaultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>> PrepareAsyncResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>>(PrepareAsyncResetToFactoryDefaultsRaw(context, request, cq));
    }
    // / <summary>
    // / Start FW update
    // / </summary>
    // / <param name="updateType">Reserved for extentions, must be <c>0</c> in this version.</param>
    // / <returns>Result of start execute <see cref="Arp.Device.Interface.Services.AccessErrorCode" /></returns>
    // / <remarks>
    // / Before you can start an update a raucb-container must be copied to path "/opt/plcnext".
    // / After successfull start an update the PLC will stop, execute the update and than reboot.
    // / </remarks>
    virtual ::grpc::Status StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>> AsyncStartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>>(AsyncStartFirmwareUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>> PrepareAsyncStartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>>(PrepareAsyncStartFirmwareUpdateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / <summary>
      // / Reboot the device
      // / </summary>
      virtual void RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Reset device configuration
      // / </summary>
      // / <param name="resetType">
      // / <c>1</c> Reset device configuration to factory default, <c>2</c> Downgrade FW to factory version and reset configuration</param>
      // / <returns>Result of start execute <see cref="Arp.Device.Interface.Services.AccessErrorCode" /></returns>
      // / <remarks>
      // / After successfull start the PLC will stop and than reboot. While the reboot the requested defaults will be set.
      // / </remarks>
      virtual void ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // / <summary>
      // / Start FW update
      // / </summary>
      // / <param name="updateType">Reserved for extentions, must be <c>0</c> in this version.</param>
      // / <returns>Result of start execute <see cref="Arp.Device.Interface.Services.AccessErrorCode" /></returns>
      // / <remarks>
      // / Before you can start an update a raucb-container must be copied to path "/opt/plcnext".
      // / After successfull start an update the PLC will stop, execute the update and than reboot.
      // / </remarks>
      virtual void StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* AsyncResetToFactoryDefaultsRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* PrepareAsyncResetToFactoryDefaultsRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* AsyncStartFirmwareUpdateRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* PrepareAsyncStartFirmwareUpdateRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRestartDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRestartDeviceRaw(context, request, cq));
    }
    ::grpc::Status ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>> AsyncResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>>(AsyncResetToFactoryDefaultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>> PrepareAsyncResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>>(PrepareAsyncResetToFactoryDefaultsRaw(context, request, cq));
    }
    ::grpc::Status StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>> AsyncStartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>>(AsyncStartFirmwareUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>> PrepareAsyncStartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>>(PrepareAsyncStartFirmwareUpdateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartDevice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResetToFactoryDefaults(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartFirmwareUpdate(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* AsyncResetToFactoryDefaultsRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* PrepareAsyncResetToFactoryDefaultsRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* AsyncStartFirmwareUpdateRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* PrepareAsyncStartFirmwareUpdateRaw(::grpc::ClientContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RestartDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetToFactoryDefaults_;
    const ::grpc::internal::RpcMethod rpcmethod_StartFirmwareUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / <summary>
    // / Reboot the device
    // / </summary>
    virtual ::grpc::Status RestartDevice(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
    // / <summary>
    // / Reset device configuration
    // / </summary>
    // / <param name="resetType">
    // / <c>1</c> Reset device configuration to factory default, <c>2</c> Downgrade FW to factory version and reset configuration</param>
    // / <returns>Result of start execute <see cref="Arp.Device.Interface.Services.AccessErrorCode" /></returns>
    // / <remarks>
    // / After successfull start the PLC will stop and than reboot. While the reboot the requested defaults will be set.
    // / </remarks>
    virtual ::grpc::Status ResetToFactoryDefaults(::grpc::ServerContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response);
    // / <summary>
    // / Start FW update
    // / </summary>
    // / <param name="updateType">Reserved for extentions, must be <c>0</c> in this version.</param>
    // / <returns>Result of start execute <see cref="Arp.Device.Interface.Services.AccessErrorCode" /></returns>
    // / <remarks>
    // / Before you can start an update a raucb-container must be copied to path "/opt/plcnext".
    // / After successfull start an update the PLC will stop, execute the update and than reboot.
    // / </remarks>
    virtual ::grpc::Status StartFirmwareUpdate(::grpc::ServerContext* context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestartDevice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RestartDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartDevice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartDevice(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetToFactoryDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetToFactoryDefaults() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ResetToFactoryDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetToFactoryDefaults(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetToFactoryDefaults(::grpc::ServerContext* context, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartFirmwareUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartFirmwareUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StartFirmwareUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartFirmwareUpdate(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartFirmwareUpdate(::grpc::ServerContext* context, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RestartDevice<WithAsyncMethod_ResetToFactoryDefaults<WithAsyncMethod_StartFirmwareUpdate<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RestartDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RestartDevice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) { return this->RestartDevice(context, request, response); }));}
    void SetMessageAllocatorFor_RestartDevice(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RestartDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartDevice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartDevice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetToFactoryDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResetToFactoryDefaults() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* response) { return this->ResetToFactoryDefaults(context, request, response); }));}
    void SetMessageAllocatorFor_ResetToFactoryDefaults(
        ::grpc::experimental::MessageAllocator< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetToFactoryDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetToFactoryDefaults(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetToFactoryDefaults(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetToFactoryDefaults(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartFirmwareUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartFirmwareUpdate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* request, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* response) { return this->StartFirmwareUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_StartFirmwareUpdate(
        ::grpc::experimental::MessageAllocator< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartFirmwareUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartFirmwareUpdate(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartFirmwareUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartFirmwareUpdate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RestartDevice<ExperimentalWithCallbackMethod_ResetToFactoryDefaults<ExperimentalWithCallbackMethod_StartFirmwareUpdate<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RestartDevice<ExperimentalWithCallbackMethod_ResetToFactoryDefaults<ExperimentalWithCallbackMethod_StartFirmwareUpdate<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RestartDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestartDevice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RestartDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartDevice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetToFactoryDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetToFactoryDefaults() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ResetToFactoryDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetToFactoryDefaults(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartFirmwareUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartFirmwareUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StartFirmwareUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartFirmwareUpdate(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestartDevice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RestartDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartDevice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetToFactoryDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetToFactoryDefaults() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ResetToFactoryDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetToFactoryDefaults(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetToFactoryDefaults(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartFirmwareUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartFirmwareUpdate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StartFirmwareUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartFirmwareUpdate(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartFirmwareUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RestartDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RestartDevice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestartDevice(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RestartDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartDevice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartDevice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetToFactoryDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetToFactoryDefaults() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetToFactoryDefaults(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetToFactoryDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetToFactoryDefaults(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetToFactoryDefaults(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetToFactoryDefaults(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartFirmwareUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartFirmwareUpdate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartFirmwareUpdate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartFirmwareUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartFirmwareUpdate(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartFirmwareUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartFirmwareUpdate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestartDevice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedRestartDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RestartDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartDevice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetToFactoryDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetToFactoryDefaults() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* streamer) {
                       return this->StreamedResetToFactoryDefaults(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetToFactoryDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetToFactoryDefaults(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetToFactoryDefaults(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsRequest,::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceResetToFactoryDefaultsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartFirmwareUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartFirmwareUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* streamer) {
                       return this->StreamedStartFirmwareUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartFirmwareUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartFirmwareUpdate(::grpc::ServerContext* /*context*/, const ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest* /*request*/, ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartFirmwareUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateRequest,::Arp::Device::Interface::Services::Grpc::IDeviceControlServiceStartFirmwareUpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RestartDevice<WithStreamedUnaryMethod_ResetToFactoryDefaults<WithStreamedUnaryMethod_StartFirmwareUpdate<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RestartDevice<WithStreamedUnaryMethod_ResetToFactoryDefaults<WithStreamedUnaryMethod_StartFirmwareUpdate<Service > > > StreamedService;
};

}  // namespace Grpc
}  // namespace Services
}  // namespace Interface
}  // namespace Device
}  // namespace Arp


#endif  // GRPC_IDeviceControlService_2eproto__INCLUDED
