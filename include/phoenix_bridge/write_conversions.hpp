#ifndef WRITE_CONVERSIONS_HPP
#define WRITE_CONVERSIONS_HPP

#include "phoenix_bridge/include_types.h"

#include <grpcpp/grpcpp.h>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/message.h>
#include <google/protobuf/dynamic_message.h>

#include "phoenix_bridge/ServiceStubs/Plc/Gds/IDataAccessService.grpc.pb.h"
#include "phoenix_bridge/ServiceStubs/ArpTypes.grpc.pb.h"

using grpc::Channel;
using grpc::ClientContext;
using grpc::ClientReader;
using grpc::Status;

using Arp::Type::Grpc::ObjectType;

using Arp::Plc::Gds::Services::Grpc::IDataAccessService;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse;

/**
 * @brief Provides templated functions to pack data from ros msg (or any basic type) into a Grpc::WriteItem
 * which can then be used to write data to the PLC.
 * The templated function specializations are generated by cog at build time for each of the types specified in the
 * parameters file.
 *
 */
namespace conversions
{
  /**
   * @brief Base template function to pack data into a WriteItem object
   * Implement template specializations for each type which has to be handled.
   * If type specilization not implemented but invoked, prints this error msg (@todo: and also kill node)
   * @param grpc_object The write item into which data needs to be repacked
   * @param data_to_pack The ros msg data which needs to be repacked into the grpc object. Can also be base types.
   */
  template <typename T> inline
  void packWriteItem(::Arp::Plc::Gds::Services::Grpc::WriteItem* grpc_object, T data_to_pack)
  {
    (void) data_to_pack;
    (void) grpc_object;
    ROS_ERROR_STREAM_ONCE("Conversion from type " << typeid(data_to_pack).name() << " not implemented!!");
  }

  /**
   * @brief Template specialization of packWriteItem for basic double type. Used by IO services.
   * @param grpc_object
   * @param data_to_pack
   */
  template <> inline
  void packWriteItem<double>(::Arp::Plc::Gds::Services::Grpc::WriteItem* grpc_object, double data_to_pack)
  {
    grpc_object->mutable_value()->set_typecode(::Arp::Type::Grpc::CoreType::CT_Real64);
    grpc_object->mutable_value()->set_doublevalue(data_to_pack);
  }

  /**
   * @brief Template specialization of packWriteItem for basic bool type. Used by IO services.
   * @param grpc_object
   * @param data_to_pack
   */
  template <> inline
  void packWriteItem<bool>(::Arp::Plc::Gds::Services::Grpc::WriteItem* grpc_object, bool data_to_pack)
  {
    grpc_object->mutable_value()->set_typecode(::Arp::Type::Grpc::CoreType::CT_Boolean);
    grpc_object->mutable_value()->set_boolvalue(data_to_pack);
  }
}

#endif // WRITE_CONVERSIONS_HPP
