#ifndef READ_CONVERSIONS_HPP
#define READ_CONVERSIONS_HPP

#include "phoenix_bridge/include_types.h"

#include <grpcpp/grpcpp.h>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/message.h>
#include <google/protobuf/dynamic_message.h>

#include "phoenix_bridge/ServiceStubs/Plc/Gds/IDataAccessService.grpc.pb.h"
#include "phoenix_bridge/ServiceStubs/ArpTypes.grpc.pb.h"

using grpc::Channel;
using grpc::ClientContext;
using grpc::ClientReader;
using grpc::Status;

using Arp::Type::Grpc::ObjectType;

using Arp::Plc::Gds::Services::Grpc::IDataAccessService;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest;
using Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse;

/**
 * @brief Provides templated functions to unpackpack data from grpc::ObjectType, which should be extracted from a
 * gRPC PLC read service call, into ros msg (or any basic type)
 * The templated function specializations are generated by cog at build time for each of the types specified in the
 * parameters file.
 */
namespace conversions
{
  /**
   * @brief Base template function to unpack data from a ReadResponse object
   * Implement template specializations for each type which has to be handled.
   * If type specilization not implemented but invoked, prints this error msg (@todo: and also kill node)
   * @param grpc_object grpc::ObjectType, extracted from the read response object, from which data needs to be unpacked
   * @param unpack_to_data The ros msg data variable into which the read resposne has to be unpacked. Can also be base types.
   */
  template <typename T> inline
  void unpackReadObject(const ObjectType &grpc_object, T& unpack_to_data)
  {
    (void) unpack_to_data;
    (void) grpc_object;
    ROS_ERROR_STREAM_ONCE("Conversion to type " << typeid(unpack_to_data).name() << " not implemented!!");
  }

  /**
   * @brief Bool specialization
   */
  template <>
  inline void unpackReadObject<bool>(const ObjectType &grpc_object, bool& unpack_to_data)
  {
    unpack_to_data = grpc_object.boolvalue();
  }

  /**
   * @brief Double specialization
   */
  template <>
  inline void unpackReadObject<double>(const ObjectType &grpc_object, double& unpack_to_data)
  {
    unpack_to_data = grpc_object.doublevalue();
  }

}

#endif // READ_CONVERSIONS_HPP
