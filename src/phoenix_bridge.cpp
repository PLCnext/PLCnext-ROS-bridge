//
// Copyright 2022 Fraunhofer IPA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "phoenix_bridge/phoenix_bridge.h"
#include "phoenix_bridge/params_struct.h"

#include <ros/ros.h>

/**
 * @brief Create bridges for each type. Parameter passed is the simple name to lookup in config/interface_description.yaml
 */
PhoenixBridge::PhoenixBridge(ros::NodeHandle nh)
{
  ///
  /// The following section is generated by cog at build time. Manual edits will be lost when rebuilt.
  ///

  /*[[[cog
  import cog
  import sys
  import os

  sys.path.append(os.getcwd()) # Necessary when build invokes this script
  from src.parsers.param_parser import ParamParser

  obj = ParamParser()
  for type in obj.types_:
          cog.outl(  "if (nh.hasParam(\"{}/{}\"))".format(type[0], type[1]))
          cog.outl("{")
          cog.outl(  "  ROS_INFO_STREAM(\" Spawing {}/{} bridge \");".format(type[0], type[1]))
          cog.outl(  "  {}_bridge_.init(\"{}/{}\", nh);".format(type[1].lower(), type[0], type[1]))
          cog.outl("}")
  ]]]*/
  if (nh.hasParam("nav_msgs/Odometry"))
  {
    ROS_INFO_STREAM(" Spawing nav_msgs/Odometry bridge ");
    odometry_bridge_.init("nav_msgs/Odometry", nh);
  }
  if (nh.hasParam("geometry_msgs/Twist"))
  {
    ROS_INFO_STREAM(" Spawing geometry_msgs/Twist bridge ");
    twist_bridge_.init("geometry_msgs/Twist", nh);
  }
  if (nh.hasParam("std_msgs/String"))
  {
    ROS_INFO_STREAM(" Spawing std_msgs/String bridge ");
    string_bridge_.init("std_msgs/String", nh);
  }
  if (nh.hasParam("sensor_msgs/LaserScan"))
  {
    ROS_INFO_STREAM(" Spawing sensor_msgs/LaserScan bridge ");
    laserscan_bridge_.init("sensor_msgs/LaserScan", nh);
  }
  // [[[end]]]

  ///
  /// The above section is generated by cog at build time. Manual edits will be lost when rebuilt.
  ///

}
