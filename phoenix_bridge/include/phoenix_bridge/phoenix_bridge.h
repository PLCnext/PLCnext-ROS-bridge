//
// Copyright 2022 Fraunhofer IPA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#ifndef PHOENIX_BRIDGE_PHOENIX_BRIDGE_H
#define PHOENIX_BRIDGE_PHOENIX_BRIDGE_H

#include "phoenix_bridge/bridge_type.h"

#include <vector>
#include <string>

/**
 * @brief Create bridges for each type and initialise them
 */
class PhoenixBridge
{
public:
  explicit PhoenixBridge(ros::NodeHandle nh);

private:
  /// Declare all the bridge types to create
  ///
  /// The following section is generated by cog at build time. Manual edits will be lost when rebuilt.
  ///

  /*[[[cog
  import cog
  import sys
  import os

  sys.path.append(os.getcwd()) # Necessary when build invokes this script
  from src.parsers.param_parser import ParamParser

  obj = ParamParser()
  for type in obj.types_:
          cog.outl( "BridgeType<{}::{}> {}_bridge_;" .format(type[0], type[1], type[1].lower()) )
  ]]]*/
  BridgeType<nav_msgs::Odometry> odometry_bridge_;
  BridgeType<geometry_msgs::Twist> twist_bridge_;
  BridgeType<std_msgs::String> string_bridge_;
  BridgeType<std_msgs::Int64> int64_bridge_;
  BridgeType<std_msgs::Float64> float64_bridge_;
  BridgeType<std_msgs::Header> header_bridge_;
  // [[[end]]]

  ///
  /// The above section is generated by cog at build time. Manual edits will be lost when rebuilt.
  ///

};

#endif  // PHOENIX_BRIDGE_PHOENIX_BRIDGE_H
