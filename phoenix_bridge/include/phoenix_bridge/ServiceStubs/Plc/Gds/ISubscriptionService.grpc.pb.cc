// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ISubscriptionService.proto

#include "ISubscriptionService.pb.h"
#include "ISubscriptionService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {

static const char* ISubscriptionService_method_names[] = {
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/CreateSubscription",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/CreateRecordingSubscription",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/AddVariable",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/AddVariables",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/RemoveVariable",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/Subscribe",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/Resubscribe",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/Unsubscribe",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/DeleteSubscription",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/GetVariableInfos",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/GetTimeStampedVariableInfos",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/GetRecordInfos",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/ReadValues",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/ReadTimeStampedValues",
  "/Arp.Plc.Gds.Services.Grpc.ISubscriptionService/ReadRecords",
};

std::unique_ptr< ISubscriptionService::Stub> ISubscriptionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ISubscriptionService::Stub> stub(new ISubscriptionService::Stub(channel));
  return stub;
}

ISubscriptionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSubscription_(ISubscriptionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRecordingSubscription_(ISubscriptionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddVariable_(ISubscriptionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddVariables_(ISubscriptionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveVariable_(ISubscriptionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(ISubscriptionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Resubscribe_(ISubscriptionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unsubscribe_(ISubscriptionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSubscription_(ISubscriptionService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVariableInfos_(ISubscriptionService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTimeStampedVariableInfos_(ISubscriptionService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecordInfos_(ISubscriptionService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadValues_(ISubscriptionService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadTimeStampedValues_(ISubscriptionService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadRecords_(ISubscriptionService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ISubscriptionService::Stub::CreateSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSubscription_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::CreateSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSubscription_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::CreateSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse>* ISubscriptionService::Stub::PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse>* ISubscriptionService::Stub::AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::CreateRecordingSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRecordingSubscription_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::CreateRecordingSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRecordingSubscription_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::CreateRecordingSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRecordingSubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse>* ISubscriptionService::Stub::PrepareAsyncCreateRecordingSubscriptionRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRecordingSubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse>* ISubscriptionService::Stub::AsyncCreateRecordingSubscriptionRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRecordingSubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddVariable_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddVariable_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::AddVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse>* ISubscriptionService::Stub::PrepareAsyncAddVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddVariable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse>* ISubscriptionService::Stub::AsyncAddVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddVariableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::AddVariables(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddVariables_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::AddVariables(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddVariables_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::AddVariables(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddVariables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse>* ISubscriptionService::Stub::PrepareAsyncAddVariablesRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddVariables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse>* ISubscriptionService::Stub::AsyncAddVariablesRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddVariablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveVariable_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveVariable_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::RemoveVariable(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse>* ISubscriptionService::Stub::PrepareAsyncRemoveVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveVariable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse>* ISubscriptionService::Stub::AsyncRemoveVariableRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveVariableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::Subscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Subscribe_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse>* ISubscriptionService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Subscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse>* ISubscriptionService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::Resubscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Resubscribe_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::Resubscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Resubscribe_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::Resubscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Resubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse>* ISubscriptionService::Stub::PrepareAsyncResubscribeRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Resubscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse>* ISubscriptionService::Stub::AsyncResubscribeRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::Unsubscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unsubscribe_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::Unsubscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::Unsubscribe(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse>* ISubscriptionService::Stub::PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unsubscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse>* ISubscriptionService::Stub::AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnsubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::DeleteSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSubscription_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::DeleteSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSubscription_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::DeleteSubscription(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse>* ISubscriptionService::Stub::PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse>* ISubscriptionService::Stub::AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::GetVariableInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVariableInfos_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::GetVariableInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVariableInfos_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::GetVariableInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVariableInfos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse>* ISubscriptionService::Stub::PrepareAsyncGetVariableInfosRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVariableInfos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse>* ISubscriptionService::Stub::AsyncGetVariableInfosRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVariableInfosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::GetTimeStampedVariableInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTimeStampedVariableInfos_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::GetTimeStampedVariableInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTimeStampedVariableInfos_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::GetTimeStampedVariableInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTimeStampedVariableInfos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse>* ISubscriptionService::Stub::PrepareAsyncGetTimeStampedVariableInfosRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTimeStampedVariableInfos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse>* ISubscriptionService::Stub::AsyncGetTimeStampedVariableInfosRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTimeStampedVariableInfosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::GetRecordInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRecordInfos_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::GetRecordInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecordInfos_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::GetRecordInfos(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecordInfos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse>* ISubscriptionService::Stub::PrepareAsyncGetRecordInfosRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRecordInfos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse>* ISubscriptionService::Stub::AsyncGetRecordInfosRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRecordInfosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::ReadValues(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadValues_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::ReadValues(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadValues_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::ReadValues(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse>* ISubscriptionService::Stub::PrepareAsyncReadValuesRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse>* ISubscriptionService::Stub::AsyncReadValuesRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::ReadTimeStampedValues(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadTimeStampedValues_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::ReadTimeStampedValues(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadTimeStampedValues_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::ReadTimeStampedValues(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadTimeStampedValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse>* ISubscriptionService::Stub::PrepareAsyncReadTimeStampedValuesRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadTimeStampedValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse>* ISubscriptionService::Stub::AsyncReadTimeStampedValuesRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadTimeStampedValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ISubscriptionService::Stub::ReadRecords(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest& request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadRecords_, context, request, response);
}

void ISubscriptionService::Stub::experimental_async::ReadRecords(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadRecords_, context, request, response, std::move(f));
}

void ISubscriptionService::Stub::experimental_async::ReadRecords(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadRecords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse>* ISubscriptionService::Stub::PrepareAsyncReadRecordsRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadRecords_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse>* ISubscriptionService::Stub::AsyncReadRecordsRaw(::grpc::ClientContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadRecordsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ISubscriptionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse* resp) {
               return service->CreateSubscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse* resp) {
               return service->CreateRecordingSubscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse* resp) {
               return service->AddVariable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse* resp) {
               return service->AddVariables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse* resp) {
               return service->RemoveVariable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse* resp) {
               return service->Subscribe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse* resp) {
               return service->Resubscribe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse* resp) {
               return service->Unsubscribe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse* resp) {
               return service->DeleteSubscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse* resp) {
               return service->GetVariableInfos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse* resp) {
               return service->GetTimeStampedVariableInfos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse* resp) {
               return service->GetRecordInfos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse* resp) {
               return service->ReadValues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse* resp) {
               return service->ReadTimeStampedValues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ISubscriptionService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ISubscriptionService::Service, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ISubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest* req,
             ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse* resp) {
               return service->ReadRecords(ctx, req, resp);
             }, this)));
}

ISubscriptionService::Service::~Service() {
}

::grpc::Status ISubscriptionService::Service::CreateSubscription(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::CreateRecordingSubscription(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceCreateRecordingSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::AddVariable(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::AddVariables(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceAddVariablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::RemoveVariable(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceRemoveVariableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::Subscribe(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceSubscribeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::Resubscribe(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceResubscribeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::Unsubscribe(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceUnsubscribeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::DeleteSubscription(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceDeleteSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::GetVariableInfos(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetVariableInfosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::GetTimeStampedVariableInfos(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetTimeStampedVariableInfosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::GetRecordInfos(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceGetRecordInfosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::ReadValues(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadValuesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::ReadTimeStampedValues(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadTimeStampedValuesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ISubscriptionService::Service::ReadRecords(::grpc::ServerContext* context, const ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsRequest* request, ::Arp::Plc::Gds::Services::Grpc::ISubscriptionServiceReadRecordsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arp
}  // namespace Plc
}  // namespace Gds
}  // namespace Services
}  // namespace Grpc

