// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IDataAccessService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IDataAccessService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IDataAccessService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DataAccessError.pb.h"
#include "ReadItem.pb.h"
#include "WriteItem.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IDataAccessService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IDataAccessService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IDataAccessService_2eproto;
namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {
class IDataAccessServiceReadRequest;
class IDataAccessServiceReadRequestDefaultTypeInternal;
extern IDataAccessServiceReadRequestDefaultTypeInternal _IDataAccessServiceReadRequest_default_instance_;
class IDataAccessServiceReadResponse;
class IDataAccessServiceReadResponseDefaultTypeInternal;
extern IDataAccessServiceReadResponseDefaultTypeInternal _IDataAccessServiceReadResponse_default_instance_;
class IDataAccessServiceReadSingleRequest;
class IDataAccessServiceReadSingleRequestDefaultTypeInternal;
extern IDataAccessServiceReadSingleRequestDefaultTypeInternal _IDataAccessServiceReadSingleRequest_default_instance_;
class IDataAccessServiceReadSingleResponse;
class IDataAccessServiceReadSingleResponseDefaultTypeInternal;
extern IDataAccessServiceReadSingleResponseDefaultTypeInternal _IDataAccessServiceReadSingleResponse_default_instance_;
class IDataAccessServiceWriteRequest;
class IDataAccessServiceWriteRequestDefaultTypeInternal;
extern IDataAccessServiceWriteRequestDefaultTypeInternal _IDataAccessServiceWriteRequest_default_instance_;
class IDataAccessServiceWriteResponse;
class IDataAccessServiceWriteResponseDefaultTypeInternal;
extern IDataAccessServiceWriteResponseDefaultTypeInternal _IDataAccessServiceWriteResponse_default_instance_;
class IDataAccessServiceWriteSingleRequest;
class IDataAccessServiceWriteSingleRequestDefaultTypeInternal;
extern IDataAccessServiceWriteSingleRequestDefaultTypeInternal _IDataAccessServiceWriteSingleRequest_default_instance_;
class IDataAccessServiceWriteSingleResponse;
class IDataAccessServiceWriteSingleResponseDefaultTypeInternal;
extern IDataAccessServiceWriteSingleResponseDefaultTypeInternal _IDataAccessServiceWriteSingleResponse_default_instance_;
}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadRequest>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadResponse>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleRequest>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceReadSingleResponse>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteRequest>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteResponse>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleRequest>(Arena*);
template<> ::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse* Arena::CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::IDataAccessServiceWriteSingleResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {

// ===================================================================

class IDataAccessServiceReadSingleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest) */ {
 public:
  inline IDataAccessServiceReadSingleRequest() : IDataAccessServiceReadSingleRequest(nullptr) {}
  virtual ~IDataAccessServiceReadSingleRequest();

  IDataAccessServiceReadSingleRequest(const IDataAccessServiceReadSingleRequest& from);
  IDataAccessServiceReadSingleRequest(IDataAccessServiceReadSingleRequest&& from) noexcept
    : IDataAccessServiceReadSingleRequest() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceReadSingleRequest& operator=(const IDataAccessServiceReadSingleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceReadSingleRequest& operator=(IDataAccessServiceReadSingleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceReadSingleRequest& default_instance();

  static inline const IDataAccessServiceReadSingleRequest* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceReadSingleRequest*>(
               &_IDataAccessServiceReadSingleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IDataAccessServiceReadSingleRequest& a, IDataAccessServiceReadSingleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceReadSingleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceReadSingleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceReadSingleRequest* New() const final {
    return CreateMaybeMessage<IDataAccessServiceReadSingleRequest>(nullptr);
  }

  IDataAccessServiceReadSingleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceReadSingleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceReadSingleRequest& from);
  void MergeFrom(const IDataAccessServiceReadSingleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceReadSingleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest";
  }
  protected:
  explicit IDataAccessServiceReadSingleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortNameFieldNumber = 1,
  };
  // string portName = 1;
  void clear_portname();
  const std::string& portname() const;
  void set_portname(const std::string& value);
  void set_portname(std::string&& value);
  void set_portname(const char* value);
  void set_portname(const char* value, size_t size);
  std::string* mutable_portname();
  std::string* release_portname();
  void set_allocated_portname(std::string* portname);
  private:
  const std::string& _internal_portname() const;
  void _internal_set_portname(const std::string& value);
  std::string* _internal_mutable_portname();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr portname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// -------------------------------------------------------------------

class IDataAccessServiceReadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest) */ {
 public:
  inline IDataAccessServiceReadRequest() : IDataAccessServiceReadRequest(nullptr) {}
  virtual ~IDataAccessServiceReadRequest();

  IDataAccessServiceReadRequest(const IDataAccessServiceReadRequest& from);
  IDataAccessServiceReadRequest(IDataAccessServiceReadRequest&& from) noexcept
    : IDataAccessServiceReadRequest() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceReadRequest& operator=(const IDataAccessServiceReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceReadRequest& operator=(IDataAccessServiceReadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceReadRequest& default_instance();

  static inline const IDataAccessServiceReadRequest* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceReadRequest*>(
               &_IDataAccessServiceReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IDataAccessServiceReadRequest& a, IDataAccessServiceReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceReadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceReadRequest* New() const final {
    return CreateMaybeMessage<IDataAccessServiceReadRequest>(nullptr);
  }

  IDataAccessServiceReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceReadRequest& from);
  void MergeFrom(const IDataAccessServiceReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest";
  }
  protected:
  explicit IDataAccessServiceReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortNamesFieldNumber = 1,
  };
  // repeated string portNames = 1;
  int portnames_size() const;
  private:
  int _internal_portnames_size() const;
  public:
  void clear_portnames();
  const std::string& portnames(int index) const;
  std::string* mutable_portnames(int index);
  void set_portnames(int index, const std::string& value);
  void set_portnames(int index, std::string&& value);
  void set_portnames(int index, const char* value);
  void set_portnames(int index, const char* value, size_t size);
  std::string* add_portnames();
  void add_portnames(const std::string& value);
  void add_portnames(std::string&& value);
  void add_portnames(const char* value);
  void add_portnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& portnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_portnames();
  private:
  const std::string& _internal_portnames(int index) const;
  std::string* _internal_add_portnames();
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> portnames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// -------------------------------------------------------------------

class IDataAccessServiceWriteSingleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest) */ {
 public:
  inline IDataAccessServiceWriteSingleRequest() : IDataAccessServiceWriteSingleRequest(nullptr) {}
  virtual ~IDataAccessServiceWriteSingleRequest();

  IDataAccessServiceWriteSingleRequest(const IDataAccessServiceWriteSingleRequest& from);
  IDataAccessServiceWriteSingleRequest(IDataAccessServiceWriteSingleRequest&& from) noexcept
    : IDataAccessServiceWriteSingleRequest() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceWriteSingleRequest& operator=(const IDataAccessServiceWriteSingleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceWriteSingleRequest& operator=(IDataAccessServiceWriteSingleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceWriteSingleRequest& default_instance();

  static inline const IDataAccessServiceWriteSingleRequest* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceWriteSingleRequest*>(
               &_IDataAccessServiceWriteSingleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IDataAccessServiceWriteSingleRequest& a, IDataAccessServiceWriteSingleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceWriteSingleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceWriteSingleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceWriteSingleRequest* New() const final {
    return CreateMaybeMessage<IDataAccessServiceWriteSingleRequest>(nullptr);
  }

  IDataAccessServiceWriteSingleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceWriteSingleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceWriteSingleRequest& from);
  void MergeFrom(const IDataAccessServiceWriteSingleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceWriteSingleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest";
  }
  protected:
  explicit IDataAccessServiceWriteSingleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .Arp.Plc.Gds.Services.Grpc.WriteItem data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Arp::Plc::Gds::Services::Grpc::WriteItem& data() const;
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* release_data();
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* mutable_data();
  void set_allocated_data(::Arp::Plc::Gds::Services::Grpc::WriteItem* data);
  private:
  const ::Arp::Plc::Gds::Services::Grpc::WriteItem& _internal_data() const;
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::Arp::Plc::Gds::Services::Grpc::WriteItem* data);
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// -------------------------------------------------------------------

class IDataAccessServiceWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest) */ {
 public:
  inline IDataAccessServiceWriteRequest() : IDataAccessServiceWriteRequest(nullptr) {}
  virtual ~IDataAccessServiceWriteRequest();

  IDataAccessServiceWriteRequest(const IDataAccessServiceWriteRequest& from);
  IDataAccessServiceWriteRequest(IDataAccessServiceWriteRequest&& from) noexcept
    : IDataAccessServiceWriteRequest() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceWriteRequest& operator=(const IDataAccessServiceWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceWriteRequest& operator=(IDataAccessServiceWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceWriteRequest& default_instance();

  static inline const IDataAccessServiceWriteRequest* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceWriteRequest*>(
               &_IDataAccessServiceWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IDataAccessServiceWriteRequest& a, IDataAccessServiceWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceWriteRequest* New() const final {
    return CreateMaybeMessage<IDataAccessServiceWriteRequest>(nullptr);
  }

  IDataAccessServiceWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceWriteRequest& from);
  void MergeFrom(const IDataAccessServiceWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest";
  }
  protected:
  explicit IDataAccessServiceWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .Arp.Plc.Gds.Services.Grpc.WriteItem data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::WriteItem >*
      mutable_data();
  private:
  const ::Arp::Plc::Gds::Services::Grpc::WriteItem& _internal_data(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* _internal_add_data();
  public:
  const ::Arp::Plc::Gds::Services::Grpc::WriteItem& data(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::WriteItem >&
      data() const;

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::WriteItem > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// -------------------------------------------------------------------

class IDataAccessServiceReadSingleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse) */ {
 public:
  inline IDataAccessServiceReadSingleResponse() : IDataAccessServiceReadSingleResponse(nullptr) {}
  virtual ~IDataAccessServiceReadSingleResponse();

  IDataAccessServiceReadSingleResponse(const IDataAccessServiceReadSingleResponse& from);
  IDataAccessServiceReadSingleResponse(IDataAccessServiceReadSingleResponse&& from) noexcept
    : IDataAccessServiceReadSingleResponse() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceReadSingleResponse& operator=(const IDataAccessServiceReadSingleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceReadSingleResponse& operator=(IDataAccessServiceReadSingleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceReadSingleResponse& default_instance();

  static inline const IDataAccessServiceReadSingleResponse* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceReadSingleResponse*>(
               &_IDataAccessServiceReadSingleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IDataAccessServiceReadSingleResponse& a, IDataAccessServiceReadSingleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceReadSingleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceReadSingleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceReadSingleResponse* New() const final {
    return CreateMaybeMessage<IDataAccessServiceReadSingleResponse>(nullptr);
  }

  IDataAccessServiceReadSingleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceReadSingleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceReadSingleResponse& from);
  void MergeFrom(const IDataAccessServiceReadSingleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceReadSingleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse";
  }
  protected:
  explicit IDataAccessServiceReadSingleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Plc.Gds.Services.Grpc.ReadItem _ReturnValue = 1;
  bool has__returnvalue() const;
  private:
  bool _internal_has__returnvalue() const;
  public:
  void clear__returnvalue();
  const ::Arp::Plc::Gds::Services::Grpc::ReadItem& _returnvalue() const;
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* release__returnvalue();
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* mutable__returnvalue();
  void set_allocated__returnvalue(::Arp::Plc::Gds::Services::Grpc::ReadItem* _returnvalue);
  private:
  const ::Arp::Plc::Gds::Services::Grpc::ReadItem& _internal__returnvalue() const;
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* _internal_mutable__returnvalue();
  public:
  void unsafe_arena_set_allocated__returnvalue(
      ::Arp::Plc::Gds::Services::Grpc::ReadItem* _returnvalue);
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* unsafe_arena_release__returnvalue();

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// -------------------------------------------------------------------

class IDataAccessServiceReadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse) */ {
 public:
  inline IDataAccessServiceReadResponse() : IDataAccessServiceReadResponse(nullptr) {}
  virtual ~IDataAccessServiceReadResponse();

  IDataAccessServiceReadResponse(const IDataAccessServiceReadResponse& from);
  IDataAccessServiceReadResponse(IDataAccessServiceReadResponse&& from) noexcept
    : IDataAccessServiceReadResponse() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceReadResponse& operator=(const IDataAccessServiceReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceReadResponse& operator=(IDataAccessServiceReadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceReadResponse& default_instance();

  static inline const IDataAccessServiceReadResponse* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceReadResponse*>(
               &_IDataAccessServiceReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IDataAccessServiceReadResponse& a, IDataAccessServiceReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceReadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceReadResponse* New() const final {
    return CreateMaybeMessage<IDataAccessServiceReadResponse>(nullptr);
  }

  IDataAccessServiceReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceReadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceReadResponse& from);
  void MergeFrom(const IDataAccessServiceReadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse";
  }
  protected:
  explicit IDataAccessServiceReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Plc.Gds.Services.Grpc.ReadItem _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* mutable__returnvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ReadItem >*
      mutable__returnvalue();
  private:
  const ::Arp::Plc::Gds::Services::Grpc::ReadItem& _internal__returnvalue(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* _internal_add__returnvalue();
  public:
  const ::Arp::Plc::Gds::Services::Grpc::ReadItem& _returnvalue(int index) const;
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* add__returnvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ReadItem >&
      _returnvalue() const;

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ReadItem > _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// -------------------------------------------------------------------

class IDataAccessServiceWriteSingleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse) */ {
 public:
  inline IDataAccessServiceWriteSingleResponse() : IDataAccessServiceWriteSingleResponse(nullptr) {}
  virtual ~IDataAccessServiceWriteSingleResponse();

  IDataAccessServiceWriteSingleResponse(const IDataAccessServiceWriteSingleResponse& from);
  IDataAccessServiceWriteSingleResponse(IDataAccessServiceWriteSingleResponse&& from) noexcept
    : IDataAccessServiceWriteSingleResponse() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceWriteSingleResponse& operator=(const IDataAccessServiceWriteSingleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceWriteSingleResponse& operator=(IDataAccessServiceWriteSingleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceWriteSingleResponse& default_instance();

  static inline const IDataAccessServiceWriteSingleResponse* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceWriteSingleResponse*>(
               &_IDataAccessServiceWriteSingleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IDataAccessServiceWriteSingleResponse& a, IDataAccessServiceWriteSingleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceWriteSingleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceWriteSingleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceWriteSingleResponse* New() const final {
    return CreateMaybeMessage<IDataAccessServiceWriteSingleResponse>(nullptr);
  }

  IDataAccessServiceWriteSingleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceWriteSingleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceWriteSingleResponse& from);
  void MergeFrom(const IDataAccessServiceWriteSingleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceWriteSingleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse";
  }
  protected:
  explicit IDataAccessServiceWriteSingleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // .Arp.Plc.Gds.Services.Grpc.DataAccessError _ReturnValue = 1;
  void clear__returnvalue();
  ::Arp::Plc::Gds::Services::Grpc::DataAccessError _returnvalue() const;
  void set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value);
  private:
  ::Arp::Plc::Gds::Services::Grpc::DataAccessError _internal__returnvalue() const;
  void _internal_set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value);
  public:

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int _returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// -------------------------------------------------------------------

class IDataAccessServiceWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse) */ {
 public:
  inline IDataAccessServiceWriteResponse() : IDataAccessServiceWriteResponse(nullptr) {}
  virtual ~IDataAccessServiceWriteResponse();

  IDataAccessServiceWriteResponse(const IDataAccessServiceWriteResponse& from);
  IDataAccessServiceWriteResponse(IDataAccessServiceWriteResponse&& from) noexcept
    : IDataAccessServiceWriteResponse() {
    *this = ::std::move(from);
  }

  inline IDataAccessServiceWriteResponse& operator=(const IDataAccessServiceWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDataAccessServiceWriteResponse& operator=(IDataAccessServiceWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDataAccessServiceWriteResponse& default_instance();

  static inline const IDataAccessServiceWriteResponse* internal_default_instance() {
    return reinterpret_cast<const IDataAccessServiceWriteResponse*>(
               &_IDataAccessServiceWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IDataAccessServiceWriteResponse& a, IDataAccessServiceWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IDataAccessServiceWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDataAccessServiceWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDataAccessServiceWriteResponse* New() const final {
    return CreateMaybeMessage<IDataAccessServiceWriteResponse>(nullptr);
  }

  IDataAccessServiceWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDataAccessServiceWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDataAccessServiceWriteResponse& from);
  void MergeFrom(const IDataAccessServiceWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDataAccessServiceWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse";
  }
  protected:
  explicit IDataAccessServiceWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IDataAccessService_2eproto);
    return ::descriptor_table_IDataAccessService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 1,
  };
  // repeated .Arp.Plc.Gds.Services.Grpc.DataAccessError _ReturnValue = 1;
  int _returnvalue_size() const;
  private:
  int _internal__returnvalue_size() const;
  public:
  void clear__returnvalue();
  private:
  ::Arp::Plc::Gds::Services::Grpc::DataAccessError _internal__returnvalue(int index) const;
  void _internal_add__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable__returnvalue();
  public:
  ::Arp::Plc::Gds::Services::Grpc::DataAccessError _returnvalue(int index) const;
  void set__returnvalue(int index, ::Arp::Plc::Gds::Services::Grpc::DataAccessError value);
  void add__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _returnvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable__returnvalue();

  // @@protoc_insertion_point(class_scope:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> _returnvalue_;
  mutable std::atomic<int> __returnvalue_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IDataAccessService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IDataAccessServiceReadSingleRequest

// string portName = 1;
inline void IDataAccessServiceReadSingleRequest::clear_portname() {
  portname_.ClearToEmpty();
}
inline const std::string& IDataAccessServiceReadSingleRequest::portname() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
  return _internal_portname();
}
inline void IDataAccessServiceReadSingleRequest::set_portname(const std::string& value) {
  _internal_set_portname(value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
}
inline std::string* IDataAccessServiceReadSingleRequest::mutable_portname() {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
  return _internal_mutable_portname();
}
inline const std::string& IDataAccessServiceReadSingleRequest::_internal_portname() const {
  return portname_.Get();
}
inline void IDataAccessServiceReadSingleRequest::_internal_set_portname(const std::string& value) {
  
  portname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IDataAccessServiceReadSingleRequest::set_portname(std::string&& value) {
  
  portname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
}
inline void IDataAccessServiceReadSingleRequest::set_portname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  portname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
}
inline void IDataAccessServiceReadSingleRequest::set_portname(const char* value,
    size_t size) {
  
  portname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
}
inline std::string* IDataAccessServiceReadSingleRequest::_internal_mutable_portname() {
  
  return portname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IDataAccessServiceReadSingleRequest::release_portname() {
  // @@protoc_insertion_point(field_release:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
  return portname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDataAccessServiceReadSingleRequest::set_allocated_portname(std::string* portname) {
  if (portname != nullptr) {
    
  } else {
    
  }
  portname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), portname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.portName)
}

// -------------------------------------------------------------------

// IDataAccessServiceReadRequest

// repeated string portNames = 1;
inline int IDataAccessServiceReadRequest::_internal_portnames_size() const {
  return portnames_.size();
}
inline int IDataAccessServiceReadRequest::portnames_size() const {
  return _internal_portnames_size();
}
inline void IDataAccessServiceReadRequest::clear_portnames() {
  portnames_.Clear();
}
inline std::string* IDataAccessServiceReadRequest::add_portnames() {
  // @@protoc_insertion_point(field_add_mutable:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
  return _internal_add_portnames();
}
inline const std::string& IDataAccessServiceReadRequest::_internal_portnames(int index) const {
  return portnames_.Get(index);
}
inline const std::string& IDataAccessServiceReadRequest::portnames(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
  return _internal_portnames(index);
}
inline std::string* IDataAccessServiceReadRequest::mutable_portnames(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
  return portnames_.Mutable(index);
}
inline void IDataAccessServiceReadRequest::set_portnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
  portnames_.Mutable(index)->assign(value);
}
inline void IDataAccessServiceReadRequest::set_portnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
  portnames_.Mutable(index)->assign(std::move(value));
}
inline void IDataAccessServiceReadRequest::set_portnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  portnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
}
inline void IDataAccessServiceReadRequest::set_portnames(int index, const char* value, size_t size) {
  portnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
}
inline std::string* IDataAccessServiceReadRequest::_internal_add_portnames() {
  return portnames_.Add();
}
inline void IDataAccessServiceReadRequest::add_portnames(const std::string& value) {
  portnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
}
inline void IDataAccessServiceReadRequest::add_portnames(std::string&& value) {
  portnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
}
inline void IDataAccessServiceReadRequest::add_portnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  portnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
}
inline void IDataAccessServiceReadRequest::add_portnames(const char* value, size_t size) {
  portnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDataAccessServiceReadRequest::portnames() const {
  // @@protoc_insertion_point(field_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
  return portnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDataAccessServiceReadRequest::mutable_portnames() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.portNames)
  return &portnames_;
}

// -------------------------------------------------------------------

// IDataAccessServiceWriteSingleRequest

// .Arp.Plc.Gds.Services.Grpc.WriteItem data = 1;
inline bool IDataAccessServiceWriteSingleRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool IDataAccessServiceWriteSingleRequest::has_data() const {
  return _internal_has_data();
}
inline const ::Arp::Plc::Gds::Services::Grpc::WriteItem& IDataAccessServiceWriteSingleRequest::_internal_data() const {
  const ::Arp::Plc::Gds::Services::Grpc::WriteItem* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Plc::Gds::Services::Grpc::WriteItem&>(
      ::Arp::Plc::Gds::Services::Grpc::_WriteItem_default_instance_);
}
inline const ::Arp::Plc::Gds::Services::Grpc::WriteItem& IDataAccessServiceWriteSingleRequest::data() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest.data)
  return _internal_data();
}
inline void IDataAccessServiceWriteSingleRequest::unsafe_arena_set_allocated_data(
    ::Arp::Plc::Gds::Services::Grpc::WriteItem* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest.data)
}
inline ::Arp::Plc::Gds::Services::Grpc::WriteItem* IDataAccessServiceWriteSingleRequest::release_data() {
  
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Plc::Gds::Services::Grpc::WriteItem* IDataAccessServiceWriteSingleRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest.data)
  
  ::Arp::Plc::Gds::Services::Grpc::WriteItem* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Arp::Plc::Gds::Services::Grpc::WriteItem* IDataAccessServiceWriteSingleRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::WriteItem>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::Arp::Plc::Gds::Services::Grpc::WriteItem* IDataAccessServiceWriteSingleRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest.data)
  return _internal_mutable_data();
}
inline void IDataAccessServiceWriteSingleRequest::set_allocated_data(::Arp::Plc::Gds::Services::Grpc::WriteItem* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest.data)
}

// -------------------------------------------------------------------

// IDataAccessServiceWriteRequest

// repeated .Arp.Plc.Gds.Services.Grpc.WriteItem data = 1;
inline int IDataAccessServiceWriteRequest::_internal_data_size() const {
  return data_.size();
}
inline int IDataAccessServiceWriteRequest::data_size() const {
  return _internal_data_size();
}
inline ::Arp::Plc::Gds::Services::Grpc::WriteItem* IDataAccessServiceWriteRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::WriteItem >*
IDataAccessServiceWriteRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest.data)
  return &data_;
}
inline const ::Arp::Plc::Gds::Services::Grpc::WriteItem& IDataAccessServiceWriteRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::Arp::Plc::Gds::Services::Grpc::WriteItem& IDataAccessServiceWriteRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest.data)
  return _internal_data(index);
}
inline ::Arp::Plc::Gds::Services::Grpc::WriteItem* IDataAccessServiceWriteRequest::_internal_add_data() {
  return data_.Add();
}
inline ::Arp::Plc::Gds::Services::Grpc::WriteItem* IDataAccessServiceWriteRequest::add_data() {
  // @@protoc_insertion_point(field_add:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::WriteItem >&
IDataAccessServiceWriteRequest::data() const {
  // @@protoc_insertion_point(field_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// IDataAccessServiceReadSingleResponse

// .Arp.Plc.Gds.Services.Grpc.ReadItem _ReturnValue = 1;
inline bool IDataAccessServiceReadSingleResponse::_internal_has__returnvalue() const {
  return this != internal_default_instance() && _returnvalue_ != nullptr;
}
inline bool IDataAccessServiceReadSingleResponse::has__returnvalue() const {
  return _internal_has__returnvalue();
}
inline const ::Arp::Plc::Gds::Services::Grpc::ReadItem& IDataAccessServiceReadSingleResponse::_internal__returnvalue() const {
  const ::Arp::Plc::Gds::Services::Grpc::ReadItem* p = _returnvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arp::Plc::Gds::Services::Grpc::ReadItem&>(
      ::Arp::Plc::Gds::Services::Grpc::_ReadItem_default_instance_);
}
inline const ::Arp::Plc::Gds::Services::Grpc::ReadItem& IDataAccessServiceReadSingleResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataAccessServiceReadSingleResponse::unsafe_arena_set_allocated__returnvalue(
    ::Arp::Plc::Gds::Services::Grpc::ReadItem* _returnvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_returnvalue_);
  }
  _returnvalue_ = _returnvalue;
  if (_returnvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse._ReturnValue)
}
inline ::Arp::Plc::Gds::Services::Grpc::ReadItem* IDataAccessServiceReadSingleResponse::release__returnvalue() {
  
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* temp = _returnvalue_;
  _returnvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Arp::Plc::Gds::Services::Grpc::ReadItem* IDataAccessServiceReadSingleResponse::unsafe_arena_release__returnvalue() {
  // @@protoc_insertion_point(field_release:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse._ReturnValue)
  
  ::Arp::Plc::Gds::Services::Grpc::ReadItem* temp = _returnvalue_;
  _returnvalue_ = nullptr;
  return temp;
}
inline ::Arp::Plc::Gds::Services::Grpc::ReadItem* IDataAccessServiceReadSingleResponse::_internal_mutable__returnvalue() {
  
  if (_returnvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Arp::Plc::Gds::Services::Grpc::ReadItem>(GetArena());
    _returnvalue_ = p;
  }
  return _returnvalue_;
}
inline ::Arp::Plc::Gds::Services::Grpc::ReadItem* IDataAccessServiceReadSingleResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse._ReturnValue)
  return _internal_mutable__returnvalue();
}
inline void IDataAccessServiceReadSingleResponse::set_allocated__returnvalue(::Arp::Plc::Gds::Services::Grpc::ReadItem* _returnvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_returnvalue_);
  }
  if (_returnvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_returnvalue)->GetArena();
    if (message_arena != submessage_arena) {
      _returnvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _returnvalue, submessage_arena);
    }
    
  } else {
    
  }
  _returnvalue_ = _returnvalue;
  // @@protoc_insertion_point(field_set_allocated:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDataAccessServiceReadResponse

// repeated .Arp.Plc.Gds.Services.Grpc.ReadItem _ReturnValue = 1;
inline int IDataAccessServiceReadResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int IDataAccessServiceReadResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline ::Arp::Plc::Gds::Services::Grpc::ReadItem* IDataAccessServiceReadResponse::mutable__returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse._ReturnValue)
  return _returnvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ReadItem >*
IDataAccessServiceReadResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse._ReturnValue)
  return &_returnvalue_;
}
inline const ::Arp::Plc::Gds::Services::Grpc::ReadItem& IDataAccessServiceReadResponse::_internal__returnvalue(int index) const {
  return _returnvalue_.Get(index);
}
inline const ::Arp::Plc::Gds::Services::Grpc::ReadItem& IDataAccessServiceReadResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline ::Arp::Plc::Gds::Services::Grpc::ReadItem* IDataAccessServiceReadResponse::_internal_add__returnvalue() {
  return _returnvalue_.Add();
}
inline ::Arp::Plc::Gds::Services::Grpc::ReadItem* IDataAccessServiceReadResponse::add__returnvalue() {
  // @@protoc_insertion_point(field_add:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse._ReturnValue)
  return _internal_add__returnvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Arp::Plc::Gds::Services::Grpc::ReadItem >&
IDataAccessServiceReadResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse._ReturnValue)
  return _returnvalue_;
}

// -------------------------------------------------------------------

// IDataAccessServiceWriteSingleResponse

// .Arp.Plc.Gds.Services.Grpc.DataAccessError _ReturnValue = 1;
inline void IDataAccessServiceWriteSingleResponse::clear__returnvalue() {
  _returnvalue_ = 0;
}
inline ::Arp::Plc::Gds::Services::Grpc::DataAccessError IDataAccessServiceWriteSingleResponse::_internal__returnvalue() const {
  return static_cast< ::Arp::Plc::Gds::Services::Grpc::DataAccessError >(_returnvalue_);
}
inline ::Arp::Plc::Gds::Services::Grpc::DataAccessError IDataAccessServiceWriteSingleResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse._ReturnValue)
  return _internal__returnvalue();
}
inline void IDataAccessServiceWriteSingleResponse::_internal_set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value) {
  
  _returnvalue_ = value;
}
inline void IDataAccessServiceWriteSingleResponse::set__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value) {
  _internal_set__returnvalue(value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse._ReturnValue)
}

// -------------------------------------------------------------------

// IDataAccessServiceWriteResponse

// repeated .Arp.Plc.Gds.Services.Grpc.DataAccessError _ReturnValue = 1;
inline int IDataAccessServiceWriteResponse::_internal__returnvalue_size() const {
  return _returnvalue_.size();
}
inline int IDataAccessServiceWriteResponse::_returnvalue_size() const {
  return _internal__returnvalue_size();
}
inline void IDataAccessServiceWriteResponse::clear__returnvalue() {
  _returnvalue_.Clear();
}
inline ::Arp::Plc::Gds::Services::Grpc::DataAccessError IDataAccessServiceWriteResponse::_internal__returnvalue(int index) const {
  return static_cast< ::Arp::Plc::Gds::Services::Grpc::DataAccessError >(_returnvalue_.Get(index));
}
inline ::Arp::Plc::Gds::Services::Grpc::DataAccessError IDataAccessServiceWriteResponse::_returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse._ReturnValue)
  return _internal__returnvalue(index);
}
inline void IDataAccessServiceWriteResponse::set__returnvalue(int index, ::Arp::Plc::Gds::Services::Grpc::DataAccessError value) {
  _returnvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse._ReturnValue)
}
inline void IDataAccessServiceWriteResponse::_internal_add__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value) {
  _returnvalue_.Add(value);
}
inline void IDataAccessServiceWriteResponse::add__returnvalue(::Arp::Plc::Gds::Services::Grpc::DataAccessError value) {
  // @@protoc_insertion_point(field_add:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse._ReturnValue)
  _internal_add__returnvalue(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
IDataAccessServiceWriteResponse::_returnvalue() const {
  // @@protoc_insertion_point(field_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse._ReturnValue)
  return _returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
IDataAccessServiceWriteResponse::_internal_mutable__returnvalue() {
  return &_returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
IDataAccessServiceWriteResponse::mutable__returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse._ReturnValue)
  return _internal_mutable__returnvalue();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IDataAccessService_2eproto
