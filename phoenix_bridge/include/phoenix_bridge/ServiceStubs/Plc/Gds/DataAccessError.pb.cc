// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataAccessError.proto

#include "DataAccessError.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {
}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_DataAccessError_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DataAccessError_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DataAccessError_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DataAccessError_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_DataAccessError_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025DataAccessError.proto\022\031Arp.Plc.Gds.Ser"
  "vices.Grpc*\332\002\n\017DataAccessError\022\014\n\010DAE_No"
  "ne\020\000\022\021\n\rDAE_NotExists\020\001\022\025\n\021DAE_NotAuthor"
  "ized\020\002\022\024\n\020DAE_TypeMismatch\020\003\022\033\n\027DAE_Port"
  "NameSyntaxError\020\004\022\035\n\031DAE_PortNameSemanti"
  "cError\020\005\022\027\n\023DAE_IndexOutOfRange\020\006\022\026\n\022DAE"
  "_NotImplemented\020\007\022\024\n\020DAE_NotSupported\020\010\022"
  "\034\n\030DAE_CurrentlyUnavailable\020\t\022\033\n\027DAE_Unv"
  "alidSubscription\020\n\022\016\n\nDAE_NoData\020\013\022\025\n\021DA"
  "E_InvalidConfig\020\014\022\024\n\017DAE_Unspecified\020\377\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DataAccessError_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DataAccessError_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DataAccessError_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataAccessError_2eproto = {
  false, false, descriptor_table_protodef_DataAccessError_2eproto, "DataAccessError.proto", 407,
  &descriptor_table_DataAccessError_2eproto_once, descriptor_table_DataAccessError_2eproto_sccs, descriptor_table_DataAccessError_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_DataAccessError_2eproto::offsets,
  file_level_metadata_DataAccessError_2eproto, 0, file_level_enum_descriptors_DataAccessError_2eproto, file_level_service_descriptors_DataAccessError_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DataAccessError_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DataAccessError_2eproto)), true);
namespace Arp {
namespace Plc {
namespace Gds {
namespace Services {
namespace Grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataAccessError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DataAccessError_2eproto);
  return file_level_enum_descriptors_DataAccessError_2eproto[0];
}
bool DataAccessError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 255:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Grpc
}  // namespace Services
}  // namespace Gds
}  // namespace Plc
}  // namespace Arp
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
