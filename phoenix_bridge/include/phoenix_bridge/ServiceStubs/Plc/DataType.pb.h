// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DataType_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DataType_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DataType_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DataType_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataType_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Arp {
namespace Plc {
namespace Grpc {

enum DataType : int {
  DT_None = 0,
  DT_Void = 1,
  DT_Bit = 2,
  DT_Boolean = 3,
  DT_UInt8 = 4,
  DT_Int8 = 5,
  DT_Char8 = 6,
  DT_Char16 = 7,
  DT_UInt16 = 8,
  DT_Int16 = 9,
  DT_UInt32 = 10,
  DT_Int32 = 11,
  DT_UInt64 = 12,
  DT_Int64 = 13,
  DT_Float32 = 14,
  DT_Float64 = 15,
  DT_Primitive = 32,
  DT_DateTime = 33,
  DT_IecTime = 34,
  DT_IecTime64 = 35,
  DT_IecDate = 36,
  DT_IecDate64 = 37,
  DT_IecDateTime = 38,
  DT_IecDateTime64 = 39,
  DT_IecTimeOfDay = 40,
  DT_IecTimeOfDay64 = 41,
  DT_StaticString = 42,
  DT_IecString = 43,
  DT_ClrString = 44,
  DT_String = 45,
  DT_Elementary = 64,
  DT_ArrayElement = 65,
  DT_Struct = 66,
  DT_Class = 67,
  DT_FunctionBlock = 68,
  DT_Subsystem = 69,
  DT_Program = 70,
  DT_Component = 71,
  DT_Library = 72,
  DT_Complex = 254,
  DT_Pointer = 512,
  DT_Array = 1024,
  DT_Enum = 2048,
  DT_Reference = 4096,
  DT_BaseTypeMask = 255,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = DT_None;
constexpr DataType DataType_MAX = DT_Reference;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Plc
}  // namespace Arp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Arp::Plc::Grpc::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Arp::Plc::Grpc::DataType>() {
  return ::Arp::Plc::Grpc::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DataType_2eproto
