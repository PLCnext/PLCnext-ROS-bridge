variables:
  DOCKER_BUILDKIT: 1
  DOCKER_TLS_CERTDIR: ""
  SUFFIX: ""
  PREFIX: "${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:"
  BUILDER_PREFIX: "registry.gitlab.cc-asp.fraunhofer.de/ipa326/docker_ros_builder/"
  BUILDER_SUFFIX: ":latest"
  DEP_PREFIX: "registry.gitlab.cc-asp.fraunhofer.de/ipa326/phoenix_dependencies/"
  DEP_SUFFIX: ":latest"
  ROSINSTALL_CI_JOB_TOKEN: "true"
  FOLDER: ${CI_JOB_NAME}
  ROS_DISTRO: ""
  ROS_DISTROS: noetic foxy
  NAME: ${CI_JOB_NAME}
  TARGET_LATEST: ${CI_REGISTRY_IMAGE}/${NAME}:latest
  TARGET_BRANCH: ${CI_REGISTRY_IMAGE}/${NAME}:${CI_COMMIT_REF_NAME//\//-}
  TARGET_RELEASE: ${CI_REGISTRY_IMAGE}/${NAME}:${CI_COMMIT_TAG//\//-}
  CMAKE_ARGS: "-DCMAKE_BUILD_TYPE=Release"

services:
  - docker:dind

default:
  tags:
    - docker-build

stages:
  - check_ros_distro
  - phoenix_bridge
  - publish
  - cleanup

.common:
  docker_login:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

prepare:
  stage: check_ros_distro
  script:
    - |
      for distro in $ROS_DISTROS; do
        raw=${CI_COMMIT_REF_NAME//\//-}
        if [[ "$distro" = "${raw%%-*}" ]] || [[ "$distro" = "${CI_COMMIT_REF_NAME}" ]] || [[ "$distro" = "${raw%%_*}" ]]; then
          echo "found"
          echo "ROS_DISTRO=$distro" >> build.env
          break
        fi
      done;
      if [[ $ROS_DISTRO = "" ]]; then
        exit 1
        echo "Not found"
      fi
  artifacts:
    reports:
      dotenv: build.env

.build:
  stage: ${CI_JOB_NAME}
  before_script:
    - !reference [.common, docker_login]
  script:
    - >
      TARGET=${CI_REGISTRY_IMAGE}/${NAME}:${CI_COMMIT_REF_NAME//\//-};
      docker build --cache-from $TARGET --cache-from $TARGET_LATEST --cache-from $TARGET_BRANCH
      --build-arg DEP_PREFIX
      --build-arg DEP_SUFFIX
      --build-arg BUILDER_PREFIX
      --build-arg BUILDER_SUFFIX
      --build-arg ROS_DISTRO
      --build-arg ROSINSTALL_CI_JOB_TOKEN=$ROSINSTALL_CI_JOB_TOKEN
      --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN
      --build-arg CMAKE_ARGS
      -t ${PREFIX}${NAME}${SUFFIX} ${FOLDER}
  after_script:
    - docker push ${PREFIX}${NAME}${SUFFIX}
  variables:
    NAME: ${CI_JOB_NAME}_${ROS_DISTRO}
  needs:
    - prepare

phoenix_bridge:
  extends: .build
  variables:
    FOLDER: .
  stage: phoenix_bridge
  needs:
    - prepare

.publish:
  stage: publish
  before_script:
    - !reference [.common, docker_login]
    - docker pull ${PREFIX}${NAME}${SUFFIX}
  script:
    - |
      TARGET=${CI_REGISTRY_IMAGE}/${NAME}:${CI_COMMIT_REF_NAME//\//-}
      if [ "$CI_COMMIT_REF_NAME" = "${ROS_DISTRO}/devel" ]; then
        TARGET=$TARGET_LATEST
      fi
      if [ $CI_COMMIT_TAG ]; then
        convert_tag=${CI_COMMIT_TAG//\//-}
        distro_prefix=${ROS_DISTRO}-
        remove_distro_tag=${convert_tag#"$distro_prefix"}
        TARGET_RELEASE=${CI_REGISTRY_IMAGE}/${NAME}:${remove_distro_tag}
        TARGET=$TARGET_RELEASE
      fi
      docker tag ${PREFIX}${NAME}${SUFFIX} ${TARGET} && docker push ${TARGET}
  needs:
    - prepare
    - phoenix_bridge
  rules :
    - if: $CI_COMMIT_TAG != null || $CI_COMMIT_REF_NAME =~ /devel/
      when: on_success

publish:phoenix_bridge:
  extends: .publish
  variables:
    NAME: phoenix_bridge_${ROS_DISTRO}

cleanup_job:
  image: alpine:latest
  stage: cleanup
  before_script:
    - apk add --no-cache curl
    - apk add jq
  script:
    - >
      curl -H "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.cc-asp.fraunhofer.de/api/v4/projects/${CI_PROJECT_ID}/registry/repositories" > output.json
    - >
      image_id=$(jq --arg CI_PIPELINE_ID "$CI_PIPELINE_ID" '.[] | select(.name==$CI_PIPELINE_ID) | .id' output.json)
    - |
      if [[ ! -z "$image_id" ]]; then
        curl --request DELETE -H "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.cc-asp.fraunhofer.de/api/v4/projects/${CI_PROJECT_ID}/registry/repositories/${image_id}"
      fi
  when: always
